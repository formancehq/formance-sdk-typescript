/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import {
  V3AccountTypeEnum,
  V3PaymentInitiationStatusEnum,
  V3PaymentInitiationTypeEnum,
  V3PaymentStatusEnum,
  V3PaymentTypeEnum,
  V3TaskStatusEnum,
} from "../sdk/models/shared/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("V3 V3 Add Account To Pool", async () => {
  const testHttpClient = createTestHTTPClient("v3AddAccountToPool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.addAccountToPool({
    accountID: "<id>",
    poolID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V3 V3 Approve Payment Initiation", async () => {
  const testHttpClient = createTestHTTPClient("v3ApprovePaymentInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.approvePaymentInitiation({
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(202);
  expect(result.v3ApprovePaymentInitiationResponse).toBeDefined();
  expect(result.v3ApprovePaymentInitiationResponse).toEqual({
    data: {
      taskID: "<id>",
    },
  });
});

test("V3 V3 Create Account", async () => {
  const testHttpClient = createTestHTTPClient("v3CreateAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.createAccount();
  expect(result.statusCode).toBe(201);
  expect(result.v3CreateAccountResponse).toBeDefined();
  expect(result.v3CreateAccountResponse).toEqual({
    data: {
      connectorID: "<value>",
      createdAt: new Date("2023-08-09T11:34:36.410Z"),
      id: "<id>",
      provider: "<value>",
      raw: {},
      reference: "<value>",
      type: V3AccountTypeEnum.Unknown,
    },
  });
});

test("V3 V3 Create Bank Account", async () => {
  const testHttpClient = createTestHTTPClient("v3CreateBankAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.createBankAccount();
  expect(result.statusCode).toBe(201);
  expect(result.v3CreateBankAccountResponse).toBeDefined();
  expect(result.v3CreateBankAccountResponse).toEqual({
    data: "<value>",
  });
});

test("V3 V3 Create Payment", async () => {
  const testHttpClient = createTestHTTPClient("v3CreatePayment");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.createPayment();
  expect(result.statusCode).toBe(201);
  expect(result.v3CreatePaymentResponse).toBeDefined();
  expect(result.v3CreatePaymentResponse).toEqual({
    data: {
      amount: BigInt("252554"),
      asset: "<value>",
      connectorID: "<value>",
      createdAt: new Date("2024-12-31T19:31:25.838Z"),
      id: "<id>",
      initialAmount: BigInt("581056"),
      provider: "<value>",
      reference: "<value>",
      scheme: "<value>",
      status: V3PaymentStatusEnum.RefundedFailure,
      type: V3PaymentTypeEnum.Unknown,
    },
  });
});

test("V3 V3 Create Pool", async () => {
  const testHttpClient = createTestHTTPClient("v3CreatePool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.createPool();
  expect(result.statusCode).toBe(201);
  expect(result.v3CreatePoolResponse).toBeDefined();
  expect(result.v3CreatePoolResponse).toEqual({
    data: "<value>",
  });
});

test("V3 V3 Delete Payment Initiation", async () => {
  const testHttpClient = createTestHTTPClient("v3DeletePaymentInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.deletePaymentInitiation({
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V3 V3 Delete Pool", async () => {
  const testHttpClient = createTestHTTPClient("v3DeletePool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.deletePool({
    poolID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V3 V3 Forward Bank Account", async () => {
  const testHttpClient = createTestHTTPClient("v3ForwardBankAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.forwardBankAccount({
    bankAccountID: "<id>",
  });
  expect(result.statusCode).toBe(202);
  expect(result.v3ForwardBankAccountResponse).toBeDefined();
  expect(result.v3ForwardBankAccountResponse).toEqual({
    data: {
      taskID: "<id>",
    },
  });
});

test("V3 V3 Get Account", async () => {
  const testHttpClient = createTestHTTPClient("v3GetAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getAccount({
    accountID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3GetAccountResponse).toBeDefined();
  expect(result.v3GetAccountResponse).toEqual({
    data: {
      connectorID: "<value>",
      createdAt: new Date("2023-06-03T07:35:25.500Z"),
      id: "<id>",
      provider: "<value>",
      raw: {},
      reference: "<value>",
      type: V3AccountTypeEnum.Internal,
    },
  });
});

test("V3 V3 Get Account Balances", async () => {
  const testHttpClient = createTestHTTPClient("v3GetAccountBalances");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getAccountBalances({
    accountID: "<id>",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3BalancesCursorResponse).toBeDefined();
  expect(result.v3BalancesCursorResponse).toEqual({
    cursor: {
      data: [
        {
          accountID: "<id>",
          asset: "<value>",
          balance: BigInt("401303"),
          createdAt: new Date("2023-07-10T00:38:07.826Z"),
          lastUpdatedAt: new Date("2025-07-01T02:16:38.081Z"),
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 Get Bank Account", async () => {
  const testHttpClient = createTestHTTPClient("v3GetBankAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getBankAccount({
    bankAccountID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3GetBankAccountResponse).toBeDefined();
  expect(result.v3GetBankAccountResponse).toEqual({
    data: {
      createdAt: new Date("2023-11-05T20:09:51.675Z"),
      id: "<id>",
      name: "<value>",
    },
  });
});

test("V3 V3 Get Connector Config", async () => {
  const testHttpClient = createTestHTTPClient("v3GetConnectorConfig");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getConnectorConfig({
    connectorID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3GetConnectorConfigResponse).toBeDefined();
  expect(result.v3GetConnectorConfigResponse).toEqual({
    data: {
      apiKey: "<value>",
      clientID: "<id>",
      endpoint: "<value>",
      name: "<value>",
      pageSize: 25,
      pollingPeriod: "2m",
    },
  });
});

test("V3 V3 Get Connector Schedule", async () => {
  const testHttpClient = createTestHTTPClient("v3GetConnectorSchedule");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getConnectorSchedule({
    connectorID: "<id>",
    scheduleID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3ConnectorScheduleResponse).toBeDefined();
  expect(result.v3ConnectorScheduleResponse).toEqual({
    data: {
      connectorID: "<value>",
      createdAt: new Date("2023-12-11T20:45:37.151Z"),
      id: "<id>",
    },
  });
});

test("V3 V3 Get Payment", async () => {
  const testHttpClient = createTestHTTPClient("v3GetPayment");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getPayment({
    paymentID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3GetPaymentResponse).toBeDefined();
  expect(result.v3GetPaymentResponse).toEqual({
    data: {
      amount: BigInt("445486"),
      asset: "<value>",
      connectorID: "<value>",
      createdAt: new Date("2025-01-05T13:03:22.264Z"),
      id: "<id>",
      initialAmount: BigInt("485409"),
      provider: "<value>",
      reference: "<value>",
      scheme: "<value>",
      status: V3PaymentStatusEnum.Dispute,
      type: V3PaymentTypeEnum.Payout,
    },
  });
});

test("V3 V3 Get Payment Initiation", async () => {
  const testHttpClient = createTestHTTPClient("v3GetPaymentInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getPaymentInitiation({
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3GetPaymentInitiationResponse).toBeDefined();
  expect(result.v3GetPaymentInitiationResponse).toEqual({
    data: {
      amount: BigInt("42625"),
      asset: "<value>",
      connectorID: "<value>",
      createdAt: new Date("2025-07-18T19:40:16.233Z"),
      description: "off of between vacantly though instead gazebo",
      id: "<id>",
      reference: "<value>",
      scheduledAt: new Date("2025-04-28T02:58:21.926Z"),
      status: V3PaymentInitiationStatusEnum.ReverseFailed,
      type: V3PaymentInitiationTypeEnum.Transfer,
    },
  });
});

test("V3 V3 Get Pool", async () => {
  const testHttpClient = createTestHTTPClient("v3GetPool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getPool({
    poolID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3GetPoolResponse).toBeDefined();
  expect(result.v3GetPoolResponse).toEqual({
    data: {
      createdAt: new Date("2024-04-23T06:52:21.825Z"),
      id: "<id>",
      name: "<value>",
      poolAccounts: [
        "<value>",
      ],
    },
  });
});

test("V3 V3 Get Pool Balances", async () => {
  const testHttpClient = createTestHTTPClient("v3GetPoolBalances");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getPoolBalances({
    poolID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3PoolBalancesResponse).toBeDefined();
  expect(result.v3PoolBalancesResponse).toEqual({
    data: [
      {
        amount: BigInt("857230"),
        asset: "<value>",
      },
    ],
  });
});

test("V3 V3 Get Task", async () => {
  const testHttpClient = createTestHTTPClient("v3GetTask");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.getTask({
    taskID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3GetTaskResponse).toBeDefined();
  expect(result.v3GetTaskResponse).toEqual({
    data: {
      createdAt: new Date("2025-04-18T04:31:16.226Z"),
      id: "<id>",
      status: V3TaskStatusEnum.Failed,
      updatedAt: new Date("2023-03-17T17:53:01.920Z"),
    },
  });
});

test("V3 V3 Initiate Payment", async () => {
  const testHttpClient = createTestHTTPClient("v3InitiatePayment");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.initiatePayment({});
  expect(result.statusCode).toBe(202);
  expect(result.v3InitiatePaymentResponse).toBeDefined();
  expect(result.v3InitiatePaymentResponse).toEqual({
    data: {},
  });
});

test("V3 V3 Install Connector", async () => {
  const testHttpClient = createTestHTTPClient("v3InstallConnector");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.installConnector({
    connector: "<value>",
  });
  expect(result.statusCode).toBe(202);
  expect(result.v3InstallConnectorResponse).toBeDefined();
  expect(result.v3InstallConnectorResponse).toEqual({
    data: "<value>",
  });
});

test("V3 V3 List Accounts", async () => {
  const testHttpClient = createTestHTTPClient("v3ListAccounts");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listAccounts({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3AccountsCursorResponse).toBeDefined();
  expect(result.v3AccountsCursorResponse).toEqual({
    cursor: {
      data: [],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Bank Accounts", async () => {
  const testHttpClient = createTestHTTPClient("v3ListBankAccounts");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listBankAccounts({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3BankAccountsCursorResponse).toBeDefined();
  expect(result.v3BankAccountsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          createdAt: new Date("2023-04-07T16:35:38.005Z"),
          id: "<id>",
          name: "<value>",
        },
        {
          createdAt: new Date("2024-07-11T05:58:56.792Z"),
          id: "<id>",
          name: "<value>",
        },
        {
          createdAt: new Date("2025-10-15T15:52:02.711Z"),
          id: "<id>",
          name: "<value>",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Connector Configs", async () => {
  const testHttpClient = createTestHTTPClient("v3ListConnectorConfigs");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listConnectorConfigs();
  expect(result.statusCode).toBe(200);
  expect(result.v3ConnectorConfigsResponse).toBeDefined();
  expect(result.v3ConnectorConfigsResponse).toEqual({
    data: {
      connector: {
        key: {
          dataType: "set",
          required: false,
        },
      },
    },
  });
});

test("V3 V3 List Connector Schedule Instances", async () => {
  const testHttpClient = createTestHTTPClient(
    "v3ListConnectorScheduleInstances",
  );

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listConnectorScheduleInstances({
    connectorID: "<id>",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
    scheduleID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3ConnectorScheduleInstancesCursorResponse).toBeDefined();
  expect(result.v3ConnectorScheduleInstancesCursorResponse).toEqual({
    cursor: {
      data: [
        {
          connectorID: "<value>",
          createdAt: new Date("2024-02-15T21:59:37.501Z"),
          id: "<id>",
          scheduleID: "<id>",
          terminated: false,
        },
        {
          connectorID: "<value>",
          createdAt: new Date("2023-09-07T21:29:03.593Z"),
          id: "<id>",
          scheduleID: "<id>",
          terminated: true,
        },
        {
          connectorID: "<value>",
          createdAt: new Date("2023-02-18T04:47:10.180Z"),
          id: "<id>",
          scheduleID: "<id>",
          terminated: false,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Connector Schedules", async () => {
  const testHttpClient = createTestHTTPClient("v3ListConnectorSchedules");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listConnectorSchedules({
    connectorID: "<id>",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3ConnectorSchedulesCursorResponse).toBeDefined();
  expect(result.v3ConnectorSchedulesCursorResponse).toEqual({
    cursor: {
      data: [
        {
          connectorID: "<value>",
          createdAt: new Date("2023-12-07T01:38:17.309Z"),
          id: "<id>",
        },
        {
          connectorID: "<value>",
          createdAt: new Date("2023-11-04T20:51:22.049Z"),
          id: "<id>",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Connectors", async () => {
  const testHttpClient = createTestHTTPClient("v3ListConnectors");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listConnectors({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3ConnectorsCursorResponse).toBeDefined();
  expect(result.v3ConnectorsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          config: {},
          createdAt: new Date("2025-09-02T22:23:44.264Z"),
          id: "<id>",
          name: "<value>",
          provider: "<value>",
          reference: "<value>",
          scheduledForDeletion: false,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Payment Initiation Adjustments", async () => {
  const testHttpClient = createTestHTTPClient(
    "v3ListPaymentInitiationAdjustments",
  );

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listPaymentInitiationAdjustments({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3PaymentInitiationAdjustmentsCursorResponse).toBeDefined();
  expect(result.v3PaymentInitiationAdjustmentsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          createdAt: new Date("2023-08-26T07:31:32.403Z"),
          id: "<id>",
          status: V3PaymentInitiationStatusEnum.Processing,
        },
        {
          createdAt: new Date("2025-06-06T23:22:17.845Z"),
          id: "<id>",
          status: V3PaymentInitiationStatusEnum.Failed,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Payment Initiation Related Payments", async () => {
  const testHttpClient = createTestHTTPClient(
    "v3ListPaymentInitiationRelatedPayments",
  );

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listPaymentInitiationRelatedPayments({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3PaymentInitiationRelatedPaymentsCursorResponse).toBeDefined();
  expect(result.v3PaymentInitiationRelatedPaymentsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          amount: BigInt("576099"),
          asset: "<value>",
          connectorID: "<value>",
          createdAt: new Date("2024-11-01T18:01:53.016Z"),
          id: "<id>",
          initialAmount: BigInt("927729"),
          provider: "<value>",
          reference: "<value>",
          scheme: "<value>",
          status: V3PaymentStatusEnum.CaptureFailed,
          type: V3PaymentTypeEnum.Payout,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Payment Initiations", async () => {
  const testHttpClient = createTestHTTPClient("v3ListPaymentInitiations");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listPaymentInitiations({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3PaymentInitiationsCursorResponse).toBeDefined();
  expect(result.v3PaymentInitiationsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          amount: BigInt("203475"),
          asset: "<value>",
          connectorID: "<value>",
          createdAt: new Date("2024-03-08T03:55:10.091Z"),
          description:
            "inside pessimistic small adrenalin reach measly boohoo eek soap amid",
          id: "<id>",
          reference: "<value>",
          scheduledAt: new Date("2025-11-27T20:49:45.578Z"),
          status: V3PaymentInitiationStatusEnum.Unknown,
          type: V3PaymentInitiationTypeEnum.Transfer,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Payments", async () => {
  const testHttpClient = createTestHTTPClient("v3ListPayments");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listPayments({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3PaymentsCursorResponse).toBeDefined();
  expect(result.v3PaymentsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          amount: BigInt("229776"),
          asset: "<value>",
          connectorID: "<value>",
          createdAt: new Date("2025-01-18T18:30:54.062Z"),
          id: "<id>",
          initialAmount: BigInt("182258"),
          provider: "<value>",
          reference: "<value>",
          scheme: "<value>",
          status: V3PaymentStatusEnum.Succeeded,
          type: V3PaymentTypeEnum.PayIn,
        },
        {
          amount: BigInt("284985"),
          asset: "<value>",
          connectorID: "<value>",
          createdAt: new Date("2024-11-11T08:40:21.314Z"),
          id: "<id>",
          initialAmount: BigInt("529755"),
          provider: "<value>",
          reference: "<value>",
          scheme: "<value>",
          status: V3PaymentStatusEnum.Refunded,
          type: V3PaymentTypeEnum.Other,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 List Pools", async () => {
  const testHttpClient = createTestHTTPClient("v3ListPools");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.listPools({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v3PoolsCursorResponse).toBeDefined();
  expect(result.v3PoolsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          createdAt: new Date("2025-02-08T15:23:10.325Z"),
          id: "<id>",
          name: "<value>",
          poolAccounts: [],
        },
        {
          createdAt: new Date("2024-04-12T20:16:24.210Z"),
          id: "<id>",
          name: "<value>",
          poolAccounts: [
            "<value>",
          ],
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("V3 V3 Reject Payment Initiation", async () => {
  const testHttpClient = createTestHTTPClient("v3RejectPaymentInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.rejectPaymentInitiation({
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V3 V3 Remove Account From Pool", async () => {
  const testHttpClient = createTestHTTPClient("v3RemoveAccountFromPool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.removeAccountFromPool({
    accountID: "<id>",
    poolID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V3 V3 Reset Connector", async () => {
  const testHttpClient = createTestHTTPClient("v3ResetConnector");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.resetConnector({
    connectorID: "<id>",
  });
  expect(result.statusCode).toBe(202);
  expect(result.v3ResetConnectorResponse).toBeDefined();
  expect(result.v3ResetConnectorResponse).toEqual({
    data: "<value>",
  });
});

test("V3 V3 Retry Payment Initiation", async () => {
  const testHttpClient = createTestHTTPClient("v3RetryPaymentInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.retryPaymentInitiation({
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(202);
  expect(result.v3RetryPaymentInitiationResponse).toBeDefined();
  expect(result.v3RetryPaymentInitiationResponse).toEqual({
    data: {
      taskID: "<id>",
    },
  });
});

test("V3 V3 Reverse Payment Initiation", async () => {
  const testHttpClient = createTestHTTPClient("v3ReversePaymentInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.reversePaymentInitiation({
    paymentInitiationID: "<id>",
  });
  expect(result.statusCode).toBe(202);
  expect(result.v3ReversePaymentInitiationResponse).toBeDefined();
  expect(result.v3ReversePaymentInitiationResponse).toEqual({
    data: {},
  });
});

test("V3 V3 Uninstall Connector", async () => {
  const testHttpClient = createTestHTTPClient("v3UninstallConnector");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.uninstallConnector({
    connectorID: "<id>",
  });
  expect(result.statusCode).toBe(202);
  expect(result.v3UninstallConnectorResponse).toBeDefined();
  expect(result.v3UninstallConnectorResponse).toEqual({
    data: {
      taskID: "<id>",
    },
  });
});

test("V3 V3 Update Bank Account Metadata", async () => {
  const testHttpClient = createTestHTTPClient("v3UpdateBankAccountMetadata");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.updateBankAccountMetadata({
    bankAccountID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V3 V3 Update Payment Metadata", async () => {
  const testHttpClient = createTestHTTPClient("v3UpdatePaymentMetadata");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v3.updatePaymentMetadata({
    paymentID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});
