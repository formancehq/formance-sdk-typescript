/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Sdk Reconciliation V1 Create Policy", async () => {
  const testHttpClient = createTestHTTPClient("createPolicy");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.createPolicy({
    ledgerName: "default",
    ledgerQuery: {
      "key": "<value>",
    },
    name: "XXX",
    paymentsPoolID: "XXX",
  });
  expect(result.statusCode).toBe(201);
  expect(result.policyResponse).toBeDefined();
  expect(result.policyResponse).toEqual({
    data: {
      createdAt: new Date("2021-01-01T00:00:00.000Z"),
      id: "XXX",
      ledgerName: "default",
      ledgerQuery: {
        "key": "<value>",
      },
      name: "XXX",
      paymentsPoolID: "XXX",
    },
  });
});

test("Sdk Reconciliation V1 Delete Policy", async () => {
  const testHttpClient = createTestHTTPClient("deletePolicy");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.deletePolicy({
    policyID: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Reconciliation V1 Get Policy", async () => {
  const testHttpClient = createTestHTTPClient("getPolicy");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.getPolicy({
    policyID: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.policyResponse).toBeDefined();
  expect(result.policyResponse).toEqual({
    data: {
      createdAt: new Date("2021-01-01T00:00:00.000Z"),
      id: "XXX",
      ledgerName: "default",
      ledgerQuery: {},
      name: "XXX",
      paymentsPoolID: "XXX",
    },
  });
});

test("Sdk Reconciliation V1 Get Reconciliation", async () => {
  const testHttpClient = createTestHTTPClient("getReconciliation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.getReconciliation({
    reconciliationID: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.reconciliationResponse).toBeDefined();
  expect(result.reconciliationResponse).toEqual({
    data: {
      createdAt: new Date("2021-01-01T00:00:00.000Z"),
      driftBalances: {
        "key": BigInt("20102"),
      },
      id: "XXX",
      ledgerBalances: {
        "key": BigInt("644430"),
      },
      paymentsBalances: {
        "key": BigInt("515705"),
        "key1": BigInt("559208"),
        "key2": BigInt("533533"),
      },
      policyID: "XXX",
      reconciledAtLedger: new Date("2021-01-01T00:00:00.000Z"),
      reconciledAtPayments: new Date("2021-01-01T00:00:00.000Z"),
      status: "COMPLETED",
    },
  });
});

test("Sdk Reconciliation V1 List Policies", async () => {
  const testHttpClient = createTestHTTPClient("listPolicies");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.listPolicies({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.policiesCursorResponse).toBeDefined();
  expect(result.policiesCursorResponse).toEqual({
    cursor: {
      data: [
        {
          createdAt: new Date("2021-01-01T00:00:00.000Z"),
          id: "XXX",
          ledgerName: "default",
          ledgerQuery: {
            "key": "<value>",
            "key1": "<value>",
            "key2": "<value>",
          },
          name: "XXX",
          paymentsPoolID: "XXX",
        },
        {
          createdAt: new Date("2021-01-01T00:00:00.000Z"),
          id: "XXX",
          ledgerName: "default",
          ledgerQuery: {
            "key": "<value>",
            "key1": "<value>",
          },
          name: "XXX",
          paymentsPoolID: "XXX",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Reconciliation V1 List Reconciliations", async () => {
  const testHttpClient = createTestHTTPClient("listReconciliations");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.listReconciliations({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.reconciliationsCursorResponse).toBeDefined();
  expect(result.reconciliationsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          createdAt: new Date("2021-01-01T00:00:00.000Z"),
          driftBalances: {
            "key": BigInt("241236"),
          },
          id: "XXX",
          ledgerBalances: {
            "key": BigInt("129090"),
          },
          paymentsBalances: {},
          policyID: "XXX",
          reconciledAtLedger: new Date("2021-01-01T00:00:00.000Z"),
          reconciledAtPayments: new Date("2021-01-01T00:00:00.000Z"),
          status: "COMPLETED",
        },
        {
          createdAt: new Date("2021-01-01T00:00:00.000Z"),
          driftBalances: {
            "key": BigInt("348338"),
            "key1": BigInt("435529"),
          },
          id: "XXX",
          ledgerBalances: {
            "key": BigInt("522670"),
            "key1": BigInt("92384"),
          },
          paymentsBalances: {
            "key": BigInt("973678"),
          },
          policyID: "XXX",
          reconciledAtLedger: new Date("2021-01-01T00:00:00.000Z"),
          reconciledAtPayments: new Date("2021-01-01T00:00:00.000Z"),
          status: "COMPLETED",
        },
        {
          createdAt: new Date("2021-01-01T00:00:00.000Z"),
          driftBalances: {
            "key": BigInt("428459"),
            "key1": BigInt("727"),
            "key2": BigInt("640782"),
          },
          id: "XXX",
          ledgerBalances: {},
          paymentsBalances: {
            "key": BigInt("119837"),
          },
          policyID: "XXX",
          reconciledAtLedger: new Date("2021-01-01T00:00:00.000Z"),
          reconciledAtPayments: new Date("2021-01-01T00:00:00.000Z"),
          status: "COMPLETED",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Reconciliation V1 Reconcile", async () => {
  const testHttpClient = createTestHTTPClient("reconcile");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.reconcile({
    reconciliationRequest: {
      reconciledAtLedger: new Date("2021-01-01T00:00:00.000Z"),
      reconciledAtPayments: new Date("2021-01-01T00:00:00.000Z"),
    },
    policyID: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.reconciliationResponse).toBeDefined();
  expect(result.reconciliationResponse).toEqual({
    data: {
      createdAt: new Date("2021-01-01T00:00:00.000Z"),
      driftBalances: {
        "key": BigInt("971386"),
      },
      id: "XXX",
      ledgerBalances: {
        "key": BigInt("1060"),
        "key1": BigInt("30487"),
        "key2": BigInt("427345"),
      },
      paymentsBalances: {
        "key": BigInt("17991"),
        "key1": BigInt("837229"),
      },
      policyID: "XXX",
      reconciledAtLedger: new Date("2021-01-01T00:00:00.000Z"),
      reconciledAtPayments: new Date("2021-01-01T00:00:00.000Z"),
      status: "COMPLETED",
    },
  });
});

test("Sdk Reconciliation V1 Reconciliationget Server Info", async () => {
  const testHttpClient = createTestHTTPClient("reconciliationgetServerInfo");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.reconciliation.v1.reconciliationgetServerInfo();
  expect(result.statusCode).toBe(200);
  expect(result.serverInfo).toBeDefined();
  expect(result.serverInfo).toEqual({
    version: "<value>",
  });
});
