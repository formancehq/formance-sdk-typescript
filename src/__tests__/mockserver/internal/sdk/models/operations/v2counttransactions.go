// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type V2CountTransactionsRequest struct {
	// Name of the ledger.
	Ledger string         `pathParam:"style=simple,explode=false,name=ledger"`
	Pit    *time.Time     `queryParam:"style=form,explode=true,name=pit"`
	Query  map[string]any `queryParam:"serialization=json,name=query"`
}

func (v V2CountTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V2CountTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V2CountTransactionsRequest) GetLedger() string {
	if o == nil {
		return ""
	}
	return o.Ledger
}

func (o *V2CountTransactionsRequest) GetPit() *time.Time {
	if o == nil {
		return nil
	}
	return o.Pit
}

func (o *V2CountTransactionsRequest) GetQuery() map[string]any {
	if o == nil {
		return nil
	}
	return o.Query
}

type V2CountTransactionsResponse struct {
	Headers  map[string][]string
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *V2CountTransactionsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *V2CountTransactionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
