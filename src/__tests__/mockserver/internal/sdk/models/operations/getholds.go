// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetHoldsRequest struct {
	// Parameter used in pagination requests.
	// Set to the value of next for the next page of results.
	// Set to the value of previous for the previous page of results.
	// No other parameters can be set when the pagination token is set.
	//
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Filter holds by metadata key value pairs. Nested objects can be used as seen in the example below.
	Metadata map[string]string `queryParam:"style=deepObject,explode=true,name=metadata"`
	// The maximum number of results to return per page
	PageSize *int64 `default:"15" queryParam:"style=form,explode=true,name=pageSize"`
	// The wallet to filter on
	WalletID *string `queryParam:"style=form,explode=true,name=walletID"`
}

func (g GetHoldsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetHoldsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetHoldsRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *GetHoldsRequest) GetMetadata() map[string]string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetHoldsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *GetHoldsRequest) GetWalletID() *string {
	if o == nil {
		return nil
	}
	return o.WalletID
}

type GetHoldsResponse struct {
	// Holds
	GetHoldsResponse *components.GetHoldsResponse
	HTTPMeta         components.HTTPMetadata `json:"-"`
}

func (o *GetHoldsResponse) GetGetHoldsResponse() *components.GetHoldsResponse {
	if o == nil {
		return nil
	}
	return o.GetHoldsResponse
}

func (o *GetHoldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
