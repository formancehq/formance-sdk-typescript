// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAPIWebhooksConfigsIDTest(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "testConfig[0]":
			dir.HandlerFunc("testConfig", testTestConfigTestConfig0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testTestConfigTestConfig0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.AttemptResponse{
		Data: components.Attempt{
			Config: components.WebhooksConfig{
				Active:    true,
				CreatedAt: types.MustTimeFromString("2024-05-29T09:53:58.891Z"),
				Endpoint:  "https://example.com",
				EventTypes: []string{
					"TYPE1",
				},
				ID:        "86054b6d-7f7e-4fb8-8f2f-b6a855cea0c7",
				Secret:    "V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3",
				UpdatedAt: types.MustTimeFromString("2023-04-25T07:02:46.380Z"),
			},
			CreatedAt:    types.MustTimeFromString("2025-06-16T21:37:32.643Z"),
			ID:           "c7827ed3-469f-4c48-a7d1-c853b7f1271e",
			Payload:      "{\"data\":\"test\"}",
			RetryAttempt: 1,
			Status:       "success",
			StatusCode:   200,
			UpdatedAt:    types.MustTimeFromString("2024-10-18T10:47:20.940Z"),
			WebhookID:    "05f47970-be91-4384-9266-38e01d5768d6",
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
