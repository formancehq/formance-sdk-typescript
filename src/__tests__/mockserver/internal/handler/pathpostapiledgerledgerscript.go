// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"math/big"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostAPILedgerLedgerScript(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "runScript[0]":
			dir.HandlerFunc("runScript", testRunScriptRunScript0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testRunScriptRunScript0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.ScriptResponse{
		Details:      types.String("https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9"),
		ErrorCode:    components.ErrorsEnumInsufficientFund.ToPointer(),
		ErrorMessage: types.String("account had insufficient funds"),
		Transaction: &components.Transaction{
			PostCommitVolumes: map[string]map[string]components.Volume{
				"orders:1": map[string]components.Volume{
					"USD": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
					"EUR": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
				},
				"orders:2": map[string]components.Volume{
					"USD": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
					"EUR": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
				},
			},
			Postings: []components.Posting{},
			PreCommitVolumes: map[string]map[string]components.Volume{
				"orders:1": map[string]components.Volume{
					"USD": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
					"EUR": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
				},
				"orders:2": map[string]components.Volume{
					"USD": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
					"EUR": components.Volume{
						Balance: big.NewInt(80),
						Input:   big.NewInt(100),
						Output:  big.NewInt(20),
					},
				},
			},
			Reference: types.String("ref:001"),
			Timestamp: types.MustTimeFromString("2024-11-04T15:22:00.380Z"),
			Txid:      big.NewInt(737293),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
