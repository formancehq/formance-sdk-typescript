// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"math/big"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAPIOrchestrationV2InstancesInstanceIDStagesNumberHistory(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "v2GetInstanceStageHistory[0]":
			dir.HandlerFunc("v2GetInstanceStageHistory", testV2GetInstanceStageHistoryV2GetInstanceStageHistory0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testV2GetInstanceStageHistoryV2GetInstanceStageHistory0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.V2GetWorkflowInstanceHistoryStageResponse{
		Data: []components.V2WorkflowInstanceHistoryStage{
			components.V2WorkflowInstanceHistoryStage{
				Attempt: 814164,
				Input: components.V2WorkflowInstanceHistoryStageInput{
					CreateTransaction: &components.V2ActivityCreateTransaction{
						Data: &components.OrchestrationV2PostTransaction{
							Metadata: map[string]string{
								"admin": "true",
							},
							Postings: []components.V2Posting{
								components.V2Posting{
									Amount:      big.NewInt(100),
									Asset:       "COIN",
									Destination: "users:002",
									Source:      "users:001",
								},
								components.V2Posting{
									Amount:      big.NewInt(100),
									Asset:       "COIN",
									Destination: "users:002",
									Source:      "users:001",
								},
								components.V2Posting{
									Amount:      big.NewInt(100),
									Asset:       "COIN",
									Destination: "users:002",
									Source:      "users:001",
								},
							},
							Reference: types.String("ref:001"),
							Script: &components.OrchestrationV2PostTransactionScript{
								Plain: "vars {\n" +
									"account $user\n" +
									"}\n" +
									"send [COIN 10] (\n" +
									"	source = @world\n" +
									"	destination = $user\n" +
									")\n" +
									"",
								Vars: map[string]any{
									"user": "users:042",
								},
							},
						},
					},
					CreditWallet: &components.V2ActivityCreditWallet{
						Data: &components.V2CreditWalletRequest{
							Amount: components.V2Monetary{
								Amount: big.NewInt(100),
								Asset:  "USD/2",
							},
							Metadata: map[string]string{
								"key": "",
							},
							Sources: []components.V2Subject{},
						},
					},
					DebitWallet: &components.V2ActivityDebitWallet{
						Data: &components.V2DebitWalletRequest{
							Amount: components.V2Monetary{
								Amount: big.NewInt(100),
								Asset:  "USD/2",
							},
							Metadata: map[string]string{
								"key": "",
							},
							Pending: types.Bool(true),
						},
					},
					StripeTransfer: &components.V2ActivityStripeTransfer{
						Amount:            big.NewInt(100),
						Asset:             types.String("USD"),
						Destination:       types.String("acct_1Gqj58KZcSIg2N2q"),
						WaitingValidation: types.Bool(false),
					},
				},
				Name: "<value>",
				Output: &components.V2WorkflowInstanceHistoryStageOutput{
					CreateTransaction: &components.V2ActivityCreateTransactionOutput{
						Data: []components.OrchestrationV2Transaction{
							components.OrchestrationV2Transaction{
								Metadata: map[string]string{
									"admin": "true",
								},
								Postings: []components.V2Posting{
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
								},
								Reference: types.String("ref:001"),
								Timestamp: types.MustTimeFromString("2024-02-25T08:16:25.611Z"),
								Txid:      big.NewInt(193963),
							},
							components.OrchestrationV2Transaction{
								Metadata: map[string]string{
									"admin": "true",
								},
								Postings: []components.V2Posting{
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
								},
								Reference: types.String("ref:001"),
								Timestamp: types.MustTimeFromString("2024-09-11T04:49:03.408Z"),
								Txid:      big.NewInt(512399),
							},
							components.OrchestrationV2Transaction{
								Metadata: map[string]string{
									"admin": "true",
								},
								Postings: []components.V2Posting{
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
									components.V2Posting{
										Amount:      big.NewInt(100),
										Asset:       "COIN",
										Destination: "users:002",
										Source:      "users:001",
									},
								},
								Reference: types.String("ref:001"),
								Timestamp: types.MustTimeFromString("2025-12-08T02:58:44.541Z"),
								Txid:      big.NewInt(505948),
							},
						},
					},
					GetAccount: &components.V2ActivityGetAccountOutput{
						Data: components.V2Account{
							Address: "users:001",
							EffectiveVolumes: map[string]components.V2Volume{
								"USD": components.V2Volume{
									Balance: big.NewInt(90),
									Input:   big.NewInt(100),
									Output:  big.NewInt(10),
								},
								"EUR": components.V2Volume{
									Balance: big.NewInt(90),
									Input:   big.NewInt(100),
									Output:  big.NewInt(10),
								},
							},
							Metadata: map[string]string{
								"admin": "true",
							},
							Volumes: map[string]components.V2Volume{
								"USD": components.V2Volume{
									Balance: big.NewInt(90),
									Input:   big.NewInt(100),
									Output:  big.NewInt(10),
								},
								"EUR": components.V2Volume{
									Balance: big.NewInt(90),
									Input:   big.NewInt(100),
									Output:  big.NewInt(10),
								},
							},
						},
					},
					GetPayment: &components.V2ActivityGetPaymentOutput{
						Data: components.V2Payment{
							Adjustments: []components.V2PaymentAdjustment{
								components.V2PaymentAdjustment{
									Absolute: false,
									Amount:   big.NewInt(100),
									Date:     types.MustTimeFromString("2024-07-15T14:04:10.735Z"),
									Raw:      components.V2PaymentAdjustmentRaw{},
									Status:   components.V2PaymentStatusFailed,
								},
								components.V2PaymentAdjustment{
									Absolute: false,
									Amount:   big.NewInt(100),
									Date:     types.MustTimeFromString("2024-04-09T23:19:06.573Z"),
									Raw:      components.V2PaymentAdjustmentRaw{},
									Status:   components.V2PaymentStatusFailed,
								},
							},
							Asset:                "USD",
							ConnectorID:          "<id>",
							CreatedAt:            types.MustTimeFromString("2023-05-09T19:53:15.550Z"),
							DestinationAccountID: "<id>",
							ID:                   "XXX",
							InitialAmount:        big.NewInt(100),
							Metadata:             &components.V2PaymentMetadata{},
							Raw:                  &components.V2PaymentRaw{},
							Reference:            "<value>",
							Scheme:               components.SchemeAmex,
							SourceAccountID:      "<id>",
							Status:               components.V2PaymentStatusCancelled,
							Type:                 components.V2PaymentTypePayIn,
						},
					},
					ListWallets: &components.V2ListWalletsResponse{
						Cursor: components.V2ListWalletsResponseCursor{
							Data: []components.V2Wallet{
								components.V2Wallet{
									CreatedAt: types.MustTimeFromString("2025-11-27T02:08:52.827Z"),
									ID:        "5d3894ae-ce7c-44b7-9c48-3e4cba69dcb9",
									Ledger:    "<value>",
									Metadata:  map[string]string{},
									Name:      "<value>",
								},
								components.V2Wallet{
									CreatedAt: types.MustTimeFromString("2025-05-20T17:13:48.350Z"),
									ID:        "f5d6610e-e457-43cc-b9c2-41fd8f61b492",
									Ledger:    "<value>",
									Metadata:  map[string]string{},
									Name:      "<value>",
								},
								components.V2Wallet{
									CreatedAt: types.MustTimeFromString("2023-01-18T03:26:48.477Z"),
									ID:        "26a0c2ea-29e8-484a-bef5-0fac9fda12cb",
									Ledger:    "<value>",
									Metadata: map[string]string{
										"key":  "<value>",
										"key1": "<value>",
										"key2": "<value>",
									},
									Name: "<value>",
								},
							},
							HasMore:  types.Bool(false),
							Next:     types.String(""),
							PageSize: 15,
							Previous: types.String("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol="),
						},
					},
				},
				StartedAt:  types.MustTimeFromString("2023-11-06T21:00:32.040Z"),
				Terminated: false,
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
