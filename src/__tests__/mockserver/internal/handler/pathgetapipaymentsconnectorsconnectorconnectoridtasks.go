// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAPIPaymentsConnectorsConnectorConnectorIDTasks(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listConnectorTasksV1[0]":
			dir.HandlerFunc("listConnectorTasksV1", testListConnectorTasksV1ListConnectorTasksV10)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListConnectorTasksV1ListConnectorTasksV10(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.TasksCursor{
		Cursor: components.TasksCursorCursor{
			Data: []components.TasksCursorData{
				components.CreateTasksCursorDataTaskWise(
					components.TaskWise{
						ConnectorID: "<id>",
						CreatedAt:   types.MustTimeFromString("2024-08-30T08:25:15.703Z"),
						Descriptor:  components.TaskWiseDescriptor{},
						ID:          "119bf1d7-7f0d-47a9-85f6-d1de55906fa5",
						Status:      components.TaskStatusStopped,
						UpdatedAt:   types.MustTimeFromString("2023-03-08T11:32:23.574Z"),
					},
				),
				components.CreateTasksCursorDataTaskWise(
					components.TaskWise{
						ConnectorID: "<id>",
						CreatedAt:   types.MustTimeFromString("2024-12-26T08:45:38.166Z"),
						Descriptor:  components.TaskWiseDescriptor{},
						ID:          "636e772b-1d53-4e6e-b1a0-f8d94fbd4d08",
						Status:      components.TaskStatusPending,
						UpdatedAt:   types.MustTimeFromString("2025-04-25T04:53:52.895Z"),
					},
				),
				components.CreateTasksCursorDataTaskWise(
					components.TaskWise{
						ConnectorID: "<id>",
						CreatedAt:   types.MustTimeFromString("2025-04-15T21:11:42.740Z"),
						Descriptor:  components.TaskWiseDescriptor{},
						ID:          "3d5edc7f-3fcd-42b1-a430-91094b0590aa",
						Status:      components.TaskStatusStopped,
						UpdatedAt:   types.MustTimeFromString("2023-02-23T06:58:36.788Z"),
					},
				),
			},
			HasMore:  false,
			Next:     types.String(""),
			PageSize: 15,
			Previous: types.String("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol="),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
