// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"math/big"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAPIReconciliationReconciliations(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listReconciliations[0]":
			dir.HandlerFunc("listReconciliations", testListReconciliationsListReconciliations0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListReconciliationsListReconciliations0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.ReconciliationsCursorResponse{
		Cursor: components.ReconciliationsCursorResponseCursor{
			Data: []components.Reconciliation{
				components.Reconciliation{
					CreatedAt: types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					DriftBalances: map[string]*big.Int{
						"key": big.NewInt(241236),
					},
					ID: "XXX",
					LedgerBalances: map[string]*big.Int{
						"key": big.NewInt(129090),
					},
					PaymentsBalances:     map[string]*big.Int{},
					PolicyID:             "XXX",
					ReconciledAtLedger:   types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					ReconciledAtPayments: types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					Status:               "COMPLETED",
				},
				components.Reconciliation{
					CreatedAt: types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					DriftBalances: map[string]*big.Int{
						"key":  big.NewInt(348338),
						"key1": big.NewInt(435529),
					},
					ID: "XXX",
					LedgerBalances: map[string]*big.Int{
						"key":  big.NewInt(522670),
						"key1": big.NewInt(92384),
					},
					PaymentsBalances: map[string]*big.Int{
						"key": big.NewInt(973678),
					},
					PolicyID:             "XXX",
					ReconciledAtLedger:   types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					ReconciledAtPayments: types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					Status:               "COMPLETED",
				},
				components.Reconciliation{
					CreatedAt: types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					DriftBalances: map[string]*big.Int{
						"key":  big.NewInt(428459),
						"key1": big.NewInt(727),
						"key2": big.NewInt(640782),
					},
					ID:             "XXX",
					LedgerBalances: map[string]*big.Int{},
					PaymentsBalances: map[string]*big.Int{
						"key": big.NewInt(119837),
					},
					PolicyID:             "XXX",
					ReconciledAtLedger:   types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					ReconciledAtPayments: types.MustTimeFromString("2021-01-01T00:00:00.000Z"),
					Status:               "COMPLETED",
				},
			},
			HasMore:  false,
			Next:     types.String(""),
			PageSize: 15,
			Previous: types.String("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol="),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
