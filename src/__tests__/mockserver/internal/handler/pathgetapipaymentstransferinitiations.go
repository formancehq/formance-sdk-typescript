// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"math/big"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAPIPaymentsTransferInitiations(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listTransferInitiations[0]":
			dir.HandlerFunc("listTransferInitiations", testListTransferInitiationsListTransferInitiations0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListTransferInitiationsListTransferInitiations0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.TransferInitiationsCursor{
		Cursor: components.TransferInitiationsCursorCursor{
			Data: []components.TransferInitiation{
				components.TransferInitiation{
					Amount:               big.NewInt(27378),
					Asset:                "USD",
					ConnectorID:          "<id>",
					CreatedAt:            types.MustTimeFromString("2024-04-12T17:55:51.446Z"),
					Description:          "shovel aw scrutinise delicious a machine provided thongs eek pfft",
					DestinationAccountID: "<id>",
					Error:                "<value>",
					ID:                   "XXX",
					InitialAmount:        big.NewInt(955636),
					Reference:            "<value>",
					ScheduledAt:          types.MustTimeFromString("2025-12-22T21:51:13.393Z"),
					SourceAccountID:      "<id>",
					Status:               components.TransferInitiationStatusAskReversed,
					Type:                 components.TransferInitiationTypeTransfer,
				},
				components.TransferInitiation{
					Amount:               big.NewInt(99452),
					Asset:                "USD",
					ConnectorID:          "<id>",
					CreatedAt:            types.MustTimeFromString("2024-05-14T08:21:14.101Z"),
					Description:          "vice programme downchange lucky",
					DestinationAccountID: "<id>",
					Error:                "<value>",
					ID:                   "XXX",
					InitialAmount:        big.NewInt(418039),
					Reference:            "<value>",
					ScheduledAt:          types.MustTimeFromString("2024-05-12T21:20:56.584Z"),
					SourceAccountID:      "<id>",
					Status:               components.TransferInitiationStatusProcessed,
					Type:                 components.TransferInitiationTypeTransfer,
				},
			},
			HasMore:  false,
			Next:     types.String(""),
			PageSize: 15,
			Previous: types.String("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol="),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
