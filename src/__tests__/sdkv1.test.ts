/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { SDK } from "../index.js";
import { ErrorsEnum, Type } from "../sdk/models/shared/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Sdk V1 Create Transactions", async () => {
  const testHttpClient = createTestHTTPClient("CreateTransactions");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.createTransactions({
    transactions: {
      transactions: [
        {
          postings: [
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
          ],
          reference: "ref:001",
        },
      ],
    },
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.transactionsResponse).toBeDefined();
  expect(result.transactionsResponse).toEqual({
    data: [
      {
        postCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        postings: [
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
        ],
        preCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        reference: "ref:001",
        timestamp: new Date("2024-03-05T12:58:17.302Z"),
        txid: BigInt("969224"),
      },
      {
        postCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        postings: [],
        preCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        reference: "ref:001",
        timestamp: new Date("2023-01-13T12:20:33.284Z"),
        txid: BigInt("808159"),
      },
      {
        postCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        postings: [
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
        ],
        preCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        reference: "ref:001",
        timestamp: new Date("2025-12-27T01:08:16.828Z"),
        txid: BigInt("117566"),
      },
    ],
  });
});

test("Sdk V1 Add Metadata On Transaction", async () => {
  const testHttpClient = createTestHTTPClient("addMetadataOnTransaction");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.addMetadataOnTransaction({
    ledger: "ledger001",
    txid: BigInt("1234"),
  });
  expect(result.statusCode).toBe(204);
});

it.skip("Sdk V1 Add Metadata To Account", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step addMetadataToAccount.test referencing operation addMetadataToAccount is missing required request body`]",
  );
});

test("Sdk V1 Count Accounts", async () => {
  const testHttpClient = createTestHTTPClient("countAccounts");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.countAccounts({
    address: "users:.+",
    ledger: "ledger001",
    metadata: {
      "0": "m",
      "1": "e",
      "2": "t",
      "3": "a",
      "4": "d",
      "5": "a",
      "6": "t",
      "7": "a",
      "8": "[",
      "9": "k",
      "10": "e",
      "11": "y",
      "12": "]",
      "13": "=",
      "14": "v",
      "15": "a",
      "16": "l",
      "17": "u",
      "18": "e",
      "19": "1",
      "20": "&",
      "21": "m",
      "22": "e",
      "23": "t",
      "24": "a",
      "25": "d",
      "26": "a",
      "27": "t",
      "28": "a",
      "29": "[",
      "30": "a",
      "31": ".",
      "32": "n",
      "33": "e",
      "34": "s",
      "35": "t",
      "36": "e",
      "37": "d",
      "38": ".",
      "39": "k",
      "40": "e",
      "41": "y",
      "42": "]",
      "43": "=",
      "44": "v",
      "45": "a",
      "46": "l",
      "47": "u",
      "48": "e",
      "49": "2",
    },
  });
  expect(result.statusCode).toBe(200);
});

test("Sdk V1 Count Transactions", async () => {
  const testHttpClient = createTestHTTPClient("countTransactions");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.countTransactions({
    account: "users:001",
    destination: "users:001",
    ledger: "ledger001",
    metadata: {},
    reference: "ref:001",
    source: "users:001",
  });
  expect(result.statusCode).toBe(200);
});

test("Sdk V1 Create Transaction", async () => {
  const testHttpClient = createTestHTTPClient("createTransaction");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.createTransaction({
    postTransaction: {
      postings: [
        {
          amount: BigInt("100"),
          asset: "COIN",
          destination: "users:002",
          source: "users:001",
        },
        {
          amount: BigInt("100"),
          asset: "COIN",
          destination: "users:002",
          source: "users:001",
        },
        {
          amount: BigInt("100"),
          asset: "COIN",
          destination: "users:002",
          source: "users:001",
        },
      ],
      reference: "ref:001",
      script: {
        plain: "vars {\n"
          + "account $user\n"
          + "}\n"
          + "send [COIN 10] (\n"
          + "	source = @world\n"
          + "	destination = $user\n"
          + ")\n"
          + "",
        vars: {
          "user": "users:042",
        },
      },
    },
    ledger: "ledger001",
    preview: true,
  });
  expect(result.statusCode).toBe(200);
  expect(result.transactionsResponse).toBeDefined();
  expect(result.transactionsResponse).toEqual({
    data: [
      {
        postCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        postings: [
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
        ],
        preCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        reference: "ref:001",
        timestamp: new Date("2025-10-22T08:35:30.999Z"),
        txid: BigInt("339139"),
      },
      {
        postCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        postings: [
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
        ],
        preCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        reference: "ref:001",
        timestamp: new Date("2023-04-14T18:14:42.519Z"),
        txid: BigInt("159068"),
      },
      {
        postCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        postings: [
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
          {
            amount: BigInt("100"),
            asset: "COIN",
            destination: "users:002",
            source: "users:001",
          },
        ],
        preCommitVolumes: {
          "orders:1": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
          "orders:2": {
            "USD": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
            "EUR": {
              balance: BigInt("80"),
              input: BigInt("100"),
              output: BigInt("20"),
            },
          },
        },
        reference: "ref:001",
        timestamp: new Date("2025-12-15T14:36:30.627Z"),
        txid: BigInt("992364"),
      },
    ],
  });
});

test("Sdk V1 Get Account", async () => {
  const testHttpClient = createTestHTTPClient("getAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.getAccount({
    address: "users:001",
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.accountResponse).toBeDefined();
  expect(result.accountResponse).toEqual({
    data: {
      address: "users:001",
      balances: {
        "COIN": BigInt("100"),
      },
      metadata: {
        "admin": true,
        "a": {
          "nested": {
            "key": "value",
          },
        },
      },
      type: "virtual",
      volumes: {
        "USD": {
          balance: BigInt("80"),
          input: BigInt("100"),
          output: BigInt("20"),
        },
        "EUR": {
          balance: BigInt("80"),
          input: BigInt("100"),
          output: BigInt("20"),
        },
      },
    },
  });
});

test("Sdk V1 Get Balances", async () => {
  const testHttpClient = createTestHTTPClient("getBalances");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.getBalances({
    address: "users:001",
    after: "users:003",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.balancesCursorResponse).toBeDefined();
  expect(result.balancesCursorResponse).toEqual({
    cursor: {
      data: [
        {
          "account1": {
            "USD": 100,
            "EUR": 23,
          },
          "account2": {
            "CAD": 20,
            "JPY": 21,
          },
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V1 Get Balances Aggregated", async () => {
  const testHttpClient = createTestHTTPClient("getBalancesAggregated");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.getBalancesAggregated({
    address: "users:001",
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.aggregateBalancesResponse).toBeDefined();
  expect(result.aggregateBalancesResponse).toEqual({
    data: {
      "USD": 100,
      "EUR": 12,
    },
  });
});

test("Sdk V1 Get Info", async () => {
  const testHttpClient = createTestHTTPClient("getInfo");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.getInfo();
  expect(result.statusCode).toBe(200);
  expect(result.configInfoResponse).toBeDefined();
  expect(result.configInfoResponse).toEqual({
    data: {
      config: {
        storage: {
          driver: "<value>",
          ledgers: [
            "<value>",
            "<value>",
          ],
        },
      },
      server: "<value>",
      version: "<value>",
    },
  });
});

test("Sdk V1 Get Ledger Info", async () => {
  const testHttpClient = createTestHTTPClient("getLedgerInfo");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.getLedgerInfo({
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.ledgerInfoResponse).toBeDefined();
  expect(result.ledgerInfoResponse).toEqual({
    data: {
      name: "ledger001",
      storage: {
        migrations: [
          {
            name: "migrations:001",
            version: "11",
          },
        ],
      },
    },
  });
});

test("Sdk V1 Get Mapping", async () => {
  const testHttpClient = createTestHTTPClient("getMapping");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.getMapping({
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.mappingResponse).toBeDefined();
  expect(result.mappingResponse).toEqual({
    data: {
      contracts: [],
    },
  });
});

test("Sdk V1 Get Transaction", async () => {
  const testHttpClient = createTestHTTPClient("getTransaction");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.getTransaction({
    ledger: "ledger001",
    txid: BigInt("1234"),
  });
  expect(result.statusCode).toBe(200);
  expect(result.transactionResponse).toBeDefined();
  expect(result.transactionResponse).toEqual({
    data: {
      postCommitVolumes: {
        "orders:1": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
        "orders:2": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
      },
      postings: [
        {
          amount: BigInt("100"),
          asset: "COIN",
          destination: "users:002",
          source: "users:001",
        },
      ],
      preCommitVolumes: {
        "orders:1": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
        "orders:2": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
      },
      reference: "ref:001",
      timestamp: new Date("2024-01-23T03:49:23.782Z"),
      txid: BigInt("921043"),
    },
  });
});

test("Sdk V1 List Accounts", async () => {
  const testHttpClient = createTestHTTPClient("listAccounts");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.listAccounts({
    address: "users:.+",
    after: "users:003",
    balance: 2400,
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    ledger: "ledger001",
    metadata: {
      "0": "m",
      "1": "e",
      "2": "t",
      "3": "a",
      "4": "d",
      "5": "a",
      "6": "t",
      "7": "a",
      "8": "[",
      "9": "k",
      "10": "e",
      "11": "y",
      "12": "]",
      "13": "=",
      "14": "v",
      "15": "a",
      "16": "l",
      "17": "u",
      "18": "e",
      "19": "1",
      "20": "&",
      "21": "m",
      "22": "e",
      "23": "t",
      "24": "a",
      "25": "d",
      "26": "a",
      "27": "t",
      "28": "a",
      "29": "[",
      "30": "a",
      "31": ".",
      "32": "n",
      "33": "e",
      "34": "s",
      "35": "t",
      "36": "e",
      "37": "d",
      "38": ".",
      "39": "k",
      "40": "e",
      "41": "y",
      "42": "]",
      "43": "=",
      "44": "v",
      "45": "a",
      "46": "l",
      "47": "u",
      "48": "e",
      "49": "2",
    },
    pageSize: 100,
    paginationToken: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
  });
  expect(result.statusCode).toBe(200);
  expect(result.accountsCursorResponse).toBeDefined();
  expect(result.accountsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          address: "users:001",
          metadata: {
            "admin": true,
            "a": {
              "nested": {
                "key": "value",
              },
            },
          },
          type: "virtual",
        },
        {
          address: "users:001",
          metadata: {
            "admin": true,
            "a": {
              "nested": {
                "key": "value",
              },
            },
          },
          type: "virtual",
        },
        {
          address: "users:001",
          metadata: {
            "admin": true,
            "a": {
              "nested": {
                "key": "value",
              },
            },
          },
          type: "virtual",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V1 List Logs", async () => {
  const testHttpClient = createTestHTTPClient("listLogs");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.listLogs({
    after: "1234",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    ledger: "ledger001",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.logsCursorResponse).toBeDefined();
  expect(result.logsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          data: {
            "key": "<value>",
          },
          date: new Date("2023-01-03T01:52:56.946Z"),
          hash:
            "9ee060170400f556b7e1575cb13f9db004f150a08355c7431c62bc639166431e",
          id: 1234,
          type: Type.SetMetadata,
        },
        {
          data: {
            "key": "<value>",
          },
          date: new Date("2025-08-25T01:03:57.835Z"),
          hash:
            "9ee060170400f556b7e1575cb13f9db004f150a08355c7431c62bc639166431e",
          id: 1234,
          type: Type.NewTransaction,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V1 List Transactions", async () => {
  const testHttpClient = createTestHTTPClient("listTransactions");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.listTransactions({
    account: "users:001",
    after: "1234",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    destination: "users:001",
    ledger: "ledger001",
    pageSize: 100,
    reference: "ref:001",
    source: "users:001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.transactionsCursorResponse).toBeDefined();
  expect(result.transactionsCursorResponse).toEqual({
    cursor: {
      data: [
        {
          postCommitVolumes: {
            "orders:1": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
            "orders:2": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
          },
          postings: [
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
          ],
          preCommitVolumes: {
            "orders:1": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
            "orders:2": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
          },
          reference: "ref:001",
          timestamp: new Date("2023-03-19T19:47:16.768Z"),
          txid: BigInt("533792"),
        },
        {
          postCommitVolumes: {
            "orders:1": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
            "orders:2": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
          },
          postings: [
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
            {
              amount: BigInt("100"),
              asset: "COIN",
              destination: "users:002",
              source: "users:001",
            },
          ],
          preCommitVolumes: {
            "orders:1": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
            "orders:2": {
              "USD": {
                balance: BigInt("90"),
                input: BigInt("100"),
                output: BigInt("10"),
              },
            },
          },
          reference: "ref:001",
          timestamp: new Date("2025-01-29T15:40:15.458Z"),
          txid: BigInt("711700"),
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V1 Read Stats", async () => {
  const testHttpClient = createTestHTTPClient("readStats");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.readStats({
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.statsResponse).toBeDefined();
  expect(result.statsResponse).toEqual({
    data: {
      accounts: 939446,
      transactions: 895732,
    },
  });
});

test("Sdk V1 Revert Transaction", async () => {
  const testHttpClient = createTestHTTPClient("revertTransaction");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.revertTransaction({
    ledger: "ledger001",
    txid: BigInt("1234"),
  });
  expect(result.statusCode).toBe(201);
  expect(result.transactionResponse).toBeDefined();
  expect(result.transactionResponse).toEqual({
    data: {
      postCommitVolumes: {
        "orders:1": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
        "orders:2": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
      },
      postings: [
        {
          amount: BigInt("100"),
          asset: "COIN",
          destination: "users:002",
          source: "users:001",
        },
        {
          amount: BigInt("100"),
          asset: "COIN",
          destination: "users:002",
          source: "users:001",
        },
        {
          amount: BigInt("100"),
          asset: "COIN",
          destination: "users:002",
          source: "users:001",
        },
      ],
      preCommitVolumes: {
        "orders:1": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
        "orders:2": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
      },
      reference: "ref:001",
      timestamp: new Date("2024-09-05T21:38:55.965Z"),
      txid: BigInt("107968"),
    },
  });
});

test("Sdk V1 Run Script", async () => {
  const testHttpClient = createTestHTTPClient("runScript");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.runScript({
    script: {
      plain: "vars {\n"
        + "account $user\n"
        + "}\n"
        + "send [COIN 10] (\n"
        + "	source = @world\n"
        + "	destination = $user\n"
        + ")\n"
        + "",
      reference: "order_1234",
      vars: {
        "user": "users:042",
      },
    },
    ledger: "ledger001",
    preview: true,
  });
  expect(result.statusCode).toBe(200);
  expect(result.scriptResponse).toBeDefined();
  expect(result.scriptResponse).toEqual({
    details:
      "https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9",
    errorCode: ErrorsEnum.InsufficientFund,
    errorMessage: "account had insufficient funds",
    transaction: {
      postCommitVolumes: {
        "orders:1": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
        "orders:2": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
      },
      postings: [],
      preCommitVolumes: {
        "orders:1": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
        "orders:2": {
          "USD": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
          "EUR": {
            balance: BigInt("80"),
            input: BigInt("100"),
            output: BigInt("20"),
          },
        },
      },
      reference: "ref:001",
      timestamp: new Date("2024-11-04T15:22:00.380Z"),
      txid: BigInt("737293"),
    },
  });
});

test("Sdk V1 Update Mapping", async () => {
  const testHttpClient = createTestHTTPClient("updateMapping");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.ledger.v1.updateMapping({
    mapping: {
      contracts: [
        {
          account: "users:001",
          expr: {},
        },
        {
          account: "users:001",
          expr: {},
        },
      ],
    },
    ledger: "ledger001",
  });
  expect(result.statusCode).toBe(200);
  expect(result.mappingResponse).toBeDefined();
  expect(result.mappingResponse).toEqual({
    data: {
      contracts: [
        {
          account: "users:001",
          expr: {},
        },
        {
          account: "users:001",
          expr: {},
        },
      ],
    },
  });
});
