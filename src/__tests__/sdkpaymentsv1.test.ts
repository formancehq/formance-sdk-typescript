/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import {
  AccountType,
  Connector,
  PaymentScheme,
  PaymentStatus,
  PaymentType,
  Status,
  TaskStatus,
  TransferInitiationRequestType,
  TransferInitiationStatus,
  TransferInitiationType,
} from "../sdk/models/shared/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Sdk Payments V1 Add Account To Pool", async () => {
  const testHttpClient = createTestHTTPClient("addAccountToPool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.addAccountToPool({
    addAccountToPoolRequest: {
      accountID: "<id>",
    },
    poolId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Connectors Transfer", async () => {
  const testHttpClient = createTestHTTPClient("connectorsTransfer");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.connectorsTransfer({
    transferRequest: {
      amount: BigInt("100"),
      asset: "USD",
      destination: "acct_1Gqj58KZcSIg2N2q",
      source: "acct_1Gqj58KZcSIg2N2q",
    },
    connector: Connector.BankingCircle,
  });
  expect(result.statusCode).toBe(200);
  expect(result.transferResponse).toBeDefined();
  expect(result.transferResponse).toEqual({});
});

test("Sdk Payments V1 Create Account", async () => {
  const testHttpClient = createTestHTTPClient("createAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.createAccount({
    connectorID: "<id>",
    createdAt: new Date("2025-08-19T02:15:08.152Z"),
    reference: "<value>",
    type: AccountType.Internal,
  });
  expect(result.statusCode).toBe(200);
  expect(result.paymentsAccountResponse).toBeDefined();
  expect(result.paymentsAccountResponse).toEqual({
    data: {
      accountName: "<value>",
      connectorID: "<id>",
      createdAt: new Date("2023-04-28T00:06:23.447Z"),
      defaultAsset: "<value>",
      defaultCurrency: "<value>",
      id: "<id>",
      metadata: {
        "key": "<value>",
        "key1": "<value>",
      },
      raw: {},
      reference: "<value>",
      type: AccountType.Internal,
    },
  });
});

test("Sdk Payments V1 Create Bank Account", async () => {
  const testHttpClient = createTestHTTPClient("createBankAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.createBankAccount({
    connectorID: "<id>",
    country: "GB",
    name: "My account",
  });
  expect(result.statusCode).toBe(200);
  expect(result.bankAccountResponse).toBeDefined();
  expect(result.bankAccountResponse).toEqual({
    data: {
      country: "Holy See (Vatican City State)",
      createdAt: new Date("2024-08-31T23:24:27.067Z"),
      id: "<id>",
      name: "<value>",
    },
  });
});

test("Sdk Payments V1 Create Payment", async () => {
  const testHttpClient = createTestHTTPClient("createPayment");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.createPayment({
    amount: BigInt("100"),
    asset: "USD",
    connectorID: "<id>",
    createdAt: new Date("2025-11-09T01:03:21.011Z"),
    reference: "<value>",
    scheme: PaymentScheme.Molpay,
    status: PaymentStatus.RefundedFailure,
    type: PaymentType.Payout,
  });
  expect(result.statusCode).toBe(200);
  expect(result.paymentResponse).toBeDefined();
  expect(result.paymentResponse).toEqual({
    data: {
      adjustments: [],
      amount: BigInt("100"),
      asset: "USD",
      connectorID: "<id>",
      createdAt: new Date("2023-02-21T01:47:02.496Z"),
      destinationAccountID: "<id>",
      id: "XXX",
      initialAmount: BigInt("100"),
      metadata: {
        "key": "<value>",
        "key1": "<value>",
        "key2": "<value>",
      },
      raw: {},
      reference: "<value>",
      scheme: PaymentScheme.Cup,
      sourceAccountID: "<id>",
      status: PaymentStatus.Other,
      type: PaymentType.PayIn,
    },
  });
});

test("Sdk Payments V1 Create Pool", async () => {
  const testHttpClient = createTestHTTPClient("createPool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.createPool({
    accountIDs: [
      "<value>",
      "<value>",
      "<value>",
    ],
    name: "<value>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.poolResponse).toBeDefined();
  expect(result.poolResponse).toEqual({
    data: {
      accounts: [],
      id: "<id>",
      name: "<value>",
    },
  });
});

test("Sdk Payments V1 Create Transfer Initiation", async () => {
  const testHttpClient = createTestHTTPClient("createTransferInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.createTransferInitiation({
    amount: BigInt("256698"),
    asset: "USD",
    description: "worthy pace vague ick liberalize between um",
    destinationAccountID: "<id>",
    reference: "XXX",
    scheduledAt: new Date("2025-05-02T09:50:03.622Z"),
    sourceAccountID: "<id>",
    type: TransferInitiationRequestType.Payout,
    validated: true,
  });
  expect(result.statusCode).toBe(200);
  expect(result.transferInitiationResponse).toBeDefined();
  expect(result.transferInitiationResponse).toEqual({
    data: {
      amount: BigInt("422655"),
      asset: "USD",
      connectorID: "<id>",
      createdAt: new Date("2023-01-07T23:05:45.713Z"),
      description: "jut profane apud newsstand printer fondly",
      destinationAccountID: "<id>",
      error: "<value>",
      id: "XXX",
      initialAmount: BigInt("923751"),
      reference: "<value>",
      scheduledAt: new Date("2023-01-12T11:17:22.320Z"),
      sourceAccountID: "<id>",
      status: TransferInitiationStatus.Processed,
      type: TransferInitiationType.Payout,
    },
  });
});

test("Sdk Payments V1 Delete Pool", async () => {
  const testHttpClient = createTestHTTPClient("deletePool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.deletePool({
    poolId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Delete Transfer Initiation", async () => {
  const testHttpClient = createTestHTTPClient("deleteTransferInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.deleteTransferInitiation({
    transferId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Forward Bank Account", async () => {
  const testHttpClient = createTestHTTPClient("forwardBankAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.forwardBankAccount({
    forwardBankAccountRequest: {
      connectorID: "<id>",
    },
    bankAccountId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.bankAccountResponse).toBeDefined();
  expect(result.bankAccountResponse).toEqual({
    data: {
      country: "Belize",
      createdAt: new Date("2023-01-21T13:08:56.229Z"),
      id: "<id>",
      name: "<value>",
    },
  });
});

test("Sdk Payments V1 Get Account Balances", async () => {
  const testHttpClient = createTestHTTPClient("getAccountBalances");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getAccountBalances({
    accountId: "XXX",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    sort: [
      "date:asc",
      "status:desc",
    ],
  });
  expect(result.statusCode).toBe(200);
  expect(result.balancesCursor).toBeDefined();
  expect(result.balancesCursor).toEqual({
    cursor: {
      data: [
        {
          accountId: "<id>",
          asset: "<value>",
          balance: BigInt("125462"),
          createdAt: new Date("2024-01-30T03:48:20.670Z"),
          currency: "Argentine Peso",
          lastUpdatedAt: new Date("2025-07-01T14:03:15.166Z"),
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 Get Bank Account", async () => {
  const testHttpClient = createTestHTTPClient("getBankAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getBankAccount({
    bankAccountId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.bankAccountResponse).toBeDefined();
  expect(result.bankAccountResponse).toEqual({
    data: {
      country: "Colombia",
      createdAt: new Date("2023-03-04T16:16:17.382Z"),
      id: "<id>",
      name: "<value>",
    },
  });
});

test("Sdk Payments V1 Get Connector Task", async () => {
  const testHttpClient = createTestHTTPClient("getConnectorTask");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getConnectorTask({
    connector: Connector.Adyen,
    taskId: "task1",
  });
  expect(result.statusCode).toBe(200);
  expect(result.taskResponse).toBeDefined();
  expect(result.taskResponse).toEqual({
    data: {
      connectorID: "<id>",
      createdAt: new Date("2025-02-08T17:39:38.418Z"),
      descriptor: {},
      id: "8d4a71ba-4575-442a-9fdb-17eed3b13ec7",
      status: TaskStatus.Pending,
      updatedAt: new Date("2025-04-25T00:27:47.982Z"),
    },
  });
});

test("Sdk Payments V1 Get Connector Task V1", async () => {
  const testHttpClient = createTestHTTPClient("getConnectorTaskV1");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getConnectorTaskV1({
    connector: Connector.BankingCircle,
    connectorId: "XXX",
    taskId: "task1",
  });
  expect(result.statusCode).toBe(200);
  expect(result.taskResponse).toBeDefined();
  expect(result.taskResponse).toEqual({
    data: {
      connectorID: "<id>",
      createdAt: new Date("2023-06-20T11:48:17.213Z"),
      descriptor: {},
      id: "592c3a8b-a286-4c92-93fe-1c798f795cd7",
      status: TaskStatus.Pending,
      updatedAt: new Date("2025-11-10T01:58:07.691Z"),
    },
  });
});

test("Sdk Payments V1 Get Payment", async () => {
  const testHttpClient = createTestHTTPClient("getPayment");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getPayment({
    paymentId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.paymentResponse).toBeDefined();
  expect(result.paymentResponse).toEqual({
    data: {
      adjustments: [
        {
          amount: BigInt("100"),
          createdAt: new Date("2025-11-19T01:14:15.129Z"),
          raw: {},
          reference: "<value>",
          status: PaymentStatus.Expired,
        },
      ],
      amount: BigInt("100"),
      asset: "USD",
      connectorID: "<id>",
      createdAt: new Date("2024-02-18T17:18:36.576Z"),
      destinationAccountID: "<id>",
      id: "XXX",
      initialAmount: BigInt("100"),
      metadata: {
        "key": "<value>",
        "key1": "<value>",
      },
      raw: {},
      reference: "<value>",
      scheme: PaymentScheme.Unionpay,
      sourceAccountID: "<id>",
      status: PaymentStatus.Dispute,
      type: PaymentType.Transfer,
    },
  });
});

test("Sdk Payments V1 Get Pool", async () => {
  const testHttpClient = createTestHTTPClient("getPool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getPool({
    poolId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.poolResponse).toBeDefined();
  expect(result.poolResponse).toEqual({
    data: {
      accounts: [],
      id: "<id>",
      name: "<value>",
    },
  });
});

test("Sdk Payments V1 Get Pool Balances", async () => {
  const testHttpClient = createTestHTTPClient("getPoolBalances");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getPoolBalances({
    at: new Date("2024-05-04T06:40:23.119Z"),
    poolId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.poolBalancesResponse).toBeDefined();
  expect(result.poolBalancesResponse).toEqual({
    data: {
      balances: [],
    },
  });
});

test("Sdk Payments V1 Get Transfer Initiation", async () => {
  const testHttpClient = createTestHTTPClient("getTransferInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.getTransferInitiation({
    transferId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.transferInitiationResponse).toBeDefined();
  expect(result.transferInitiationResponse).toEqual({
    data: {
      amount: BigInt("72812"),
      asset: "USD",
      connectorID: "<id>",
      createdAt: new Date("2023-06-13T16:04:12.992Z"),
      description: "lack sick cheerfully minor",
      destinationAccountID: "<id>",
      error: "<value>",
      id: "XXX",
      initialAmount: BigInt("849995"),
      reference: "<value>",
      scheduledAt: new Date("2025-01-24T01:47:16.422Z"),
      sourceAccountID: "<id>",
      status: TransferInitiationStatus.WaitingForValidation,
      type: TransferInitiationType.Payout,
    },
  });
});

test("Sdk Payments V1 Install Connector", async () => {
  const testHttpClient = createTestHTTPClient("installConnector");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.installConnector({
    connectorConfig: {
      apiKey: "XXX",
      name: "My Stripe Account",
      pageSize: 50,
      pollingPeriod: "60s",
    },
    connector: Connector.Atlar,
  });
  expect(result.statusCode).toBe(201);
  expect(result.connectorResponse).toBeDefined();
  expect(result.connectorResponse).toEqual({
    data: {
      connectorID: "<id>",
    },
  });
});

test("Sdk Payments V1 List All Connectors", async () => {
  const testHttpClient = createTestHTTPClient("listAllConnectors");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listAllConnectors();
  expect(result.statusCode).toBe(200);
  expect(result.connectorsResponse).toBeDefined();
  expect(result.connectorsResponse).toEqual({
    data: [
      {
        connectorID: "<id>",
        name: "<value>",
        provider: Connector.Moneycorp,
      },
      {
        connectorID: "<id>",
        name: "<value>",
        provider: Connector.CurrencyCloud,
      },
    ],
  });
});

test("Sdk Payments V1 List Bank Accounts", async () => {
  const testHttpClient = createTestHTTPClient("listBankAccounts");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listBankAccounts({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    sort: [
      "date:asc",
      "status:desc",
    ],
  });
  expect(result.statusCode).toBe(200);
  expect(result.bankAccountsCursor).toBeDefined();
  expect(result.bankAccountsCursor).toEqual({
    cursor: {
      data: [
        {
          country: "Bahrain",
          createdAt: new Date("2023-02-23T22:10:49.411Z"),
          id: "<id>",
          name: "<value>",
        },
        {
          country: "Myanmar",
          createdAt: new Date("2023-12-30T23:44:22.122Z"),
          id: "<id>",
          name: "<value>",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 List Configs Available Connectors", async () => {
  const testHttpClient = createTestHTTPClient("listConfigsAvailableConnectors");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listConfigsAvailableConnectors();
  expect(result.statusCode).toBe(200);
  expect(result.connectorsConfigsResponse).toBeDefined();
  expect(result.connectorsConfigsResponse).toEqual({
    data: {
      connector: {
        key: {
          dataType: "real",
          required: false,
        },
      },
    },
  });
});

test("Sdk Payments V1 List Connector Tasks", async () => {
  const testHttpClient = createTestHTTPClient("listConnectorTasks");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listConnectorTasks({
    connector: Connector.Modulr,
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
  });
  expect(result.statusCode).toBe(200);
  expect(result.tasksCursor).toBeDefined();
  expect(result.tasksCursor).toEqual({
    cursor: {
      data: [
        {
          connectorID: "<id>",
          createdAt: new Date("2024-03-30T15:06:52.730Z"),
          descriptor: {},
          id: "943abad6-1f7a-4a0d-b991-cf9266dd4814",
          status: TaskStatus.Stopped,
          updatedAt: new Date("2024-10-15T18:08:06.313Z"),
        },
        {
          connectorID: "<id>",
          createdAt: new Date("2023-09-08T19:27:52.424Z"),
          descriptor: {},
          id: "f678351b-c600-4cf3-beff-e2c5cad006d4",
          status: TaskStatus.Failed,
          updatedAt: new Date("2024-02-03T08:52:20.456Z"),
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 List Connector Tasks V1", async () => {
  const testHttpClient = createTestHTTPClient("listConnectorTasksV1");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listConnectorTasksV1({
    connector: Connector.BankingCircle,
    connectorId: "XXX",
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
  });
  expect(result.statusCode).toBe(200);
  expect(result.tasksCursor).toBeDefined();
  expect(result.tasksCursor).toEqual({
    cursor: {
      data: [
        {
          connectorID: "<id>",
          createdAt: new Date("2024-08-30T08:25:15.703Z"),
          descriptor: {},
          id: "119bf1d7-7f0d-47a9-85f6-d1de55906fa5",
          status: TaskStatus.Stopped,
          updatedAt: new Date("2023-03-08T11:32:23.574Z"),
        },
        {
          connectorID: "<id>",
          createdAt: new Date("2024-12-26T08:45:38.166Z"),
          descriptor: {},
          id: "636e772b-1d53-4e6e-b1a0-f8d94fbd4d08",
          status: TaskStatus.Pending,
          updatedAt: new Date("2025-04-25T04:53:52.895Z"),
        },
        {
          connectorID: "<id>",
          createdAt: new Date("2025-04-15T21:11:42.740Z"),
          descriptor: {},
          id: "3d5edc7f-3fcd-42b1-a430-91094b0590aa",
          status: TaskStatus.Stopped,
          updatedAt: new Date("2023-02-23T06:58:36.788Z"),
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 List Payments", async () => {
  const testHttpClient = createTestHTTPClient("listPayments");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listPayments({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    sort: [
      "date:asc",
      "status:desc",
    ],
  });
  expect(result.statusCode).toBe(200);
  expect(result.paymentsCursor).toBeDefined();
  expect(result.paymentsCursor).toEqual({
    cursor: {
      data: [],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 List Pools", async () => {
  const testHttpClient = createTestHTTPClient("listPools");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listPools({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    sort: [
      "date:asc",
      "status:desc",
    ],
  });
  expect(result.statusCode).toBe(200);
  expect(result.poolsCursor).toBeDefined();
  expect(result.poolsCursor).toEqual({
    cursor: {
      data: [
        {
          accounts: [
            "<value>",
            "<value>",
          ],
          id: "<id>",
          name: "<value>",
        },
        {
          accounts: [
            "<value>",
          ],
          id: "<id>",
          name: "<value>",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 List Transfer Initiations", async () => {
  const testHttpClient = createTestHTTPClient("listTransferInitiations");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.listTransferInitiations({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    sort: [
      "date:asc",
      "status:desc",
    ],
  });
  expect(result.statusCode).toBe(200);
  expect(result.transferInitiationsCursor).toBeDefined();
  expect(result.transferInitiationsCursor).toEqual({
    cursor: {
      data: [
        {
          amount: BigInt("27378"),
          asset: "USD",
          connectorID: "<id>",
          createdAt: new Date("2024-04-12T17:55:51.446Z"),
          description:
            "shovel aw scrutinise delicious a machine provided thongs eek pfft",
          destinationAccountID: "<id>",
          error: "<value>",
          id: "XXX",
          initialAmount: BigInt("955636"),
          reference: "<value>",
          scheduledAt: new Date("2025-12-22T21:51:13.393Z"),
          sourceAccountID: "<id>",
          status: TransferInitiationStatus.AskReversed,
          type: TransferInitiationType.Transfer,
        },
        {
          amount: BigInt("99452"),
          asset: "USD",
          connectorID: "<id>",
          createdAt: new Date("2024-05-14T08:21:14.101Z"),
          description: "vice programme downchange lucky",
          destinationAccountID: "<id>",
          error: "<value>",
          id: "XXX",
          initialAmount: BigInt("418039"),
          reference: "<value>",
          scheduledAt: new Date("2024-05-12T21:20:56.584Z"),
          sourceAccountID: "<id>",
          status: TransferInitiationStatus.Processed,
          type: TransferInitiationType.Transfer,
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 Paymentsget Account", async () => {
  const testHttpClient = createTestHTTPClient("paymentsgetAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.paymentsgetAccount({
    accountId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.paymentsAccountResponse).toBeDefined();
  expect(result.paymentsAccountResponse).toEqual({
    data: {
      accountName: "<value>",
      connectorID: "<id>",
      createdAt: new Date("2024-11-12T03:25:46.461Z"),
      defaultAsset: "<value>",
      defaultCurrency: "<value>",
      id: "<id>",
      metadata: {
        "key": "<value>",
        "key1": "<value>",
      },
      raw: {},
      reference: "<value>",
      type: AccountType.Unknown,
    },
  });
});

test("Sdk Payments V1 Paymentsget Server Info", async () => {
  const testHttpClient = createTestHTTPClient("paymentsgetServerInfo");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.paymentsgetServerInfo();
  expect(result.statusCode).toBe(200);
  expect(result.serverInfo).toBeDefined();
  expect(result.serverInfo).toEqual({
    version: "<value>",
  });
});

test("Sdk Payments V1 Paymentslist Accounts", async () => {
  const testHttpClient = createTestHTTPClient("paymentslistAccounts");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.paymentslistAccounts({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    sort: [
      "date:asc",
      "status:desc",
    ],
  });
  expect(result.statusCode).toBe(200);
  expect(result.accountsCursor).toBeDefined();
  expect(result.accountsCursor).toEqual({
    cursor: {
      data: [],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk Payments V1 Read Connector Config", async () => {
  const testHttpClient = createTestHTTPClient("readConnectorConfig");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.readConnectorConfig({
    connector: Connector.Generic,
  });
  expect(result.statusCode).toBe(200);
  expect(result.connectorConfigResponse).toBeDefined();
  expect(result.connectorConfigResponse).toEqual({
    data: {
      accessKey: "XXX",
      baseUrl: "https://api.example.com",
      name: "My Atlar Account",
      pageSize: 50,
      pollingPeriod: "60s",
      secret: "XXX",
      transferInitiationStatusPollingPeriod: "60s",
    },
  });
});

test("Sdk Payments V1 Read Connector Config V1", async () => {
  const testHttpClient = createTestHTTPClient("readConnectorConfigV1");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.readConnectorConfigV1({
    connector: Connector.CurrencyCloud,
    connectorId: "XXX",
  });
  expect(result.statusCode).toBe(200);
  expect(result.connectorConfigResponse).toBeDefined();
  expect(result.connectorConfigResponse).toEqual({
    data: {
      apiKey: "XXX",
      apiSecret: "XXX",
      endpoint: "XXX",
      name: "My Modulr Account",
      pollingPeriod: "120s",
    },
  });
});

test("Sdk Payments V1 Remove Account From Pool", async () => {
  const testHttpClient = createTestHTTPClient("removeAccountFromPool");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.removeAccountFromPool({
    accountId: "XXX",
    poolId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Reset Connector", async () => {
  const testHttpClient = createTestHTTPClient("resetConnector");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.resetConnector({
    connector: Connector.Atlar,
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Reset Connector V1", async () => {
  const testHttpClient = createTestHTTPClient("resetConnectorV1");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.resetConnectorV1({
    connector: Connector.Generic,
    connectorId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Retry Transfer Initiation", async () => {
  const testHttpClient = createTestHTTPClient("retryTransferInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.retryTransferInitiation({
    transferId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Reverse Transfer Initiation", async () => {
  const testHttpClient = createTestHTTPClient("reverseTransferInitiation");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.reverseTransferInitiation({
    reverseTransferInitiationRequest: {
      amount: BigInt("327549"),
      asset: "USD",
      description: "till gosh how proselytise worriedly whoa",
      metadata: {
        "key": "<value>",
      },
      reference: "XXX",
    },
    transferId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Udpate Transfer Initiation Status", async () => {
  const testHttpClient = createTestHTTPClient("udpateTransferInitiationStatus");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.udpateTransferInitiationStatus({
    updateTransferInitiationStatusRequest: {
      status: Status.Validated,
    },
    transferId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Uninstall Connector", async () => {
  const testHttpClient = createTestHTTPClient("uninstallConnector");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.uninstallConnector({
    connector: Connector.Modulr,
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Uninstall Connector V1", async () => {
  const testHttpClient = createTestHTTPClient("uninstallConnectorV1");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.uninstallConnectorV1({
    connector: Connector.Generic,
    connectorId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Update Bank Account Metadata", async () => {
  const testHttpClient = createTestHTTPClient("updateBankAccountMetadata");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.updateBankAccountMetadata({
    updateBankAccountMetadataRequest: {
      metadata: {
        "key": "<value>",
      },
    },
    bankAccountId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Update Connector Config V1", async () => {
  const testHttpClient = createTestHTTPClient("updateConnectorConfigV1");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.updateConnectorConfigV1({
    connectorConfig: {
      apiKey: "XXX",
      name: "My Stripe Account",
      pageSize: 10,
      pollingPeriod: "120s",
    },
    connector: Connector.Adyen,
    connectorId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Payments V1 Update Metadata", async () => {
  const testHttpClient = createTestHTTPClient("updateMetadata");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.payments.v1.updateMetadata({
    requestBody: {
      "key": "<value>",
      "key1": "<value>",
    },
    paymentId: "XXX",
  });
  expect(result.statusCode).toBe(204);
});
