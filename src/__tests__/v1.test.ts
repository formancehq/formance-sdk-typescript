/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("V1 Create Client", async () => {
  const testHttpClient = createTestHTTPClient("createClient");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.createClient();
  expect(result.statusCode).toBe(201);
  expect(result.createClientResponse).toBeDefined();
  expect(result.createClientResponse).toEqual({});
});

test("V1 Create Secret", async () => {
  const testHttpClient = createTestHTTPClient("createSecret");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.createSecret({
    clientId: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.createSecretResponse).toBeDefined();
  expect(result.createSecretResponse).toEqual({});
});

test("V1 Delete Client", async () => {
  const testHttpClient = createTestHTTPClient("deleteClient");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.deleteClient({
    clientId: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V1 Delete Secret", async () => {
  const testHttpClient = createTestHTTPClient("deleteSecret");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.deleteSecret({
    clientId: "<id>",
    secretId: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("V1 Get Oidc Well Knowns", async () => {
  const testHttpClient = createTestHTTPClient("getOIDCWellKnowns");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.getOIDCWellKnowns();
  expect(result.statusCode).toBe(200);
});

test("V1 Get Server Info", async () => {
  const testHttpClient = createTestHTTPClient("getServerInfo");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.getServerInfo();
  expect(result.statusCode).toBe(200);
  expect(result.serverInfo).toBeDefined();
  expect(result.serverInfo).toEqual({
    version: "<value>",
  });
});

test("V1 List Clients", async () => {
  const testHttpClient = createTestHTTPClient("listClients");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.listClients();
  expect(result.statusCode).toBe(200);
  expect(result.listClientsResponse).toBeDefined();
  expect(result.listClientsResponse).toEqual({});
});

test("V1 List Users", async () => {
  const testHttpClient = createTestHTTPClient("listUsers");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.listUsers();
  expect(result.statusCode).toBe(200);
  expect(result.listUsersResponse).toBeDefined();
  expect(result.listUsersResponse).toEqual({
    data: [
      {
        email: "user1@orga1.com",
        id: "3bb03708-312f-48a0-821a-e765837dc2c4",
        subject: "Jane Doe",
      },
      {
        email: "user1@orga1.com",
        id: "3bb03708-312f-48a0-821a-e765837dc2c4",
        subject: "Jane Doe",
      },
    ],
  });
});

test("V1 Read Client", async () => {
  const testHttpClient = createTestHTTPClient("readClient");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.readClient({
    clientId: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.readClientResponse).toBeDefined();
  expect(result.readClientResponse).toEqual({});
});

test("V1 Read User", async () => {
  const testHttpClient = createTestHTTPClient("readUser");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.readUser({
    userId: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.readUserResponse).toBeDefined();
  expect(result.readUserResponse).toEqual({
    data: {
      email: "user1@orga1.com",
      id: "3bb03708-312f-48a0-821a-e765837dc2c4",
      subject: "Jane Doe",
    },
  });
});

test("V1 Update Client", async () => {
  const testHttpClient = createTestHTTPClient("updateClient");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.auth.v1.updateClient({
    clientId: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.updateClientResponse).toBeDefined();
  expect(result.updateClientResponse).toEqual({});
});
