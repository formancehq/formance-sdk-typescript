/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import {
  Scheme,
  V2PaymentStatus,
  V2PaymentType,
} from "../sdk/models/shared/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Sdk V2 V2 Cancel Event", async () => {
  const testHttpClient = createTestHTTPClient("v2CancelEvent");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.cancelEvent({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk V2 V2 Create Trigger", async () => {
  const testHttpClient = createTestHTTPClient("v2CreateTrigger");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.createTrigger();
  expect(result.statusCode).toBe(201);
  expect(result.v2CreateTriggerResponse).toBeDefined();
  expect(result.v2CreateTriggerResponse).toEqual({
    data: {
      createdAt: new Date("2023-02-06T04:27:27.896Z"),
      event: "<value>",
      id: "<id>",
      workflowID: "<id>",
    },
  });
});

test("Sdk V2 V2 Create Workflow", async () => {
  const testHttpClient = createTestHTTPClient("v2CreateWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.createWorkflow();
  expect(result.statusCode).toBe(201);
  expect(result.v2CreateWorkflowResponse).toBeDefined();
  expect(result.v2CreateWorkflowResponse).toEqual({
    data: {
      config: {
        stages: [],
      },
      createdAt: new Date("2025-09-25T10:50:45.884Z"),
      id: "<id>",
      updatedAt: new Date("2024-03-06T13:06:20.711Z"),
    },
  });
});

test("Sdk V2 V2 Delete Trigger", async () => {
  const testHttpClient = createTestHTTPClient("v2DeleteTrigger");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.deleteTrigger({
    triggerID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk V2 V2 Delete Workflow", async () => {
  const testHttpClient = createTestHTTPClient("v2DeleteWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.deleteWorkflow({
    flowId: "xxx",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk V2 V2 Get Instance", async () => {
  const testHttpClient = createTestHTTPClient("v2GetInstance");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.getInstance({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2GetWorkflowInstanceResponse).toBeDefined();
  expect(result.v2GetWorkflowInstanceResponse).toEqual({
    data: {
      createdAt: new Date("2025-05-27T18:06:07.805Z"),
      id: "<id>",
      terminated: true,
      updatedAt: new Date("2024-12-10T23:41:39.935Z"),
      workflowID: "<id>",
    },
  });
});

test("Sdk V2 V2 Get Instance History", async () => {
  const testHttpClient = createTestHTTPClient("v2GetInstanceHistory");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.getInstanceHistory({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2GetWorkflowInstanceHistoryResponse).toBeDefined();
  expect(result.v2GetWorkflowInstanceHistoryResponse).toEqual({
    data: [
      {
        input: {},
        name: "<value>",
        startedAt: new Date("2024-12-21T06:06:34.439Z"),
        terminated: true,
      },
      {
        input: {},
        name: "<value>",
        startedAt: new Date("2023-03-31T15:11:10.794Z"),
        terminated: true,
      },
    ],
  });
});

test("Sdk V2 V2 Get Instance Stage History", async () => {
  const testHttpClient = createTestHTTPClient("v2GetInstanceStageHistory");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.getInstanceStageHistory({
    instanceID: "xxx",
    number: 0,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2GetWorkflowInstanceHistoryStageResponse).toBeDefined();
  expect(result.v2GetWorkflowInstanceHistoryStageResponse).toEqual({
    data: [
      {
        attempt: 814164,
        input: {
          createTransaction: {
            data: {
              metadata: {
                "admin": "true",
              },
              postings: [
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
              ],
              reference: "ref:001",
              script: {
                plain: "vars {\n"
                  + "account $user\n"
                  + "}\n"
                  + "send [COIN 10] (\n"
                  + "	source = @world\n"
                  + "	destination = $user\n"
                  + ")\n"
                  + "",
                vars: {
                  "user": "users:042",
                },
              },
            },
          },
          creditWallet: {
            data: {
              amount: {
                amount: BigInt("100"),
                asset: "USD/2",
              },
              metadata: {
                "key": "",
              },
              sources: [],
            },
          },
          debitWallet: {
            data: {
              amount: {
                amount: BigInt("100"),
                asset: "USD/2",
              },
              metadata: {
                "key": "",
              },
              pending: true,
            },
          },
          stripeTransfer: {
            amount: BigInt("100"),
            asset: "USD",
            destination: "acct_1Gqj58KZcSIg2N2q",
            waitingValidation: false,
          },
        },
        name: "<value>",
        output: {
          createTransaction: {
            data: [
              {
                metadata: {
                  "admin": "true",
                },
                postings: [
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                ],
                reference: "ref:001",
                timestamp: new Date("2024-02-25T08:16:25.611Z"),
                txid: BigInt("193963"),
              },
              {
                metadata: {
                  "admin": "true",
                },
                postings: [
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                ],
                reference: "ref:001",
                timestamp: new Date("2024-09-11T04:49:03.408Z"),
                txid: BigInt("512399"),
              },
              {
                metadata: {
                  "admin": "true",
                },
                postings: [
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                  {
                    amount: BigInt("100"),
                    asset: "COIN",
                    destination: "users:002",
                    source: "users:001",
                  },
                ],
                reference: "ref:001",
                timestamp: new Date("2025-12-08T02:58:44.541Z"),
                txid: BigInt("505948"),
              },
            ],
          },
          getAccount: {
            data: {
              address: "users:001",
              effectiveVolumes: {
                "USD": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
                "EUR": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
              },
              metadata: {
                "admin": "true",
              },
              volumes: {
                "USD": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
                "EUR": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
              },
            },
          },
          getPayment: {
            data: {
              adjustments: [
                {
                  absolute: false,
                  amount: BigInt("100"),
                  date: new Date("2024-07-15T14:04:10.735Z"),
                  raw: {},
                  status: V2PaymentStatus.Failed,
                },
                {
                  absolute: false,
                  amount: BigInt("100"),
                  date: new Date("2024-04-09T23:19:06.573Z"),
                  raw: {},
                  status: V2PaymentStatus.Failed,
                },
              ],
              asset: "USD",
              connectorID: "<id>",
              createdAt: new Date("2023-05-09T19:53:15.550Z"),
              destinationAccountID: "<id>",
              id: "XXX",
              initialAmount: BigInt("100"),
              metadata: {},
              raw: {},
              reference: "<value>",
              scheme: Scheme.Amex,
              sourceAccountID: "<id>",
              status: V2PaymentStatus.Cancelled,
              type: V2PaymentType.PayIn,
            },
          },
          listWallets: {
            cursor: {
              data: [
                {
                  createdAt: new Date("2025-11-27T02:08:52.827Z"),
                  id: "5d3894ae-ce7c-44b7-9c48-3e4cba69dcb9",
                  ledger: "<value>",
                  metadata: {},
                  name: "<value>",
                },
                {
                  createdAt: new Date("2025-05-20T17:13:48.350Z"),
                  id: "f5d6610e-e457-43cc-b9c2-41fd8f61b492",
                  ledger: "<value>",
                  metadata: {},
                  name: "<value>",
                },
                {
                  createdAt: new Date("2023-01-18T03:26:48.477Z"),
                  id: "26a0c2ea-29e8-484a-bef5-0fac9fda12cb",
                  ledger: "<value>",
                  metadata: {
                    "key": "<value>",
                    "key1": "<value>",
                    "key2": "<value>",
                  },
                  name: "<value>",
                },
              ],
              hasMore: false,
              next: "",
              pageSize: 15,
              previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
            },
          },
        },
        startedAt: new Date("2023-11-06T21:00:32.040Z"),
        terminated: false,
      },
    ],
  });
});

test("Sdk V2 V2 Get Server Info", async () => {
  const testHttpClient = createTestHTTPClient("v2GetServerInfo");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.getServerInfo();
  expect(result.statusCode).toBe(200);
  expect(result.v2ServerInfo).toBeDefined();
  expect(result.v2ServerInfo).toEqual({
    version: "<value>",
  });
});

test("Sdk V2 V2 Get Workflow", async () => {
  const testHttpClient = createTestHTTPClient("v2GetWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.getWorkflow({
    flowId: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2GetWorkflowResponse).toBeDefined();
  expect(result.v2GetWorkflowResponse).toEqual({
    data: {
      config: {
        stages: [
          {
            "key": "<value>",
          },
          {
            "key": "<value>",
            "key1": "<value>",
          },
          {},
        ],
      },
      createdAt: new Date("2025-05-07T16:56:33.373Z"),
      id: "<id>",
      updatedAt: new Date("2023-01-19T02:43:34.985Z"),
    },
  });
});

test("Sdk V2 V2 List Instances", async () => {
  const testHttpClient = createTestHTTPClient("v2ListInstances");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.listInstances({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
    running: true,
    workflowID: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2ListRunsResponse).toBeDefined();
  expect(result.v2ListRunsResponse).toEqual({
    cursor: {
      data: [],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V2 V2 List Triggers", async () => {
  const testHttpClient = createTestHTTPClient("v2ListTriggers");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.listTriggers({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2ListTriggersResponse).toBeDefined();
  expect(result.v2ListTriggersResponse).toEqual({
    cursor: {
      data: [
        {
          createdAt: new Date("2024-09-09T22:34:30.799Z"),
          event: "<value>",
          id: "<id>",
          workflowID: "<id>",
        },
        {
          createdAt: new Date("2025-10-25T17:04:34.359Z"),
          event: "<value>",
          id: "<id>",
          workflowID: "<id>",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V2 V2 List Triggers Occurrences", async () => {
  const testHttpClient = createTestHTTPClient("v2ListTriggersOccurrences");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.listTriggersOccurrences({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
    triggerID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2ListTriggersOccurrencesResponse).toBeDefined();
  expect(result.v2ListTriggersOccurrencesResponse).toEqual({
    cursor: {
      data: [
        {
          date: new Date("2025-10-13T07:55:03.028Z"),
          event: {
            "key": "<value>",
            "key1": "<value>",
          },
          triggerID: "<id>",
        },
        {
          date: new Date("2024-10-03T19:33:42.523Z"),
          event: {},
          triggerID: "<id>",
        },
      ],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V2 V2 List Workflows", async () => {
  const testHttpClient = createTestHTTPClient("v2ListWorkflows");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.listWorkflows({
    cursor: "aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==",
    pageSize: 100,
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2ListWorkflowsResponse).toBeDefined();
  expect(result.v2ListWorkflowsResponse).toEqual({
    cursor: {
      data: [],
      hasMore: false,
      next: "",
      pageSize: 15,
      previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
    },
  });
});

test("Sdk V2 V2 Read Trigger", async () => {
  const testHttpClient = createTestHTTPClient("v2ReadTrigger");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.readTrigger({
    triggerID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2ReadTriggerResponse).toBeDefined();
  expect(result.v2ReadTriggerResponse).toEqual({
    data: {
      createdAt: new Date("2023-03-26T21:52:22.792Z"),
      event: "<value>",
      id: "<id>",
      workflowID: "<id>",
    },
  });
});

test("Sdk V2 V2 Run Workflow", async () => {
  const testHttpClient = createTestHTTPClient("v2RunWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.runWorkflow({
    workflowID: "xxx",
  });
  expect(result.statusCode).toBe(201);
  expect(result.v2RunWorkflowResponse).toBeDefined();
  expect(result.v2RunWorkflowResponse).toEqual({
    data: {
      createdAt: new Date("2023-02-10T15:22:37.507Z"),
      id: "<id>",
      terminated: false,
      updatedAt: new Date("2024-10-27T10:56:23.429Z"),
      workflowID: "<id>",
    },
  });
});

test("Sdk V2 V2 Send Event", async () => {
  const testHttpClient = createTestHTTPClient("v2SendEvent");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.sendEvent({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk V2 Test Trigger", async () => {
  const testHttpClient = createTestHTTPClient("testTrigger");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v2.testTrigger({
    triggerID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.v2TestTriggerResponse).toBeDefined();
  expect(result.v2TestTriggerResponse).toEqual({
    data: {},
  });
});
