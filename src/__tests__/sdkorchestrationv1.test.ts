/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import {
  OrchestrationPaymentScheme,
  OrchestrationPaymentStatus,
  OrchestrationPaymentType,
} from "../sdk/models/shared/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Sdk Orchestration V1 Cancel Event", async () => {
  const testHttpClient = createTestHTTPClient("cancelEvent");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.cancelEvent({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Orchestration V1 Create Trigger", async () => {
  const testHttpClient = createTestHTTPClient("createTrigger");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.createTrigger();
  expect(result.statusCode).toBe(201);
  expect(result.createTriggerResponse).toBeDefined();
  expect(result.createTriggerResponse).toEqual({
    data: {
      createdAt: new Date("2024-01-13T03:40:57.557Z"),
      event: "<value>",
      id: "<id>",
      workflowID: "<id>",
    },
  });
});

test("Sdk Orchestration V1 Create Workflow", async () => {
  const testHttpClient = createTestHTTPClient("createWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.createWorkflow();
  expect(result.statusCode).toBe(201);
  expect(result.createWorkflowResponse).toBeDefined();
  expect(result.createWorkflowResponse).toEqual({
    data: {
      config: {
        stages: [
          {},
          {
            "key": "<value>",
            "key1": "<value>",
          },
          {},
        ],
      },
      createdAt: new Date("2025-08-28T15:20:54.999Z"),
      id: "<id>",
      updatedAt: new Date("2024-01-22T19:31:50.523Z"),
    },
  });
});

test("Sdk Orchestration V1 Delete Trigger", async () => {
  const testHttpClient = createTestHTTPClient("deleteTrigger");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.deleteTrigger({
    triggerID: "<id>",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Orchestration V1 Delete Workflow", async () => {
  const testHttpClient = createTestHTTPClient("deleteWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.deleteWorkflow({
    flowId: "xxx",
  });
  expect(result.statusCode).toBe(204);
});

test("Sdk Orchestration V1 Get Instance", async () => {
  const testHttpClient = createTestHTTPClient("getInstance");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.getInstance({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.getWorkflowInstanceResponse).toBeDefined();
  expect(result.getWorkflowInstanceResponse).toEqual({
    data: {
      createdAt: new Date("2025-12-22T05:06:37.217Z"),
      id: "<id>",
      terminated: true,
      updatedAt: new Date("2023-04-26T16:05:05.917Z"),
      workflowID: "<id>",
    },
  });
});

test("Sdk Orchestration V1 Get Instance History", async () => {
  const testHttpClient = createTestHTTPClient("getInstanceHistory");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.getInstanceHistory({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.getWorkflowInstanceHistoryResponse).toBeDefined();
  expect(result.getWorkflowInstanceHistoryResponse).toEqual({
    data: [],
  });
});

test("Sdk Orchestration V1 Get Instance Stage History", async () => {
  const testHttpClient = createTestHTTPClient("getInstanceStageHistory");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.getInstanceStageHistory({
    instanceID: "xxx",
    number: 0,
  });
  expect(result.statusCode).toBe(200);
  expect(result.getWorkflowInstanceHistoryStageResponse).toBeDefined();
  expect(result.getWorkflowInstanceHistoryStageResponse).toEqual({
    data: [
      {
        attempt: 1195,
        input: {
          createTransaction: {
            data: {
              metadata: {
                "admin": "true",
              },
              postings: [
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
              ],
              reference: "ref:001",
              script: {
                plain: "vars {\n"
                  + "account $user\n"
                  + "}\n"
                  + "send [COIN 10] (\n"
                  + "	source = @world\n"
                  + "	destination = $user\n"
                  + ")\n"
                  + "",
                vars: {
                  "user": "users:042",
                },
              },
            },
          },
          creditWallet: {
            data: {
              amount: {
                amount: BigInt("100"),
                asset: "USD/2",
              },
              metadata: {
                "key": "",
              },
              sources: [],
            },
          },
          debitWallet: {
            data: {
              amount: {
                amount: BigInt("100"),
                asset: "USD/2",
              },
              metadata: {
                "key": "",
              },
              pending: true,
            },
          },
          stripeTransfer: {
            amount: BigInt("100"),
            asset: "USD",
            destination: "acct_1Gqj58KZcSIg2N2q",
            waitingValidation: false,
          },
        },
        name: "<value>",
        output: {
          createTransaction: {
            data: {
              id: BigInt("789895"),
              metadata: {
                "admin": "true",
              },
              postings: [],
              reference: "ref:001",
              reverted: true,
              timestamp: new Date("2023-08-06T02:20:05.010Z"),
            },
          },
          getAccount: {
            data: {
              address: "users:001",
              effectiveVolumes: {
                "USD": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
                "EUR": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
              },
              metadata: {
                "admin": "true",
              },
              volumes: {
                "USD": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
                "EUR": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
              },
            },
          },
          getPayment: {
            data: {
              adjustments: [
                {
                  absolute: false,
                  amount: BigInt("100"),
                  date: new Date("2025-04-08T02:48:47.425Z"),
                  raw: {},
                  status: OrchestrationPaymentStatus.Cancelled,
                },
                {
                  absolute: true,
                  amount: BigInt("100"),
                  date: new Date("2025-11-11T02:51:20.511Z"),
                  raw: {},
                  status: OrchestrationPaymentStatus.Pending,
                },
              ],
              asset: "USD",
              connectorID: "<id>",
              createdAt: new Date("2025-02-01T17:45:57.768Z"),
              destinationAccountID: "<id>",
              id: "XXX",
              initialAmount: BigInt("100"),
              metadata: {},
              raw: {},
              reference: "<value>",
              scheme: OrchestrationPaymentScheme.GooglePay,
              sourceAccountID: "<id>",
              status: OrchestrationPaymentStatus.Terminated,
              type: OrchestrationPaymentType.PayIn,
            },
          },
          listWallets: {
            cursor: {
              data: [
                {
                  createdAt: new Date("2025-12-06T17:39:27.860Z"),
                  id: "ffbd66e8-3ce0-4c96-a10c-8f8e0fc37bf1",
                  ledger: "<value>",
                  metadata: {},
                  name: "<value>",
                },
                {
                  createdAt: new Date("2023-10-08T10:30:27.460Z"),
                  id: "cc38d81a-72b4-44c3-9e12-1021e7d24c49",
                  ledger: "<value>",
                  metadata: {
                    "key": "<value>",
                    "key1": "<value>",
                    "key2": "<value>",
                  },
                  name: "<value>",
                },
                {
                  createdAt: new Date("2023-08-19T00:05:57.472Z"),
                  id: "52b35c03-d99a-4510-8a1f-81f33c690889",
                  ledger: "<value>",
                  metadata: {},
                  name: "<value>",
                },
              ],
              hasMore: false,
              next: "",
              pageSize: 15,
              previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
            },
          },
          revertTransaction: {
            data: {
              id: BigInt("619586"),
              metadata: {
                "admin": "true",
              },
              postings: [
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
              ],
              reference: "ref:001",
              reverted: false,
              timestamp: new Date("2023-05-29T15:10:35.259Z"),
            },
          },
        },
        startedAt: new Date("2023-07-02T11:58:56.305Z"),
        terminated: false,
      },
      {
        attempt: 626222,
        input: {
          createTransaction: {
            data: {
              metadata: {
                "admin": "true",
              },
              postings: [
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
              ],
              reference: "ref:001",
              script: {
                plain: "vars {\n"
                  + "account $user\n"
                  + "}\n"
                  + "send [COIN 10] (\n"
                  + "	source = @world\n"
                  + "	destination = $user\n"
                  + ")\n"
                  + "",
                vars: {
                  "user": "users:042",
                },
              },
            },
          },
          creditWallet: {
            data: {
              amount: {
                amount: BigInt("100"),
                asset: "USD/2",
              },
              metadata: {
                "key": "",
              },
              sources: [],
            },
          },
          debitWallet: {
            data: {
              amount: {
                amount: BigInt("100"),
                asset: "USD/2",
              },
              metadata: {
                "key": "",
              },
              pending: true,
            },
          },
          stripeTransfer: {
            amount: BigInt("100"),
            asset: "USD",
            destination: "acct_1Gqj58KZcSIg2N2q",
            waitingValidation: false,
          },
        },
        name: "<value>",
        output: {
          createTransaction: {
            data: {
              id: BigInt("378579"),
              metadata: {
                "admin": "true",
              },
              postings: [
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
              ],
              reference: "ref:001",
              reverted: false,
              timestamp: new Date("2024-04-15T17:34:05.615Z"),
            },
          },
          getAccount: {
            data: {
              address: "users:001",
              effectiveVolumes: {
                "USD": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
                "EUR": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
              },
              metadata: {
                "admin": "true",
              },
              volumes: {
                "USD": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
                "EUR": {
                  balance: BigInt("90"),
                  input: BigInt("100"),
                  output: BigInt("10"),
                },
              },
            },
          },
          getPayment: {
            data: {
              adjustments: [
                {
                  absolute: true,
                  amount: BigInt("100"),
                  date: new Date("2023-09-29T18:17:48.825Z"),
                  raw: {},
                  status: OrchestrationPaymentStatus.Failed,
                },
                {
                  absolute: false,
                  amount: BigInt("100"),
                  date: new Date("2025-10-19T21:59:00.100Z"),
                  raw: {},
                  status: OrchestrationPaymentStatus.Terminated,
                },
                {
                  absolute: true,
                  amount: BigInt("100"),
                  date: new Date("2024-08-27T16:14:46.808Z"),
                  raw: {},
                  status: OrchestrationPaymentStatus.Terminated,
                },
              ],
              asset: "USD",
              connectorID: "<id>",
              createdAt: new Date("2025-01-07T21:12:58.328Z"),
              destinationAccountID: "<id>",
              id: "XXX",
              initialAmount: BigInt("100"),
              metadata: {},
              raw: {},
              reference: "<value>",
              scheme: OrchestrationPaymentScheme.Ach,
              sourceAccountID: "<id>",
              status: OrchestrationPaymentStatus.Pending,
              type: OrchestrationPaymentType.Transfer,
            },
          },
          listWallets: {
            cursor: {
              data: [
                {
                  createdAt: new Date("2025-04-30T04:49:25.662Z"),
                  id: "3b1509a5-fe8d-4e70-9916-180485cfaa61",
                  ledger: "<value>",
                  metadata: {
                    "key": "<value>",
                  },
                  name: "<value>",
                },
                {
                  createdAt: new Date("2025-06-23T23:43:36.792Z"),
                  id: "a6d8edb3-a103-4920-bfca-b898a403e10c",
                  ledger: "<value>",
                  metadata: {},
                  name: "<value>",
                },
              ],
              hasMore: false,
              next: "",
              pageSize: 15,
              previous: "YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=",
            },
          },
          revertTransaction: {
            data: {
              id: BigInt("155282"),
              metadata: {
                "admin": "true",
              },
              postings: [
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
                {
                  amount: BigInt("100"),
                  asset: "COIN",
                  destination: "users:002",
                  source: "users:001",
                },
              ],
              reference: "ref:001",
              reverted: false,
              timestamp: new Date("2023-12-07T07:38:05.268Z"),
            },
          },
        },
        startedAt: new Date("2023-12-17T14:52:10.553Z"),
        terminated: true,
      },
    ],
  });
});

test("Sdk Orchestration V1 Get Workflow", async () => {
  const testHttpClient = createTestHTTPClient("getWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.getWorkflow({
    flowId: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.getWorkflowResponse).toBeDefined();
  expect(result.getWorkflowResponse).toEqual({
    data: {
      config: {
        stages: [
          {},
        ],
      },
      createdAt: new Date("2025-03-16T03:14:12.617Z"),
      id: "<id>",
      updatedAt: new Date("2024-11-13T22:03:51.333Z"),
    },
  });
});

test("Sdk Orchestration V1 List Instances", async () => {
  const testHttpClient = createTestHTTPClient("listInstances");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.listInstances({
    running: true,
    workflowID: "xxx",
  });
  expect(result.statusCode).toBe(200);
  expect(result.listRunsResponse).toBeDefined();
  expect(result.listRunsResponse).toEqual({
    data: [
      {
        createdAt: new Date("2024-07-17T08:20:08.742Z"),
        id: "<id>",
        terminated: true,
        updatedAt: new Date("2023-05-04T22:49:25.313Z"),
        workflowID: "<id>",
      },
    ],
  });
});

test("Sdk Orchestration V1 List Triggers", async () => {
  const testHttpClient = createTestHTTPClient("listTriggers");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.listTriggers({});
  expect(result.statusCode).toBe(200);
  expect(result.listTriggersResponse).toBeDefined();
  expect(result.listTriggersResponse).toEqual({
    data: [],
  });
});

test("Sdk Orchestration V1 List Triggers Occurrences", async () => {
  const testHttpClient = createTestHTTPClient("listTriggersOccurrences");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.listTriggersOccurrences({
    triggerID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.listTriggersOccurrencesResponse).toBeDefined();
  expect(result.listTriggersOccurrencesResponse).toEqual({
    data: [
      {
        date: new Date("2024-04-11T13:42:33.759Z"),
        event: {
          "key": "<value>",
          "key1": "<value>",
        },
        triggerID: "<id>",
      },
      {
        date: new Date("2023-04-01T04:29:12.442Z"),
        event: {
          "key": "<value>",
          "key1": "<value>",
          "key2": "<value>",
        },
        triggerID: "<id>",
      },
      {
        date: new Date("2024-11-09T03:51:27.854Z"),
        event: {},
        triggerID: "<id>",
      },
    ],
  });
});

test("Sdk Orchestration V1 List Workflows", async () => {
  const testHttpClient = createTestHTTPClient("listWorkflows");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.listWorkflows();
  expect(result.statusCode).toBe(200);
  expect(result.listWorkflowsResponse).toBeDefined();
  expect(result.listWorkflowsResponse).toEqual({
    data: [],
  });
});

test("Sdk Orchestration V1 Orchestrationget Server Info", async () => {
  const testHttpClient = createTestHTTPClient("orchestrationgetServerInfo");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.orchestrationgetServerInfo();
  expect(result.statusCode).toBe(200);
  expect(result.serverInfo).toBeDefined();
  expect(result.serverInfo).toEqual({
    version: "<value>",
  });
});

test("Sdk Orchestration V1 Read Trigger", async () => {
  const testHttpClient = createTestHTTPClient("readTrigger");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.readTrigger({
    triggerID: "<id>",
  });
  expect(result.statusCode).toBe(200);
  expect(result.readTriggerResponse).toBeDefined();
  expect(result.readTriggerResponse).toEqual({
    data: {
      createdAt: new Date("2024-08-27T14:30:14.944Z"),
      event: "<value>",
      id: "<id>",
      workflowID: "<id>",
    },
  });
});

test("Sdk Orchestration V1 Run Workflow", async () => {
  const testHttpClient = createTestHTTPClient("runWorkflow");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.runWorkflow({
    workflowID: "xxx",
  });
  expect(result.statusCode).toBe(201);
  expect(result.runWorkflowResponse).toBeDefined();
  expect(result.runWorkflowResponse).toEqual({
    data: {
      createdAt: new Date("2025-11-19T22:37:10.059Z"),
      id: "<id>",
      terminated: false,
      updatedAt: new Date("2025-04-08T02:25:10.274Z"),
      workflowID: "<id>",
    },
  });
});

test("Sdk Orchestration V1 Send Event", async () => {
  const testHttpClient = createTestHTTPClient("sendEvent");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      clientID: "<YOUR_CLIENT_ID_HERE>",
      clientSecret: "<YOUR_CLIENT_SECRET_HERE>",
    },
  });

  const result = await sdk.orchestration.v1.sendEvent({
    instanceID: "xxx",
  });
  expect(result.statusCode).toBe(204);
});
