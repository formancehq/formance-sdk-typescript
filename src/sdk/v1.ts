/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authV1CreateClient } from "../funcs/authV1CreateClient.js";
import { authV1CreateSecret } from "../funcs/authV1CreateSecret.js";
import { authV1DeleteClient } from "../funcs/authV1DeleteClient.js";
import { authV1DeleteSecret } from "../funcs/authV1DeleteSecret.js";
import { authV1GetOIDCWellKnowns } from "../funcs/authV1GetOIDCWellKnowns.js";
import { authV1GetServerInfo } from "../funcs/authV1GetServerInfo.js";
import { authV1ListClients } from "../funcs/authV1ListClients.js";
import { authV1ListUsers } from "../funcs/authV1ListUsers.js";
import { authV1ReadClient } from "../funcs/authV1ReadClient.js";
import { authV1ReadUser } from "../funcs/authV1ReadUser.js";
import { authV1UpdateClient } from "../funcs/authV1UpdateClient.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class V1 extends ClientSDK {
  /**
   * Create client
   */
  async createClient(
    request?: shared.CreateClientRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateClientResponse> {
    return unwrapAsync(authV1CreateClient(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a secret to a client
   */
  async createSecret(
    request: operations.CreateSecretRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateSecretResponse> {
    return unwrapAsync(authV1CreateSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete client
   */
  async deleteClient(
    request: operations.DeleteClientRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteClientResponse> {
    return unwrapAsync(authV1DeleteClient(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a secret from a client
   */
  async deleteSecret(
    request: operations.DeleteSecretRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteSecretResponse> {
    return unwrapAsync(authV1DeleteSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve OpenID connect well-knowns.
   */
  async getOIDCWellKnowns(
    options?: RequestOptions,
  ): Promise<operations.GetOIDCWellKnownsResponse> {
    return unwrapAsync(authV1GetOIDCWellKnowns(
      this,
      options,
    ));
  }

  /**
   * Get server info
   */
  async getServerInfo(
    options?: RequestOptions,
  ): Promise<operations.GetServerInfoResponse> {
    return unwrapAsync(authV1GetServerInfo(
      this,
      options,
    ));
  }

  /**
   * List clients
   */
  async listClients(
    options?: RequestOptions,
  ): Promise<operations.ListClientsResponse> {
    return unwrapAsync(authV1ListClients(
      this,
      options,
    ));
  }

  /**
   * List users
   *
   * @remarks
   * List users
   */
  async listUsers(
    options?: RequestOptions,
  ): Promise<operations.ListUsersResponse> {
    return unwrapAsync(authV1ListUsers(
      this,
      options,
    ));
  }

  /**
   * Read client
   */
  async readClient(
    request: operations.ReadClientRequest,
    options?: RequestOptions,
  ): Promise<operations.ReadClientResponse> {
    return unwrapAsync(authV1ReadClient(
      this,
      request,
      options,
    ));
  }

  /**
   * Read user
   *
   * @remarks
   * Read user
   */
  async readUser(
    request: operations.ReadUserRequest,
    options?: RequestOptions,
  ): Promise<operations.ReadUserResponse> {
    return unwrapAsync(authV1ReadUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Update client
   */
  async updateClient(
    request: operations.UpdateClientRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateClientResponse> {
    return unwrapAsync(authV1UpdateClient(
      this,
      request,
      options,
    ));
  }
}
