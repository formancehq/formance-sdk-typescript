/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeDeepObjectQuery as encodeDeepObjectQuery$,
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
    queryJoin as queryJoin$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as errors from "./models/errors/index.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";

export class Wallets extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Confirm a hold
     */
    async confirmHold(
        request: operations.ConfirmHoldRequest,
        options?: RequestOptions
    ): Promise<operations.ConfirmHoldResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ConfirmHoldRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.ConfirmHoldRequest, { explode: true });

        const pathParams$ = {
            hold_id: encodeSimple$("hold_id", payload$.hold_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/wallets/holds/{hold_id}/confirm")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "confirmHold",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ConfirmHoldResponse>()
            .void(204, operations.ConfirmHoldResponse$inboundSchema)
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a balance
     */
    async createBalance(
        request: operations.CreateBalanceRequest,
        options?: RequestOptions
    ): Promise<operations.CreateBalanceResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateBalanceRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.CreateBalanceRequest, { explode: true });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/balances")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createBalance",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateBalanceResponse>()
            .json(201, operations.CreateBalanceResponse$inboundSchema, {
                key: "CreateBalanceResponse",
            })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a new wallet
     */
    async createWallet(
        request?: shared.CreateWalletRequest | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateWalletResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => shared.CreateWalletRequest$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/wallets/wallets")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateWalletResponse>()
            .json(201, operations.CreateWalletResponse$inboundSchema, {
                key: "CreateWalletResponse",
            })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Credit a wallet
     */
    async creditWallet(
        request: operations.CreditWalletRequest,
        options?: RequestOptions
    ): Promise<operations.CreditWalletResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreditWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.CreditWalletRequest, { explode: true });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/credit")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "creditWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreditWalletResponse>()
            .void(204, operations.CreditWalletResponse$inboundSchema)
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Debit a wallet
     */
    async debitWallet(
        request: operations.DebitWalletRequest,
        options?: RequestOptions
    ): Promise<operations.DebitWalletResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DebitWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.DebitWalletRequest, { explode: true });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/debit")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "debitWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.DebitWalletResponse>()
            .json(201, operations.DebitWalletResponse$inboundSchema, { key: "DebitWalletResponse" })
            .void(204, operations.DebitWalletResponse$inboundSchema)
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get detailed balance
     */
    async getBalance(
        request: operations.GetBalanceRequest,
        options?: RequestOptions
    ): Promise<operations.GetBalanceResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetBalanceRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            balanceName: encodeSimple$("balanceName", payload$.balanceName, {
                explode: false,
                charEncoding: "percent",
            }),
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/balances/{balanceName}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getBalance",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetBalanceResponse>()
            .json(200, operations.GetBalanceResponse$inboundSchema, { key: "GetBalanceResponse" })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get a hold
     */
    async getHold(
        request: operations.GetHoldRequest,
        options?: RequestOptions
    ): Promise<operations.GetHoldResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetHoldRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            holdID: encodeSimple$("holdID", payload$.holdID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/wallets/holds/{holdID}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getHold",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetHoldResponse>()
            .json(200, operations.GetHoldResponse$inboundSchema, { key: "GetHoldResponse" })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get all holds for a wallet
     */
    async getHolds(
        request: operations.GetHoldsRequest,
        options?: RequestOptions
    ): Promise<operations.GetHoldsResponse> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetHoldsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/wallets/holds")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                metadata: payload$.metadata,
            }),
            encodeFormQuery$({
                cursor: payload$.cursor,
                pageSize: payload$.pageSize,
                walletID: payload$.walletID,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getHolds",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetHoldsResponse>()
            .json(200, operations.GetHoldsResponse$inboundSchema, { key: "GetHoldsResponse" })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    async getTransactions(
        request: operations.GetTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.GetTransactionsResponse> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTransactionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/wallets/transactions")();

        const query$ = encodeFormQuery$({
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
            walletID: payload$.walletID,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetTransactionsResponse>()
            .json(200, operations.GetTransactionsResponse$inboundSchema, {
                key: "GetTransactionsResponse",
            })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get a wallet
     */
    async getWallet(
        request: operations.GetWalletRequest,
        options?: RequestOptions
    ): Promise<operations.GetWalletResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetWalletResponse>()
            .json(200, operations.GetWalletResponse$inboundSchema, { key: "GetWalletResponse" })
            .void(404, operations.GetWalletResponse$inboundSchema)
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get wallet summary
     */
    async getWalletSummary(
        request: operations.GetWalletSummaryRequest,
        options?: RequestOptions
    ): Promise<operations.GetWalletSummaryResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetWalletSummaryRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/summary")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getWalletSummary",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetWalletSummaryResponse>()
            .json(200, operations.GetWalletSummaryResponse$inboundSchema, {
                key: "GetWalletSummaryResponse",
            })
            .void(404, operations.GetWalletSummaryResponse$inboundSchema)
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List balances of a wallet
     */
    async listBalances(
        request: operations.ListBalancesRequest,
        options?: RequestOptions
    ): Promise<operations.ListBalancesResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListBalancesRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/balances")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "listBalances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ListBalancesResponse>()
            .json(200, operations.ListBalancesResponse$inboundSchema, {
                key: "ListBalancesResponse",
            })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List all wallets
     */
    async listWallets(
        request: operations.ListWalletsRequest,
        options?: RequestOptions
    ): Promise<operations.ListWalletsResponse> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListWalletsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/wallets/wallets")();

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                metadata: payload$.metadata,
            }),
            encodeFormQuery$({
                cursor: payload$.cursor,
                expand: payload$.expand,
                name: payload$.name,
                pageSize: payload$.pageSize,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "listWallets",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ListWalletsResponse>()
            .json(200, operations.ListWalletsResponse$inboundSchema, { key: "ListWalletsResponse" })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update a wallet
     */
    async updateWallet(
        request: operations.UpdateWalletRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateWalletResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updateWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.UpdateWalletResponse>()
            .void(204, operations.UpdateWalletResponse$inboundSchema)
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Cancel a hold
     */
    async voidHold(
        request: operations.VoidHoldRequest,
        options?: RequestOptions
    ): Promise<operations.VoidHoldResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.VoidHoldRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            hold_id: encodeSimple$("hold_id", payload$.hold_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/wallets/holds/{hold_id}/void")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "voidHold",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.VoidHoldResponse>()
            .void(204, operations.VoidHoldResponse$inboundSchema)
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get server info
     */
    async walletsgetServerInfo(
        options?: RequestOptions
    ): Promise<operations.WalletsgetServerInfoResponse> {
        const path$ = this.templateURLComponent("/api/wallets/_info")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "walletsgetServerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.WalletsgetServerInfoResponse>()
            .json(200, operations.WalletsgetServerInfoResponse$inboundSchema, { key: "ServerInfo" })
            .json("default", errors.WalletsErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
