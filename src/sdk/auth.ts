/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity } from "../lib/security.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";

export class Auth extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create client
     */
    async createClient(
        request?: shared.CreateClientRequest | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateClientResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => shared.CreateClientRequest$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/auth/clients")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "createClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateClientResponse>()
            .json(201, operations.CreateClientResponse$inboundSchema, {
                key: "CreateClientResponse",
            })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Add a secret to a client
     */
    async createSecret(
        request: operations.CreateSecretRequest,
        options?: RequestOptions
    ): Promise<operations.CreateSecretResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateSecretRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.CreateSecretRequest, { explode: true });

        const pathParams$ = {
            clientId: encodeSimple$("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}/secrets")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "createSecret",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateSecretResponse>()
            .json(200, operations.CreateSecretResponse$inboundSchema, {
                key: "CreateSecretResponse",
            })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete client
     */
    async deleteClient(
        request: operations.DeleteClientRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteClientResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteClientRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            clientId: encodeSimple$("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "deleteClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.DeleteClientResponse>()
            .void(204, operations.DeleteClientResponse$inboundSchema)
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete a secret from a client
     */
    async deleteSecret(
        request: operations.DeleteSecretRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteSecretResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteSecretRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            clientId: encodeSimple$("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
            secretId: encodeSimple$("secretId", payload$.secretId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}/secrets/{secretId}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "deleteSecret",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.DeleteSecretResponse>()
            .void(204, operations.DeleteSecretResponse$inboundSchema)
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List clients
     */
    async listClients(options?: RequestOptions): Promise<operations.ListClientsResponse> {
        const path$ = this.templateURLComponent("/api/auth/clients")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "listClients",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ListClientsResponse>()
            .json(200, operations.ListClientsResponse$inboundSchema, { key: "ListClientsResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List users
     *
     * @remarks
     * List users
     */
    async listUsers(options?: RequestOptions): Promise<operations.ListUsersResponse> {
        const path$ = this.templateURLComponent("/api/auth/users")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "listUsers",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ListUsersResponse>()
            .json(200, operations.ListUsersResponse$inboundSchema, { key: "ListUsersResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Read client
     */
    async readClient(
        request: operations.ReadClientRequest,
        options?: RequestOptions
    ): Promise<operations.ReadClientResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ReadClientRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            clientId: encodeSimple$("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "readClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ReadClientResponse>()
            .json(200, operations.ReadClientResponse$inboundSchema, { key: "ReadClientResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Read user
     *
     * @remarks
     * Read user
     */
    async readUser(
        request: operations.ReadUserRequest,
        options?: RequestOptions
    ): Promise<operations.ReadUserResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ReadUserRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            userId: encodeSimple$("userId", payload$.userId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/users/{userId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "readUser",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ReadUserResponse>()
            .json(200, operations.ReadUserResponse$inboundSchema, { key: "ReadUserResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update client
     */
    async updateClient(
        request: operations.UpdateClientRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateClientResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateClientRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.UpdateClientRequest, { explode: true });

        const pathParams$ = {
            clientId: encodeSimple$("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "updateClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.UpdateClientResponse>()
            .json(200, operations.UpdateClientResponse$inboundSchema, {
                key: "UpdateClientResponse",
            })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
