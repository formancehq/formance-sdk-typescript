/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authCreateClient } from "../funcs/authCreateClient.js";
import { authCreateSecret } from "../funcs/authCreateSecret.js";
import { authDeleteClient } from "../funcs/authDeleteClient.js";
import { authDeleteSecret } from "../funcs/authDeleteSecret.js";
import { authListClients } from "../funcs/authListClients.js";
import { authListUsers } from "../funcs/authListUsers.js";
import { authReadClient } from "../funcs/authReadClient.js";
import { authReadUser } from "../funcs/authReadUser.js";
import { authUpdateClient } from "../funcs/authUpdateClient.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Auth extends ClientSDK {
    /**
     * Create client
     */
    async createClient(
        request?: shared.CreateClientRequest | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateClientResponse> {
        return unwrapAsync(authCreateClient(this, request, options));
    }

    /**
     * Add a secret to a client
     */
    async createSecret(
        request: operations.CreateSecretRequest,
        options?: RequestOptions
    ): Promise<operations.CreateSecretResponse> {
        return unwrapAsync(authCreateSecret(this, request, options));
    }

    /**
     * Delete client
     */
    async deleteClient(
        request: operations.DeleteClientRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteClientResponse> {
        return unwrapAsync(authDeleteClient(this, request, options));
    }

    /**
     * Delete a secret from a client
     */
    async deleteSecret(
        request: operations.DeleteSecretRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteSecretResponse> {
        return unwrapAsync(authDeleteSecret(this, request, options));
    }

    /**
     * List clients
     */
    async listClients(options?: RequestOptions): Promise<operations.ListClientsResponse> {
        return unwrapAsync(authListClients(this, options));
    }

    /**
     * List users
     *
     * @remarks
     * List users
     */
    async listUsers(options?: RequestOptions): Promise<operations.ListUsersResponse> {
        return unwrapAsync(authListUsers(this, options));
    }

    /**
     * Read client
     */
    async readClient(
        request: operations.ReadClientRequest,
        options?: RequestOptions
    ): Promise<operations.ReadClientResponse> {
        return unwrapAsync(authReadClient(this, request, options));
    }

    /**
     * Read user
     *
     * @remarks
     * Read user
     */
    async readUser(
        request: operations.ReadUserRequest,
        options?: RequestOptions
    ): Promise<operations.ReadUserResponse> {
        return unwrapAsync(authReadUser(this, request, options));
    }

    /**
     * Update client
     */
    async updateClient(
        request: operations.UpdateClientRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateClientResponse> {
        return unwrapAsync(authUpdateClient(this, request, options));
    }
}
