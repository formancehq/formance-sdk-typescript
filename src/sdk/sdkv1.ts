/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ledgerV1AddMetadataOnTransaction } from "../funcs/ledgerV1AddMetadataOnTransaction.js";
import { ledgerV1AddMetadataToAccount } from "../funcs/ledgerV1AddMetadataToAccount.js";
import { ledgerV1CountAccounts } from "../funcs/ledgerV1CountAccounts.js";
import { ledgerV1CountTransactions } from "../funcs/ledgerV1CountTransactions.js";
import { ledgerV1CreateTransaction } from "../funcs/ledgerV1CreateTransaction.js";
import { ledgerV1CreateTransactions } from "../funcs/ledgerV1CreateTransactions.js";
import { ledgerV1GetAccount } from "../funcs/ledgerV1GetAccount.js";
import { ledgerV1GetBalances } from "../funcs/ledgerV1GetBalances.js";
import { ledgerV1GetBalancesAggregated } from "../funcs/ledgerV1GetBalancesAggregated.js";
import { ledgerV1GetInfo } from "../funcs/ledgerV1GetInfo.js";
import { ledgerV1GetLedgerInfo } from "../funcs/ledgerV1GetLedgerInfo.js";
import { ledgerV1GetMapping } from "../funcs/ledgerV1GetMapping.js";
import { ledgerV1GetTransaction } from "../funcs/ledgerV1GetTransaction.js";
import { ledgerV1ListAccounts } from "../funcs/ledgerV1ListAccounts.js";
import { ledgerV1ListLogs } from "../funcs/ledgerV1ListLogs.js";
import { ledgerV1ListTransactions } from "../funcs/ledgerV1ListTransactions.js";
import { ledgerV1ReadStats } from "../funcs/ledgerV1ReadStats.js";
import { ledgerV1RevertTransaction } from "../funcs/ledgerV1RevertTransaction.js";
import { ledgerV1RunScript } from "../funcs/ledgerV1RunScript.js";
import { ledgerV1UpdateMapping } from "../funcs/ledgerV1UpdateMapping.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Sdkv1 extends ClientSDK {
  /**
   * Create a new batch of transactions to a ledger
   */
  async createTransactions(
    request: operations.CreateTransactionsRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateTransactionsResponse> {
    return unwrapAsync(ledgerV1CreateTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Set the metadata of a transaction by its ID
   */
  async addMetadataOnTransaction(
    request: operations.AddMetadataOnTransactionRequest,
    options?: RequestOptions,
  ): Promise<operations.AddMetadataOnTransactionResponse> {
    return unwrapAsync(ledgerV1AddMetadataOnTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Add metadata to an account
   */
  async addMetadataToAccount(
    request: operations.AddMetadataToAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.AddMetadataToAccountResponse> {
    return unwrapAsync(ledgerV1AddMetadataToAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Count the accounts from a ledger
   */
  async countAccounts(
    request: operations.CountAccountsRequest,
    options?: RequestOptions,
  ): Promise<operations.CountAccountsResponse> {
    return unwrapAsync(ledgerV1CountAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * Count the transactions from a ledger
   */
  async countTransactions(
    request: operations.CountTransactionsRequest,
    options?: RequestOptions,
  ): Promise<operations.CountTransactionsResponse> {
    return unwrapAsync(ledgerV1CountTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new transaction to a ledger
   */
  async createTransaction(
    request: operations.CreateTransactionRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateTransactionResponse> {
    return unwrapAsync(ledgerV1CreateTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Get account by its address
   */
  async getAccount(
    request: operations.GetAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAccountResponse> {
    return unwrapAsync(ledgerV1GetAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the balances from a ledger's account
   */
  async getBalances(
    request: operations.GetBalancesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBalancesResponse> {
    return unwrapAsync(ledgerV1GetBalances(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the aggregated balances from selected accounts
   */
  async getBalancesAggregated(
    request: operations.GetBalancesAggregatedRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBalancesAggregatedResponse> {
    return unwrapAsync(ledgerV1GetBalancesAggregated(
      this,
      request,
      options,
    ));
  }

  /**
   * Show server information
   */
  async getInfo(
    options?: RequestOptions,
  ): Promise<operations.GetInfoResponse> {
    return unwrapAsync(ledgerV1GetInfo(
      this,
      options,
    ));
  }

  /**
   * Get information about a ledger
   */
  async getLedgerInfo(
    request: operations.GetLedgerInfoRequest,
    options?: RequestOptions,
  ): Promise<operations.GetLedgerInfoResponse> {
    return unwrapAsync(ledgerV1GetLedgerInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the mapping of a ledger
   */
  async getMapping(
    request: operations.GetMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.GetMappingResponse> {
    return unwrapAsync(ledgerV1GetMapping(
      this,
      request,
      options,
    ));
  }

  /**
   * Get transaction from a ledger by its ID
   */
  async getTransaction(
    request: operations.GetTransactionRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionResponse> {
    return unwrapAsync(ledgerV1GetTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * List accounts from a ledger
   *
   * @remarks
   * List accounts from a ledger, sorted by address in descending order.
   */
  async listAccounts(
    request: operations.ListAccountsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListAccountsResponse> {
    return unwrapAsync(ledgerV1ListAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * List the logs from a ledger
   *
   * @remarks
   * List the logs from a ledger, sorted by ID in descending order.
   */
  async listLogs(
    request: operations.ListLogsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListLogsResponse> {
    return unwrapAsync(ledgerV1ListLogs(
      this,
      request,
      options,
    ));
  }

  /**
   * List transactions from a ledger
   *
   * @remarks
   * List transactions from a ledger, sorted by txid in descending order.
   */
  async listTransactions(
    request: operations.ListTransactionsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTransactionsResponse> {
    return unwrapAsync(ledgerV1ListTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get statistics from a ledger
   *
   * @remarks
   * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
   */
  async readStats(
    request: operations.ReadStatsRequest,
    options?: RequestOptions,
  ): Promise<operations.ReadStatsResponse> {
    return unwrapAsync(ledgerV1ReadStats(
      this,
      request,
      options,
    ));
  }

  /**
   * Revert a ledger transaction by its ID
   */
  async revertTransaction(
    request: operations.RevertTransactionRequest,
    options?: RequestOptions,
  ): Promise<operations.RevertTransactionResponse> {
    return unwrapAsync(ledgerV1RevertTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Execute a Numscript
   *
   * @remarks
   * This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async runScript(
    request: operations.RunScriptRequest,
    options?: RequestOptions,
  ): Promise<operations.RunScriptResponse> {
    return unwrapAsync(ledgerV1RunScript(
      this,
      request,
      options,
    ));
  }

  /**
   * Update the mapping of a ledger
   */
  async updateMapping(
    request: operations.UpdateMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateMappingResponse> {
    return unwrapAsync(ledgerV1UpdateMapping(
      this,
      request,
      options,
    ));
  }
}
