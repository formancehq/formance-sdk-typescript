/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentsAddAccountToPool } from "../funcs/paymentsAddAccountToPool.js";
import { paymentsConnectorsTransfer } from "../funcs/paymentsConnectorsTransfer.js";
import { paymentsCreateAccount } from "../funcs/paymentsCreateAccount.js";
import { paymentsCreateBankAccount } from "../funcs/paymentsCreateBankAccount.js";
import { paymentsCreatePayment } from "../funcs/paymentsCreatePayment.js";
import { paymentsCreatePool } from "../funcs/paymentsCreatePool.js";
import { paymentsCreateTransferInitiation } from "../funcs/paymentsCreateTransferInitiation.js";
import { paymentsDeletePool } from "../funcs/paymentsDeletePool.js";
import { paymentsDeleteTransferInitiation } from "../funcs/paymentsDeleteTransferInitiation.js";
import { paymentsForwardBankAccount } from "../funcs/paymentsForwardBankAccount.js";
import { paymentsGetAccountBalances } from "../funcs/paymentsGetAccountBalances.js";
import { paymentsGetBankAccount } from "../funcs/paymentsGetBankAccount.js";
import { paymentsGetConnectorTask } from "../funcs/paymentsGetConnectorTask.js";
import { paymentsGetConnectorTaskV1 } from "../funcs/paymentsGetConnectorTaskV1.js";
import { paymentsGetPayment } from "../funcs/paymentsGetPayment.js";
import { paymentsGetPool } from "../funcs/paymentsGetPool.js";
import { paymentsGetPoolBalances } from "../funcs/paymentsGetPoolBalances.js";
import { paymentsGetTransferInitiation } from "../funcs/paymentsGetTransferInitiation.js";
import { paymentsInstallConnector } from "../funcs/paymentsInstallConnector.js";
import { paymentsListAllConnectors } from "../funcs/paymentsListAllConnectors.js";
import { paymentsListBankAccounts } from "../funcs/paymentsListBankAccounts.js";
import { paymentsListConfigsAvailableConnectors } from "../funcs/paymentsListConfigsAvailableConnectors.js";
import { paymentsListConnectorTasks } from "../funcs/paymentsListConnectorTasks.js";
import { paymentsListConnectorTasksV1 } from "../funcs/paymentsListConnectorTasksV1.js";
import { paymentsListPayments } from "../funcs/paymentsListPayments.js";
import { paymentsListPools } from "../funcs/paymentsListPools.js";
import { paymentsListTransferInitiations } from "../funcs/paymentsListTransferInitiations.js";
import { paymentsPaymentsgetAccount } from "../funcs/paymentsPaymentsgetAccount.js";
import { paymentsPaymentsgetServerInfo } from "../funcs/paymentsPaymentsgetServerInfo.js";
import { paymentsPaymentslistAccounts } from "../funcs/paymentsPaymentslistAccounts.js";
import { paymentsReadConnectorConfig } from "../funcs/paymentsReadConnectorConfig.js";
import { paymentsReadConnectorConfigV1 } from "../funcs/paymentsReadConnectorConfigV1.js";
import { paymentsRemoveAccountFromPool } from "../funcs/paymentsRemoveAccountFromPool.js";
import { paymentsResetConnector } from "../funcs/paymentsResetConnector.js";
import { paymentsResetConnectorV1 } from "../funcs/paymentsResetConnectorV1.js";
import { paymentsRetryTransferInitiation } from "../funcs/paymentsRetryTransferInitiation.js";
import { paymentsReverseTransferInitiation } from "../funcs/paymentsReverseTransferInitiation.js";
import { paymentsUdpateTransferInitiationStatus } from "../funcs/paymentsUdpateTransferInitiationStatus.js";
import { paymentsUninstallConnector } from "../funcs/paymentsUninstallConnector.js";
import { paymentsUninstallConnectorV1 } from "../funcs/paymentsUninstallConnectorV1.js";
import { paymentsUpdateBankAccountMetadata } from "../funcs/paymentsUpdateBankAccountMetadata.js";
import { paymentsUpdateConnectorConfigV1 } from "../funcs/paymentsUpdateConnectorConfigV1.js";
import { paymentsUpdateMetadata } from "../funcs/paymentsUpdateMetadata.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Payments extends ClientSDK {
    /**
     * Add an account to a pool
     *
     * @remarks
     * Add an account to a pool
     */
    async addAccountToPool(
        request: operations.AddAccountToPoolRequest,
        options?: RequestOptions
    ): Promise<operations.AddAccountToPoolResponse> {
        return unwrapAsync(paymentsAddAccountToPool(this, request, options));
    }

    /**
     * Transfer funds between Connector accounts
     *
     * @remarks
     * Execute a transfer between two accounts.
     */
    async connectorsTransfer(
        request: operations.ConnectorsTransferRequest,
        options?: RequestOptions
    ): Promise<operations.ConnectorsTransferResponse> {
        return unwrapAsync(paymentsConnectorsTransfer(this, request, options));
    }

    /**
     * Create an account
     *
     * @remarks
     * Create an account
     */
    async createAccount(
        request: shared.AccountRequest,
        options?: RequestOptions
    ): Promise<operations.CreateAccountResponse> {
        return unwrapAsync(paymentsCreateAccount(this, request, options));
    }

    /**
     * Create a BankAccount in Payments and on the PSP
     *
     * @remarks
     * Create a bank account in Payments and on the PSP.
     */
    async createBankAccount(
        request: shared.BankAccountRequest,
        options?: RequestOptions
    ): Promise<operations.CreateBankAccountResponse> {
        return unwrapAsync(paymentsCreateBankAccount(this, request, options));
    }

    /**
     * Create a payment
     *
     * @remarks
     * Create a payment
     */
    async createPayment(
        request: shared.PaymentRequest,
        options?: RequestOptions
    ): Promise<operations.CreatePaymentResponse> {
        return unwrapAsync(paymentsCreatePayment(this, request, options));
    }

    /**
     * Create a Pool
     *
     * @remarks
     * Create a Pool
     */
    async createPool(
        request: shared.PoolRequest,
        options?: RequestOptions
    ): Promise<operations.CreatePoolResponse> {
        return unwrapAsync(paymentsCreatePool(this, request, options));
    }

    /**
     * Create a TransferInitiation
     *
     * @remarks
     * Create a transfer initiation
     */
    async createTransferInitiation(
        request: shared.TransferInitiationRequest,
        options?: RequestOptions
    ): Promise<operations.CreateTransferInitiationResponse> {
        return unwrapAsync(paymentsCreateTransferInitiation(this, request, options));
    }

    /**
     * Delete a Pool
     *
     * @remarks
     * Delete a pool by its id.
     */
    async deletePool(
        request: operations.DeletePoolRequest,
        options?: RequestOptions
    ): Promise<operations.DeletePoolResponse> {
        return unwrapAsync(paymentsDeletePool(this, request, options));
    }

    /**
     * Delete a transfer initiation
     *
     * @remarks
     * Delete a transfer initiation by its id.
     */
    async deleteTransferInitiation(
        request: operations.DeleteTransferInitiationRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteTransferInitiationResponse> {
        return unwrapAsync(paymentsDeleteTransferInitiation(this, request, options));
    }

    /**
     * Forward a bank account to a connector
     */
    async forwardBankAccount(
        request: operations.ForwardBankAccountRequest,
        options?: RequestOptions
    ): Promise<operations.ForwardBankAccountResponse> {
        return unwrapAsync(paymentsForwardBankAccount(this, request, options));
    }

    /**
     * Get account balances
     */
    async getAccountBalances(
        request: operations.GetAccountBalancesRequest,
        options?: RequestOptions
    ): Promise<operations.GetAccountBalancesResponse> {
        return unwrapAsync(paymentsGetAccountBalances(this, request, options));
    }

    /**
     * Get a bank account created by user on Formance
     */
    async getBankAccount(
        request: operations.GetBankAccountRequest,
        options?: RequestOptions
    ): Promise<operations.GetBankAccountResponse> {
        return unwrapAsync(paymentsGetBankAccount(this, request, options));
    }

    /**
     * Read a specific task of the connector
     *
     * @remarks
     * Get a specific task associated to the connector.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async getConnectorTask(
        request: operations.GetConnectorTaskRequest,
        options?: RequestOptions
    ): Promise<operations.GetConnectorTaskResponse> {
        return unwrapAsync(paymentsGetConnectorTask(this, request, options));
    }

    /**
     * Read a specific task of the connector
     *
     * @remarks
     * Get a specific task associated to the connector.
     */
    async getConnectorTaskV1(
        request: operations.GetConnectorTaskV1Request,
        options?: RequestOptions
    ): Promise<operations.GetConnectorTaskV1Response> {
        return unwrapAsync(paymentsGetConnectorTaskV1(this, request, options));
    }

    /**
     * Get a payment
     */
    async getPayment(
        request: operations.GetPaymentRequest,
        options?: RequestOptions
    ): Promise<operations.GetPaymentResponse> {
        return unwrapAsync(paymentsGetPayment(this, request, options));
    }

    /**
     * Get a Pool
     */
    async getPool(
        request: operations.GetPoolRequest,
        options?: RequestOptions
    ): Promise<operations.GetPoolResponse> {
        return unwrapAsync(paymentsGetPool(this, request, options));
    }

    /**
     * Get pool balances
     */
    async getPoolBalances(
        request: operations.GetPoolBalancesRequest,
        options?: RequestOptions
    ): Promise<operations.GetPoolBalancesResponse> {
        return unwrapAsync(paymentsGetPoolBalances(this, request, options));
    }

    /**
     * Get a transfer initiation
     */
    async getTransferInitiation(
        request: operations.GetTransferInitiationRequest,
        options?: RequestOptions
    ): Promise<operations.GetTransferInitiationResponse> {
        return unwrapAsync(paymentsGetTransferInitiation(this, request, options));
    }

    /**
     * Install a connector
     *
     * @remarks
     * Install a connector by its name and config.
     */
    async installConnector(
        request: operations.InstallConnectorRequest,
        options?: RequestOptions
    ): Promise<operations.InstallConnectorResponse> {
        return unwrapAsync(paymentsInstallConnector(this, request, options));
    }

    /**
     * List all installed connectors
     *
     * @remarks
     * List all installed connectors.
     */
    async listAllConnectors(
        options?: RequestOptions
    ): Promise<operations.ListAllConnectorsResponse> {
        return unwrapAsync(paymentsListAllConnectors(this, options));
    }

    /**
     * List bank accounts created by user on Formance
     *
     * @remarks
     * List all bank accounts created by user on Formance.
     */
    async listBankAccounts(
        request: operations.ListBankAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.ListBankAccountsResponse> {
        return unwrapAsync(paymentsListBankAccounts(this, request, options));
    }

    /**
     * List the configs of each available connector
     *
     * @remarks
     * List the configs of each available connector.
     */
    async listConfigsAvailableConnectors(
        options?: RequestOptions
    ): Promise<operations.ListConfigsAvailableConnectorsResponse> {
        return unwrapAsync(paymentsListConfigsAvailableConnectors(this, options));
    }

    /**
     * List tasks from a connector
     *
     * @remarks
     * List all tasks associated with this connector.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async listConnectorTasks(
        request: operations.ListConnectorTasksRequest,
        options?: RequestOptions
    ): Promise<operations.ListConnectorTasksResponse> {
        return unwrapAsync(paymentsListConnectorTasks(this, request, options));
    }

    /**
     * List tasks from a connector
     *
     * @remarks
     * List all tasks associated with this connector.
     */
    async listConnectorTasksV1(
        request: operations.ListConnectorTasksV1Request,
        options?: RequestOptions
    ): Promise<operations.ListConnectorTasksV1Response> {
        return unwrapAsync(paymentsListConnectorTasksV1(this, request, options));
    }

    /**
     * List payments
     */
    async listPayments(
        request: operations.ListPaymentsRequest,
        options?: RequestOptions
    ): Promise<operations.ListPaymentsResponse> {
        return unwrapAsync(paymentsListPayments(this, request, options));
    }

    /**
     * List Pools
     */
    async listPools(
        request: operations.ListPoolsRequest,
        options?: RequestOptions
    ): Promise<operations.ListPoolsResponse> {
        return unwrapAsync(paymentsListPools(this, request, options));
    }

    /**
     * List Transfer Initiations
     */
    async listTransferInitiations(
        request: operations.ListTransferInitiationsRequest,
        options?: RequestOptions
    ): Promise<operations.ListTransferInitiationsResponse> {
        return unwrapAsync(paymentsListTransferInitiations(this, request, options));
    }

    /**
     * Get an account
     */
    async paymentsgetAccount(
        request: operations.PaymentsgetAccountRequest,
        options?: RequestOptions
    ): Promise<operations.PaymentsgetAccountResponse> {
        return unwrapAsync(paymentsPaymentsgetAccount(this, request, options));
    }

    /**
     * Get server info
     */
    async paymentsgetServerInfo(
        options?: RequestOptions
    ): Promise<operations.PaymentsgetServerInfoResponse> {
        return unwrapAsync(paymentsPaymentsgetServerInfo(this, options));
    }

    /**
     * List accounts
     */
    async paymentslistAccounts(
        request: operations.PaymentslistAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.PaymentslistAccountsResponse> {
        return unwrapAsync(paymentsPaymentslistAccounts(this, request, options));
    }

    /**
     * Read the config of a connector
     *
     * @remarks
     * Read connector config
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async readConnectorConfig(
        request: operations.ReadConnectorConfigRequest,
        options?: RequestOptions
    ): Promise<operations.ReadConnectorConfigResponse> {
        return unwrapAsync(paymentsReadConnectorConfig(this, request, options));
    }

    /**
     * Read the config of a connector
     *
     * @remarks
     * Read connector config
     */
    async readConnectorConfigV1(
        request: operations.ReadConnectorConfigV1Request,
        options?: RequestOptions
    ): Promise<operations.ReadConnectorConfigV1Response> {
        return unwrapAsync(paymentsReadConnectorConfigV1(this, request, options));
    }

    /**
     * Remove an account from a pool
     *
     * @remarks
     * Remove an account from a pool by its id.
     */
    async removeAccountFromPool(
        request: operations.RemoveAccountFromPoolRequest,
        options?: RequestOptions
    ): Promise<operations.RemoveAccountFromPoolResponse> {
        return unwrapAsync(paymentsRemoveAccountFromPool(this, request, options));
    }

    /**
     * Reset a connector
     *
     * @remarks
     * Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     *
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async resetConnector(
        request: operations.ResetConnectorRequest,
        options?: RequestOptions
    ): Promise<operations.ResetConnectorResponse> {
        return unwrapAsync(paymentsResetConnector(this, request, options));
    }

    /**
     * Reset a connector
     *
     * @remarks
     * Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     *
     */
    async resetConnectorV1(
        request: operations.ResetConnectorV1Request,
        options?: RequestOptions
    ): Promise<operations.ResetConnectorV1Response> {
        return unwrapAsync(paymentsResetConnectorV1(this, request, options));
    }

    /**
     * Retry a failed transfer initiation
     *
     * @remarks
     * Retry a failed transfer initiation
     */
    async retryTransferInitiation(
        request: operations.RetryTransferInitiationRequest,
        options?: RequestOptions
    ): Promise<operations.RetryTransferInitiationResponse> {
        return unwrapAsync(paymentsRetryTransferInitiation(this, request, options));
    }

    /**
     * Reverse a transfer initiation
     *
     * @remarks
     * Reverse transfer initiation
     */
    async reverseTransferInitiation(
        request: operations.ReverseTransferInitiationRequest,
        options?: RequestOptions
    ): Promise<operations.ReverseTransferInitiationResponse> {
        return unwrapAsync(paymentsReverseTransferInitiation(this, request, options));
    }

    /**
     * Update the status of a transfer initiation
     *
     * @remarks
     * Update a transfer initiation status
     */
    async udpateTransferInitiationStatus(
        request: operations.UdpateTransferInitiationStatusRequest,
        options?: RequestOptions
    ): Promise<operations.UdpateTransferInitiationStatusResponse> {
        return unwrapAsync(paymentsUdpateTransferInitiationStatus(this, request, options));
    }

    /**
     * Uninstall a connector
     *
     * @remarks
     * Uninstall a connector by its name.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async uninstallConnector(
        request: operations.UninstallConnectorRequest,
        options?: RequestOptions
    ): Promise<operations.UninstallConnectorResponse> {
        return unwrapAsync(paymentsUninstallConnector(this, request, options));
    }

    /**
     * Uninstall a connector
     *
     * @remarks
     * Uninstall a connector by its name.
     */
    async uninstallConnectorV1(
        request: operations.UninstallConnectorV1Request,
        options?: RequestOptions
    ): Promise<operations.UninstallConnectorV1Response> {
        return unwrapAsync(paymentsUninstallConnectorV1(this, request, options));
    }

    /**
     * Update metadata of a bank account
     */
    async updateBankAccountMetadata(
        request: operations.UpdateBankAccountMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateBankAccountMetadataResponse> {
        return unwrapAsync(paymentsUpdateBankAccountMetadata(this, request, options));
    }

    /**
     * Update the config of a connector
     *
     * @remarks
     * Update connector config
     */
    async updateConnectorConfigV1(
        request: operations.UpdateConnectorConfigV1Request,
        options?: RequestOptions
    ): Promise<operations.UpdateConnectorConfigV1Response> {
        return unwrapAsync(paymentsUpdateConnectorConfigV1(this, request, options));
    }

    /**
     * Update metadata
     */
    async updateMetadata(
        request: operations.UpdateMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateMetadataResponse> {
        return unwrapAsync(paymentsUpdateMetadata(this, request, options));
    }
}
