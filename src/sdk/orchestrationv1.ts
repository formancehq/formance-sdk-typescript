/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { orchestrationV1CancelEvent } from "../funcs/orchestrationV1CancelEvent.js";
import { orchestrationV1CreateTrigger } from "../funcs/orchestrationV1CreateTrigger.js";
import { orchestrationV1CreateWorkflow } from "../funcs/orchestrationV1CreateWorkflow.js";
import { orchestrationV1DeleteTrigger } from "../funcs/orchestrationV1DeleteTrigger.js";
import { orchestrationV1DeleteWorkflow } from "../funcs/orchestrationV1DeleteWorkflow.js";
import { orchestrationV1GetInstance } from "../funcs/orchestrationV1GetInstance.js";
import { orchestrationV1GetInstanceHistory } from "../funcs/orchestrationV1GetInstanceHistory.js";
import { orchestrationV1GetInstanceStageHistory } from "../funcs/orchestrationV1GetInstanceStageHistory.js";
import { orchestrationV1GetWorkflow } from "../funcs/orchestrationV1GetWorkflow.js";
import { orchestrationV1ListInstances } from "../funcs/orchestrationV1ListInstances.js";
import { orchestrationV1ListTriggers } from "../funcs/orchestrationV1ListTriggers.js";
import { orchestrationV1ListTriggersOccurrences } from "../funcs/orchestrationV1ListTriggersOccurrences.js";
import { orchestrationV1ListWorkflows } from "../funcs/orchestrationV1ListWorkflows.js";
import { orchestrationV1OrchestrationgetServerInfo } from "../funcs/orchestrationV1OrchestrationgetServerInfo.js";
import { orchestrationV1ReadTrigger } from "../funcs/orchestrationV1ReadTrigger.js";
import { orchestrationV1RunWorkflow } from "../funcs/orchestrationV1RunWorkflow.js";
import { orchestrationV1SendEvent } from "../funcs/orchestrationV1SendEvent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class OrchestrationV1 extends ClientSDK {
  /**
   * Cancel a running workflow
   *
   * @remarks
   * Cancel a running workflow
   */
  async cancelEvent(
    request: operations.CancelEventRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelEventResponse> {
    return unwrapAsync(orchestrationV1CancelEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Create trigger
   *
   * @remarks
   * Create trigger
   */
  async createTrigger(
    request?: shared.TriggerData | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateTriggerResponse> {
    return unwrapAsync(orchestrationV1CreateTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Create workflow
   *
   * @remarks
   * Create a workflow
   */
  async createWorkflow(
    request?: shared.WorkflowConfig | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateWorkflowResponse> {
    return unwrapAsync(orchestrationV1CreateWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete trigger
   *
   * @remarks
   * Read trigger
   */
  async deleteTrigger(
    request: operations.DeleteTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteTriggerResponse> {
    return unwrapAsync(orchestrationV1DeleteTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a flow by id
   *
   * @remarks
   * Delete a flow by id
   */
  async deleteWorkflow(
    request: operations.DeleteWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteWorkflowResponse> {
    return unwrapAsync(orchestrationV1DeleteWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance by id
   *
   * @remarks
   * Get a workflow instance by id
   */
  async getInstance(
    request: operations.GetInstanceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInstanceResponse> {
    return unwrapAsync(orchestrationV1GetInstance(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance history by id
   *
   * @remarks
   * Get a workflow instance history by id
   */
  async getInstanceHistory(
    request: operations.GetInstanceHistoryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInstanceHistoryResponse> {
    return unwrapAsync(orchestrationV1GetInstanceHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance stage history
   *
   * @remarks
   * Get a workflow instance stage history
   */
  async getInstanceStageHistory(
    request: operations.GetInstanceStageHistoryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInstanceStageHistoryResponse> {
    return unwrapAsync(orchestrationV1GetInstanceStageHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a flow by id
   *
   * @remarks
   * Get a flow by id
   */
  async getWorkflow(
    request: operations.GetWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWorkflowResponse> {
    return unwrapAsync(orchestrationV1GetWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * List instances of a workflow
   *
   * @remarks
   * List instances of a workflow
   */
  async listInstances(
    request: operations.ListInstancesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListInstancesResponse> {
    return unwrapAsync(orchestrationV1ListInstances(
      this,
      request,
      options,
    ));
  }

  /**
   * List triggers
   *
   * @remarks
   * List triggers
   */
  async listTriggers(
    request: operations.ListTriggersRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTriggersResponse> {
    return unwrapAsync(orchestrationV1ListTriggers(
      this,
      request,
      options,
    ));
  }

  /**
   * List triggers occurrences
   *
   * @remarks
   * List triggers occurrences
   */
  async listTriggersOccurrences(
    request: operations.ListTriggersOccurrencesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTriggersOccurrencesResponse> {
    return unwrapAsync(orchestrationV1ListTriggersOccurrences(
      this,
      request,
      options,
    ));
  }

  /**
   * List registered workflows
   *
   * @remarks
   * List registered workflows
   */
  async listWorkflows(
    options?: RequestOptions,
  ): Promise<operations.ListWorkflowsResponse> {
    return unwrapAsync(orchestrationV1ListWorkflows(
      this,
      options,
    ));
  }

  /**
   * Get server info
   */
  async orchestrationgetServerInfo(
    options?: RequestOptions,
  ): Promise<operations.OrchestrationgetServerInfoResponse> {
    return unwrapAsync(orchestrationV1OrchestrationgetServerInfo(
      this,
      options,
    ));
  }

  /**
   * Read trigger
   *
   * @remarks
   * Read trigger
   */
  async readTrigger(
    request: operations.ReadTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.ReadTriggerResponse> {
    return unwrapAsync(orchestrationV1ReadTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Run workflow
   *
   * @remarks
   * Run workflow
   */
  async runWorkflow(
    request: operations.RunWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.RunWorkflowResponse> {
    return unwrapAsync(orchestrationV1RunWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Send an event to a running workflow
   *
   * @remarks
   * Send an event to a running workflow
   */
  async sendEvent(
    request: operations.SendEventRequest,
    options?: RequestOptions,
  ): Promise<operations.SendEventResponse> {
    return unwrapAsync(orchestrationV1SendEvent(
      this,
      request,
      options,
    ));
  }
}
