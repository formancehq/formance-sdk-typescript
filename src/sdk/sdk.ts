/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity } from "../lib/security.js";
import { Auth } from "./auth.js";
import { Ledger } from "./ledger.js";
import * as operations from "./models/operations/index.js";
import { Orchestration } from "./orchestration.js";
import { Payments } from "./payments.js";
import { Reconciliation } from "./reconciliation.js";
import { Search } from "./search.js";
import { Wallets } from "./wallets.js";
import { Webhooks } from "./webhooks.js";

export class SDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _auth?: Auth;
    get auth(): Auth {
        return (this._auth ??= new Auth(this.options$));
    }

    private _ledger?: Ledger;
    get ledger(): Ledger {
        return (this._ledger ??= new Ledger(this.options$));
    }

    private _orchestration?: Orchestration;
    get orchestration(): Orchestration {
        return (this._orchestration ??= new Orchestration(this.options$));
    }

    private _payments?: Payments;
    get payments(): Payments {
        return (this._payments ??= new Payments(this.options$));
    }

    private _reconciliation?: Reconciliation;
    get reconciliation(): Reconciliation {
        return (this._reconciliation ??= new Reconciliation(this.options$));
    }

    private _search?: Search;
    get search(): Search {
        return (this._search ??= new Search(this.options$));
    }

    private _wallets?: Wallets;
    get wallets(): Wallets {
        return (this._wallets ??= new Wallets(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    /**
     * Retrieve OpenID connect well-knowns.
     */
    async getOIDCWellKnowns(
        options?: RequestOptions
    ): Promise<operations.GetOIDCWellKnownsResponse> {
        const path$ = this.templateURLComponent("/api/auth/.well-known/openid-configuration")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "getOIDCWellKnowns",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetOIDCWellKnownsResponse>()
            .void(200, operations.GetOIDCWellKnownsResponse$inboundSchema)
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Show stack version information
     */
    async getVersions(options?: RequestOptions): Promise<operations.GetVersionsResponse> {
        const path$ = this.templateURLComponent("/versions")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const authorization$ = await extractSecurity(this.options$.authorization);
        const security$ = authorization$ == null ? {} : { authorization: authorization$ };
        const context = {
            operationID: "getVersions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetVersionsResponse>()
            .json(200, operations.GetVersionsResponse$inboundSchema, { key: "GetVersionsResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
