/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import { Auth } from "./auth";
import { Ledger } from "./ledger";
import { Orchestration } from "./orchestration";
import { Payments } from "./payments";
import { Reconciliation } from "./reconciliation";
import { Search } from "./search";
import { Wallets } from "./wallets";
import { Webhooks } from "./webhooks";

export class SDK extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }

    private _auth?: Auth;
    get auth() {
        return (this._auth ??= new Auth(this.options$));
    }

    private _ledger?: Ledger;
    get ledger() {
        return (this._ledger ??= new Ledger(this.options$));
    }

    private _orchestration?: Orchestration;
    get orchestration() {
        return (this._orchestration ??= new Orchestration(this.options$));
    }

    private _payments?: Payments;
    get payments() {
        return (this._payments ??= new Payments(this.options$));
    }

    private _reconciliation?: Reconciliation;
    get reconciliation() {
        return (this._reconciliation ??= new Reconciliation(this.options$));
    }

    private _search?: Search;
    get search() {
        return (this._search ??= new Search(this.options$));
    }

    private _wallets?: Wallets;
    get wallets() {
        return (this._wallets ??= new Wallets(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks() {
        return (this._webhooks ??= new Webhooks(this.options$));
    }
    /**
     * Show stack version information
     */
    async getVersions(options?: RequestOptions): Promise<operations.GetVersionsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/versions")();

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetVersionsResponse$.inboundSchema.parse({
                ...responseFields$,
                GetVersionsResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async getApiAuthWellKnownOpenidConfiguration(
        options?: RequestOptions
    ): Promise<operations.GetApiAuthWellKnownOpenidConfigurationResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const path$ = this.templateURLComponent("/api/auth/.well-known/openid-configuration")();

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.GetApiAuthWellKnownOpenidConfigurationResponse$.inboundSchema.parse(
            responseFields$
        );
    }
}
