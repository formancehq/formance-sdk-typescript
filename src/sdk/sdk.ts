/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import { Auth } from "./auth";
import { Ledger } from "./ledger";
import * as errors from "./models/errors";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { Orchestration } from "./orchestration";
import { Payments } from "./payments";
import { Reconciliation } from "./reconciliation";
import { Search } from "./search";
import { Wallets } from "./wallets";
import { Webhooks } from "./webhooks";

export class Formance extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _auth?: Auth;
    get auth(): Auth {
        return (this._auth ??= new Auth(this.options$));
    }

    private _ledger?: Ledger;
    get ledger(): Ledger {
        return (this._ledger ??= new Ledger(this.options$));
    }

    private _orchestration?: Orchestration;
    get orchestration(): Orchestration {
        return (this._orchestration ??= new Orchestration(this.options$));
    }

    private _payments?: Payments;
    get payments(): Payments {
        return (this._payments ??= new Payments(this.options$));
    }

    private _reconciliation?: Reconciliation;
    get reconciliation(): Reconciliation {
        return (this._reconciliation ??= new Reconciliation(this.options$));
    }

    private _search?: Search;
    get search(): Search {
        return (this._search ??= new Search(this.options$));
    }

    private _wallets?: Wallets;
    get wallets(): Wallets {
        return (this._wallets ??= new Wallets(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    /**
     * Retrieve OpenID connect well-knowns.
     */
    async getOIDCWellKnowns(
        options?: RequestOptions
    ): Promise<operations.GetOIDCWellKnownsResponse | void> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const path$ = this.templateURLComponent("/api/auth/.well-known/openid-configuration")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getOIDCWellKnowns",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        if (this.matchStatusCode(response, 200)) {
            return;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    /**
     * Show stack version information
     */
    async getVersions(options?: RequestOptions): Promise<shared.GetVersionsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/versions")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getVersions",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return shared.GetVersionsResponse$.inboundSchema.parse(val$);
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }
}
