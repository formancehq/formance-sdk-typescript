/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reconciliationCreatePolicy } from "../funcs/reconciliationCreatePolicy.js";
import { reconciliationDeletePolicy } from "../funcs/reconciliationDeletePolicy.js";
import { reconciliationGetPolicy } from "../funcs/reconciliationGetPolicy.js";
import { reconciliationGetReconciliation } from "../funcs/reconciliationGetReconciliation.js";
import { reconciliationListPolicies } from "../funcs/reconciliationListPolicies.js";
import { reconciliationListReconciliations } from "../funcs/reconciliationListReconciliations.js";
import { reconciliationReconcile } from "../funcs/reconciliationReconcile.js";
import { reconciliationReconciliationgetServerInfo } from "../funcs/reconciliationReconciliationgetServerInfo.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Reconciliation extends ClientSDK {
    /**
     * Create a policy
     *
     * @remarks
     * Create a policy
     */
    async createPolicy(
        request: shared.PolicyRequest,
        options?: RequestOptions
    ): Promise<operations.CreatePolicyResponse> {
        return unwrapAsync(reconciliationCreatePolicy(this, request, options));
    }

    /**
     * Delete a policy
     *
     * @remarks
     * Delete a policy by its id.
     */
    async deletePolicy(
        request: operations.DeletePolicyRequest,
        options?: RequestOptions
    ): Promise<operations.DeletePolicyResponse> {
        return unwrapAsync(reconciliationDeletePolicy(this, request, options));
    }

    /**
     * Get a policy
     */
    async getPolicy(
        request: operations.GetPolicyRequest,
        options?: RequestOptions
    ): Promise<operations.GetPolicyResponse> {
        return unwrapAsync(reconciliationGetPolicy(this, request, options));
    }

    /**
     * Get a reconciliation
     */
    async getReconciliation(
        request: operations.GetReconciliationRequest,
        options?: RequestOptions
    ): Promise<operations.GetReconciliationResponse> {
        return unwrapAsync(reconciliationGetReconciliation(this, request, options));
    }

    /**
     * List policies
     */
    async listPolicies(
        request: operations.ListPoliciesRequest,
        options?: RequestOptions
    ): Promise<operations.ListPoliciesResponse> {
        return unwrapAsync(reconciliationListPolicies(this, request, options));
    }

    /**
     * List reconciliations
     */
    async listReconciliations(
        request: operations.ListReconciliationsRequest,
        options?: RequestOptions
    ): Promise<operations.ListReconciliationsResponse> {
        return unwrapAsync(reconciliationListReconciliations(this, request, options));
    }

    /**
     * Reconcile using a policy
     *
     * @remarks
     * Reconcile using a policy
     */
    async reconcile(
        request: operations.ReconcileRequest,
        options?: RequestOptions
    ): Promise<operations.ReconcileResponse> {
        return unwrapAsync(reconciliationReconcile(this, request, options));
    }

    /**
     * Get server info
     */
    async reconciliationgetServerInfo(
        options?: RequestOptions
    ): Promise<operations.ReconciliationgetServerInfoResponse> {
        return unwrapAsync(reconciliationReconciliationgetServerInfo(this, options));
    }
}
