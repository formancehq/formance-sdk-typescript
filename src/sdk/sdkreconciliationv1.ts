/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reconciliationV1CreatePolicy } from "../funcs/reconciliationV1CreatePolicy.js";
import { reconciliationV1DeletePolicy } from "../funcs/reconciliationV1DeletePolicy.js";
import { reconciliationV1GetPolicy } from "../funcs/reconciliationV1GetPolicy.js";
import { reconciliationV1GetReconciliation } from "../funcs/reconciliationV1GetReconciliation.js";
import { reconciliationV1ListPolicies } from "../funcs/reconciliationV1ListPolicies.js";
import { reconciliationV1ListReconciliations } from "../funcs/reconciliationV1ListReconciliations.js";
import { reconciliationV1Reconcile } from "../funcs/reconciliationV1Reconcile.js";
import { reconciliationV1ReconciliationgetServerInfo } from "../funcs/reconciliationV1ReconciliationgetServerInfo.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class SDKReconciliationV1 extends ClientSDK {
  /**
   * Create a policy
   *
   * @remarks
   * Create a policy
   */
  async createPolicy(
    request: shared.PolicyRequest,
    options?: RequestOptions,
  ): Promise<operations.CreatePolicyResponse> {
    return unwrapAsync(reconciliationV1CreatePolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a policy
   *
   * @remarks
   * Delete a policy by its id.
   */
  async deletePolicy(
    request: operations.DeletePolicyRequest,
    options?: RequestOptions,
  ): Promise<operations.DeletePolicyResponse> {
    return unwrapAsync(reconciliationV1DeletePolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a policy
   */
  async getPolicy(
    request: operations.GetPolicyRequest,
    options?: RequestOptions,
  ): Promise<operations.GetPolicyResponse> {
    return unwrapAsync(reconciliationV1GetPolicy(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a reconciliation
   */
  async getReconciliation(
    request: operations.GetReconciliationRequest,
    options?: RequestOptions,
  ): Promise<operations.GetReconciliationResponse> {
    return unwrapAsync(reconciliationV1GetReconciliation(
      this,
      request,
      options,
    ));
  }

  /**
   * List policies
   */
  async listPolicies(
    request: operations.ListPoliciesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListPoliciesResponse> {
    return unwrapAsync(reconciliationV1ListPolicies(
      this,
      request,
      options,
    ));
  }

  /**
   * List reconciliations
   */
  async listReconciliations(
    request: operations.ListReconciliationsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListReconciliationsResponse> {
    return unwrapAsync(reconciliationV1ListReconciliations(
      this,
      request,
      options,
    ));
  }

  /**
   * Reconcile using a policy
   *
   * @remarks
   * Reconcile using a policy
   */
  async reconcile(
    request: operations.ReconcileRequest,
    options?: RequestOptions,
  ): Promise<operations.ReconcileResponse> {
    return unwrapAsync(reconciliationV1Reconcile(
      this,
      request,
      options,
    ));
  }

  /**
   * Get server info
   */
  async reconciliationgetServerInfo(
    options?: RequestOptions,
  ): Promise<operations.ReconciliationgetServerInfoResponse> {
    return unwrapAsync(reconciliationV1ReconciliationgetServerInfo(
      this,
      options,
    ));
  }
}
