/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { orchestrationCancelEvent } from "../funcs/orchestrationCancelEvent.js";
import { orchestrationCreateTrigger } from "../funcs/orchestrationCreateTrigger.js";
import { orchestrationCreateWorkflow } from "../funcs/orchestrationCreateWorkflow.js";
import { orchestrationDeleteTrigger } from "../funcs/orchestrationDeleteTrigger.js";
import { orchestrationDeleteWorkflow } from "../funcs/orchestrationDeleteWorkflow.js";
import { orchestrationGetInstance } from "../funcs/orchestrationGetInstance.js";
import { orchestrationGetInstanceHistory } from "../funcs/orchestrationGetInstanceHistory.js";
import { orchestrationGetInstanceStageHistory } from "../funcs/orchestrationGetInstanceStageHistory.js";
import { orchestrationGetWorkflow } from "../funcs/orchestrationGetWorkflow.js";
import { orchestrationListInstances } from "../funcs/orchestrationListInstances.js";
import { orchestrationListTriggers } from "../funcs/orchestrationListTriggers.js";
import { orchestrationListTriggersOccurrences } from "../funcs/orchestrationListTriggersOccurrences.js";
import { orchestrationListWorkflows } from "../funcs/orchestrationListWorkflows.js";
import { orchestrationOrchestrationgetServerInfo } from "../funcs/orchestrationOrchestrationgetServerInfo.js";
import { orchestrationReadTrigger } from "../funcs/orchestrationReadTrigger.js";
import { orchestrationRunWorkflow } from "../funcs/orchestrationRunWorkflow.js";
import { orchestrationSendEvent } from "../funcs/orchestrationSendEvent.js";
import { orchestrationTestTrigger } from "../funcs/orchestrationTestTrigger.js";
import { orchestrationV2CancelEvent } from "../funcs/orchestrationV2CancelEvent.js";
import { orchestrationV2CreateTrigger } from "../funcs/orchestrationV2CreateTrigger.js";
import { orchestrationV2CreateWorkflow } from "../funcs/orchestrationV2CreateWorkflow.js";
import { orchestrationV2DeleteTrigger } from "../funcs/orchestrationV2DeleteTrigger.js";
import { orchestrationV2DeleteWorkflow } from "../funcs/orchestrationV2DeleteWorkflow.js";
import { orchestrationV2GetInstance } from "../funcs/orchestrationV2GetInstance.js";
import { orchestrationV2GetInstanceHistory } from "../funcs/orchestrationV2GetInstanceHistory.js";
import { orchestrationV2GetInstanceStageHistory } from "../funcs/orchestrationV2GetInstanceStageHistory.js";
import { orchestrationV2GetServerInfo } from "../funcs/orchestrationV2GetServerInfo.js";
import { orchestrationV2GetWorkflow } from "../funcs/orchestrationV2GetWorkflow.js";
import { orchestrationV2ListInstances } from "../funcs/orchestrationV2ListInstances.js";
import { orchestrationV2ListTriggers } from "../funcs/orchestrationV2ListTriggers.js";
import { orchestrationV2ListTriggersOccurrences } from "../funcs/orchestrationV2ListTriggersOccurrences.js";
import { orchestrationV2ListWorkflows } from "../funcs/orchestrationV2ListWorkflows.js";
import { orchestrationV2ReadTrigger } from "../funcs/orchestrationV2ReadTrigger.js";
import { orchestrationV2RunWorkflow } from "../funcs/orchestrationV2RunWorkflow.js";
import { orchestrationV2SendEvent } from "../funcs/orchestrationV2SendEvent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Orchestration extends ClientSDK {
  /**
   * Cancel a running workflow
   *
   * @remarks
   * Cancel a running workflow
   */
  async cancelEvent(
    request: operations.CancelEventRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelEventResponse> {
    return unwrapAsync(orchestrationCancelEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Create trigger
   *
   * @remarks
   * Create trigger
   */
  async createTrigger(
    request?: shared.TriggerData | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateTriggerResponse> {
    return unwrapAsync(orchestrationCreateTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Create workflow
   *
   * @remarks
   * Create a workflow
   */
  async createWorkflow(
    request?: shared.CreateWorkflowRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateWorkflowResponse> {
    return unwrapAsync(orchestrationCreateWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete trigger
   *
   * @remarks
   * Read trigger
   */
  async deleteTrigger(
    request: operations.DeleteTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteTriggerResponse> {
    return unwrapAsync(orchestrationDeleteTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a flow by id
   *
   * @remarks
   * Delete a flow by id
   */
  async deleteWorkflow(
    request: operations.DeleteWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteWorkflowResponse> {
    return unwrapAsync(orchestrationDeleteWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance by id
   *
   * @remarks
   * Get a workflow instance by id
   */
  async getInstance(
    request: operations.GetInstanceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInstanceResponse> {
    return unwrapAsync(orchestrationGetInstance(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance history by id
   *
   * @remarks
   * Get a workflow instance history by id
   */
  async getInstanceHistory(
    request: operations.GetInstanceHistoryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInstanceHistoryResponse> {
    return unwrapAsync(orchestrationGetInstanceHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance stage history
   *
   * @remarks
   * Get a workflow instance stage history
   */
  async getInstanceStageHistory(
    request: operations.GetInstanceStageHistoryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInstanceStageHistoryResponse> {
    return unwrapAsync(orchestrationGetInstanceStageHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a flow by id
   *
   * @remarks
   * Get a flow by id
   */
  async getWorkflow(
    request: operations.GetWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWorkflowResponse> {
    return unwrapAsync(orchestrationGetWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * List instances of a workflow
   *
   * @remarks
   * List instances of a workflow
   */
  async listInstances(
    request: operations.ListInstancesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListInstancesResponse> {
    return unwrapAsync(orchestrationListInstances(
      this,
      request,
      options,
    ));
  }

  /**
   * List triggers
   *
   * @remarks
   * List triggers
   */
  async listTriggers(
    request: operations.ListTriggersRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTriggersResponse> {
    return unwrapAsync(orchestrationListTriggers(
      this,
      request,
      options,
    ));
  }

  /**
   * List triggers occurrences
   *
   * @remarks
   * List triggers occurrences
   */
  async listTriggersOccurrences(
    request: operations.ListTriggersOccurrencesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTriggersOccurrencesResponse> {
    return unwrapAsync(orchestrationListTriggersOccurrences(
      this,
      request,
      options,
    ));
  }

  /**
   * List registered workflows
   *
   * @remarks
   * List registered workflows
   */
  async listWorkflows(
    options?: RequestOptions,
  ): Promise<operations.ListWorkflowsResponse> {
    return unwrapAsync(orchestrationListWorkflows(
      this,
      options,
    ));
  }

  /**
   * Get server info
   */
  async orchestrationgetServerInfo(
    options?: RequestOptions,
  ): Promise<operations.OrchestrationgetServerInfoResponse> {
    return unwrapAsync(orchestrationOrchestrationgetServerInfo(
      this,
      options,
    ));
  }

  /**
   * Read trigger
   *
   * @remarks
   * Read trigger
   */
  async readTrigger(
    request: operations.ReadTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.ReadTriggerResponse> {
    return unwrapAsync(orchestrationReadTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Run workflow
   *
   * @remarks
   * Run workflow
   */
  async runWorkflow(
    request: operations.RunWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.RunWorkflowResponse> {
    return unwrapAsync(orchestrationRunWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Send an event to a running workflow
   *
   * @remarks
   * Send an event to a running workflow
   */
  async sendEvent(
    request: operations.SendEventRequest,
    options?: RequestOptions,
  ): Promise<operations.SendEventResponse> {
    return unwrapAsync(orchestrationSendEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Test trigger
   *
   * @remarks
   * Test trigger
   */
  async testTrigger(
    request: operations.TestTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.TestTriggerResponse> {
    return unwrapAsync(orchestrationTestTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a running workflow
   *
   * @remarks
   * Cancel a running workflow
   */
  async v2CancelEvent(
    request: operations.V2CancelEventRequest,
    options?: RequestOptions,
  ): Promise<operations.V2CancelEventResponse> {
    return unwrapAsync(orchestrationV2CancelEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Create trigger
   *
   * @remarks
   * Create trigger
   */
  async v2CreateTrigger(
    request?: shared.V2TriggerData | undefined,
    options?: RequestOptions,
  ): Promise<operations.V2CreateTriggerResponse> {
    return unwrapAsync(orchestrationV2CreateTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Create workflow
   *
   * @remarks
   * Create a workflow
   */
  async v2CreateWorkflow(
    request?: shared.V2CreateWorkflowRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V2CreateWorkflowResponse> {
    return unwrapAsync(orchestrationV2CreateWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete trigger
   *
   * @remarks
   * Read trigger
   */
  async v2DeleteTrigger(
    request: operations.V2DeleteTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.V2DeleteTriggerResponse> {
    return unwrapAsync(orchestrationV2DeleteTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a flow by id
   *
   * @remarks
   * Delete a flow by id
   */
  async v2DeleteWorkflow(
    request: operations.V2DeleteWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.V2DeleteWorkflowResponse> {
    return unwrapAsync(orchestrationV2DeleteWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance by id
   *
   * @remarks
   * Get a workflow instance by id
   */
  async v2GetInstance(
    request: operations.V2GetInstanceRequest,
    options?: RequestOptions,
  ): Promise<operations.V2GetInstanceResponse> {
    return unwrapAsync(orchestrationV2GetInstance(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance history by id
   *
   * @remarks
   * Get a workflow instance history by id
   */
  async v2GetInstanceHistory(
    request: operations.V2GetInstanceHistoryRequest,
    options?: RequestOptions,
  ): Promise<operations.V2GetInstanceHistoryResponse> {
    return unwrapAsync(orchestrationV2GetInstanceHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a workflow instance stage history
   *
   * @remarks
   * Get a workflow instance stage history
   */
  async v2GetInstanceStageHistory(
    request: operations.V2GetInstanceStageHistoryRequest,
    options?: RequestOptions,
  ): Promise<operations.V2GetInstanceStageHistoryResponse> {
    return unwrapAsync(orchestrationV2GetInstanceStageHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get server info
   */
  async v2GetServerInfo(
    options?: RequestOptions,
  ): Promise<operations.V2GetServerInfoResponse> {
    return unwrapAsync(orchestrationV2GetServerInfo(
      this,
      options,
    ));
  }

  /**
   * Get a flow by id
   *
   * @remarks
   * Get a flow by id
   */
  async v2GetWorkflow(
    request: operations.V2GetWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.V2GetWorkflowResponse> {
    return unwrapAsync(orchestrationV2GetWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * List instances of a workflow
   *
   * @remarks
   * List instances of a workflow
   */
  async v2ListInstances(
    request: operations.V2ListInstancesRequest,
    options?: RequestOptions,
  ): Promise<operations.V2ListInstancesResponse> {
    return unwrapAsync(orchestrationV2ListInstances(
      this,
      request,
      options,
    ));
  }

  /**
   * List triggers
   *
   * @remarks
   * List triggers
   */
  async v2ListTriggers(
    request: operations.V2ListTriggersRequest,
    options?: RequestOptions,
  ): Promise<operations.V2ListTriggersResponse> {
    return unwrapAsync(orchestrationV2ListTriggers(
      this,
      request,
      options,
    ));
  }

  /**
   * List triggers occurrences
   *
   * @remarks
   * List triggers occurrences
   */
  async v2ListTriggersOccurrences(
    request: operations.V2ListTriggersOccurrencesRequest,
    options?: RequestOptions,
  ): Promise<operations.V2ListTriggersOccurrencesResponse> {
    return unwrapAsync(orchestrationV2ListTriggersOccurrences(
      this,
      request,
      options,
    ));
  }

  /**
   * List registered workflows
   *
   * @remarks
   * List registered workflows
   */
  async v2ListWorkflows(
    request: operations.V2ListWorkflowsRequest,
    options?: RequestOptions,
  ): Promise<operations.V2ListWorkflowsResponse> {
    return unwrapAsync(orchestrationV2ListWorkflows(
      this,
      request,
      options,
    ));
  }

  /**
   * Read trigger
   *
   * @remarks
   * Read trigger
   */
  async v2ReadTrigger(
    request: operations.V2ReadTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.V2ReadTriggerResponse> {
    return unwrapAsync(orchestrationV2ReadTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Run workflow
   *
   * @remarks
   * Run workflow
   */
  async v2RunWorkflow(
    request: operations.V2RunWorkflowRequest,
    options?: RequestOptions,
  ): Promise<operations.V2RunWorkflowResponse> {
    return unwrapAsync(orchestrationV2RunWorkflow(
      this,
      request,
      options,
    ));
  }

  /**
   * Send an event to a running workflow
   *
   * @remarks
   * Send an event to a running workflow
   */
  async v2SendEvent(
    request: operations.V2SendEventRequest,
    options?: RequestOptions,
  ): Promise<operations.V2SendEventResponse> {
    return unwrapAsync(orchestrationV2SendEvent(
      this,
      request,
      options,
    ));
  }
}
