/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksV1ActivateConfig } from "../funcs/webhooksV1ActivateConfig.js";
import { webhooksV1ChangeConfigSecret } from "../funcs/webhooksV1ChangeConfigSecret.js";
import { webhooksV1DeactivateConfig } from "../funcs/webhooksV1DeactivateConfig.js";
import { webhooksV1DeleteConfig } from "../funcs/webhooksV1DeleteConfig.js";
import { webhooksV1GetManyConfigs } from "../funcs/webhooksV1GetManyConfigs.js";
import { webhooksV1InsertConfig } from "../funcs/webhooksV1InsertConfig.js";
import { webhooksV1TestConfig } from "../funcs/webhooksV1TestConfig.js";
import { webhooksV1UpdateConfig } from "../funcs/webhooksV1UpdateConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class SDKWebhooksV1 extends ClientSDK {
  /**
   * Activate one config
   *
   * @remarks
   * Activate a webhooks config by ID, to start receiving webhooks to its endpoint.
   */
  async activateConfig(
    request: operations.ActivateConfigRequest,
    options?: RequestOptions,
  ): Promise<operations.ActivateConfigResponse> {
    return unwrapAsync(webhooksV1ActivateConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Change the signing secret of a config
   *
   * @remarks
   * Change the signing secret of the endpoint of a webhooks config.
   *
   * If not passed or empty, a secret is automatically generated.
   * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
   */
  async changeConfigSecret(
    request: operations.ChangeConfigSecretRequest,
    options?: RequestOptions,
  ): Promise<operations.ChangeConfigSecretResponse> {
    return unwrapAsync(webhooksV1ChangeConfigSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate one config
   *
   * @remarks
   * Deactivate a webhooks config by ID, to stop receiving webhooks to its endpoint.
   */
  async deactivateConfig(
    request: operations.DeactivateConfigRequest,
    options?: RequestOptions,
  ): Promise<operations.DeactivateConfigResponse> {
    return unwrapAsync(webhooksV1DeactivateConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete one config
   *
   * @remarks
   * Delete a webhooks config by ID.
   */
  async deleteConfig(
    request: operations.DeleteConfigRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteConfigResponse> {
    return unwrapAsync(webhooksV1DeleteConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Get many configs
   *
   * @remarks
   * Sorted by updated date descending
   */
  async getManyConfigs(
    request: operations.GetManyConfigsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetManyConfigsResponse> {
    return unwrapAsync(webhooksV1GetManyConfigs(
      this,
      request,
      options,
    ));
  }

  /**
   * Insert a new config
   *
   * @remarks
   * Insert a new webhooks config.
   *
   * The endpoint should be a valid https URL and be unique.
   *
   * The secret is the endpoint's verification secret.
   * If not passed or empty, a secret is automatically generated.
   * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
   *
   * All eventTypes are converted to lower-case when inserted.
   */
  async insertConfig(
    request: shared.ConfigUser,
    options?: RequestOptions,
  ): Promise<operations.InsertConfigResponse> {
    return unwrapAsync(webhooksV1InsertConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Test one config
   *
   * @remarks
   * Test a config by sending a webhook to its endpoint.
   */
  async testConfig(
    request: operations.TestConfigRequest,
    options?: RequestOptions,
  ): Promise<operations.TestConfigResponse> {
    return unwrapAsync(webhooksV1TestConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Update one config
   *
   * @remarks
   * Update a webhooks config by ID.
   */
  async updateConfig(
    request: operations.UpdateConfigRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateConfigResponse> {
    return unwrapAsync(webhooksV1UpdateConfig(
      this,
      request,
      options,
    ));
  }
}
