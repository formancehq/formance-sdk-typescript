/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccount,
  BankAccount$inboundSchema,
  BankAccount$Outbound,
  BankAccount$outboundSchema,
} from "./bankaccount.js";

export type BankAccountsCursorCursor = {
  data: Array<BankAccount>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/**
 * OK
 */
export type BankAccountsCursor = {
  cursor: BankAccountsCursorCursor;
};

/** @internal */
export const BankAccountsCursorCursor$inboundSchema: z.ZodType<
  BankAccountsCursorCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(BankAccount$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type BankAccountsCursorCursor$Outbound = {
  data: Array<BankAccount$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const BankAccountsCursorCursor$outboundSchema: z.ZodType<
  BankAccountsCursorCursor$Outbound,
  z.ZodTypeDef,
  BankAccountsCursorCursor
> = z.object({
  data: z.array(BankAccount$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountsCursorCursor$ {
  /** @deprecated use `BankAccountsCursorCursor$inboundSchema` instead. */
  export const inboundSchema = BankAccountsCursorCursor$inboundSchema;
  /** @deprecated use `BankAccountsCursorCursor$outboundSchema` instead. */
  export const outboundSchema = BankAccountsCursorCursor$outboundSchema;
  /** @deprecated use `BankAccountsCursorCursor$Outbound` instead. */
  export type Outbound = BankAccountsCursorCursor$Outbound;
}

export function bankAccountsCursorCursorToJSON(
  bankAccountsCursorCursor: BankAccountsCursorCursor,
): string {
  return JSON.stringify(
    BankAccountsCursorCursor$outboundSchema.parse(bankAccountsCursorCursor),
  );
}

export function bankAccountsCursorCursorFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountsCursorCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountsCursorCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountsCursorCursor' from JSON`,
  );
}

/** @internal */
export const BankAccountsCursor$inboundSchema: z.ZodType<
  BankAccountsCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => BankAccountsCursorCursor$inboundSchema),
});

/** @internal */
export type BankAccountsCursor$Outbound = {
  cursor: BankAccountsCursorCursor$Outbound;
};

/** @internal */
export const BankAccountsCursor$outboundSchema: z.ZodType<
  BankAccountsCursor$Outbound,
  z.ZodTypeDef,
  BankAccountsCursor
> = z.object({
  cursor: z.lazy(() => BankAccountsCursorCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountsCursor$ {
  /** @deprecated use `BankAccountsCursor$inboundSchema` instead. */
  export const inboundSchema = BankAccountsCursor$inboundSchema;
  /** @deprecated use `BankAccountsCursor$outboundSchema` instead. */
  export const outboundSchema = BankAccountsCursor$outboundSchema;
  /** @deprecated use `BankAccountsCursor$Outbound` instead. */
  export type Outbound = BankAccountsCursor$Outbound;
}

export function bankAccountsCursorToJSON(
  bankAccountsCursor: BankAccountsCursor,
): string {
  return JSON.stringify(
    BankAccountsCursor$outboundSchema.parse(bankAccountsCursor),
  );
}

export function bankAccountsCursorFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountsCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountsCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountsCursor' from JSON`,
  );
}
