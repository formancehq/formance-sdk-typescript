/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Security = {
  clientID?: string | undefined;
  clientSecret?: string | undefined;
  tokenURL?: string | undefined;
};

/** @internal */
export const Security$inboundSchema: z.ZodType<
  Security,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientID: z.string().optional(),
  clientSecret: z.string().optional(),
  tokenURL: z.string().default("/api/auth/oauth/token"),
});

/** @internal */
export type Security$Outbound = {
  clientID?: string | undefined;
  clientSecret?: string | undefined;
  tokenURL: string;
};

/** @internal */
export const Security$outboundSchema: z.ZodType<
  Security$Outbound,
  z.ZodTypeDef,
  Security
> = z.object({
  clientID: z.string().optional(),
  clientSecret: z.string().optional(),
  tokenURL: z.string().default("/api/auth/oauth/token"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Security$ {
  /** @deprecated use `Security$inboundSchema` instead. */
  export const inboundSchema = Security$inboundSchema;
  /** @deprecated use `Security$outboundSchema` instead. */
  export const outboundSchema = Security$outboundSchema;
  /** @deprecated use `Security$Outbound` instead. */
  export type Outbound = Security$Outbound;
}
