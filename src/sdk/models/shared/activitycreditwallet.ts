/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrchestrationCreditWalletRequest,
  OrchestrationCreditWalletRequest$inboundSchema,
  OrchestrationCreditWalletRequest$Outbound,
  OrchestrationCreditWalletRequest$outboundSchema,
} from "./orchestrationcreditwalletrequest.js";

export type ActivityCreditWallet = {
  data?: OrchestrationCreditWalletRequest | undefined;
  id?: string | undefined;
};

/** @internal */
export const ActivityCreditWallet$inboundSchema: z.ZodType<
  ActivityCreditWallet,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: OrchestrationCreditWalletRequest$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type ActivityCreditWallet$Outbound = {
  data?: OrchestrationCreditWalletRequest$Outbound | undefined;
  id?: string | undefined;
};

/** @internal */
export const ActivityCreditWallet$outboundSchema: z.ZodType<
  ActivityCreditWallet$Outbound,
  z.ZodTypeDef,
  ActivityCreditWallet
> = z.object({
  data: OrchestrationCreditWalletRequest$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityCreditWallet$ {
  /** @deprecated use `ActivityCreditWallet$inboundSchema` instead. */
  export const inboundSchema = ActivityCreditWallet$inboundSchema;
  /** @deprecated use `ActivityCreditWallet$outboundSchema` instead. */
  export const outboundSchema = ActivityCreditWallet$outboundSchema;
  /** @deprecated use `ActivityCreditWallet$Outbound` instead. */
  export type Outbound = ActivityCreditWallet$Outbound;
}

export function activityCreditWalletToJSON(
  activityCreditWallet: ActivityCreditWallet,
): string {
  return JSON.stringify(
    ActivityCreditWallet$outboundSchema.parse(activityCreditWallet),
  );
}

export function activityCreditWalletFromJSON(
  jsonString: string,
): SafeParseResult<ActivityCreditWallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityCreditWallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityCreditWallet' from JSON`,
  );
}
