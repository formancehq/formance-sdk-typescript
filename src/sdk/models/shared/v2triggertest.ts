/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class V2TriggerTestFilter extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    error?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "match" })
    match?: boolean;
}

export class V2TriggerTestVariables extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    error?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export class V2TriggerTest extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "filter" })
    @Type(() => V2TriggerTestFilter)
    filter?: V2TriggerTestFilter;

    @SpeakeasyMetadata({ elemType: V2TriggerTestVariables })
    @Expose({ name: "variables" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, V2TriggerTestVariables> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], V2TriggerTestVariables);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    variables?: Record<string, V2TriggerTestVariables>;
}
