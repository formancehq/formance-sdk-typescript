/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Filter = {
    error?: string | undefined;
    match?: boolean | undefined;
};

export type Variables = {
    error?: string | undefined;
    value?: string | undefined;
};

export type V2TriggerTest = {
    filter?: Filter | undefined;
    variables?: { [k: string]: Variables } | undefined;
};

/** @internal */
export namespace Filter$ {
    export const inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z.object({
        error: z.string().optional(),
        match: z.boolean().optional(),
    });

    export type Outbound = {
        error?: string | undefined;
        match?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Filter> = z.object({
        error: z.string().optional(),
        match: z.boolean().optional(),
    });
}

/** @internal */
export namespace Variables$ {
    export const inboundSchema: z.ZodType<Variables, z.ZodTypeDef, unknown> = z.object({
        error: z.string().optional(),
        value: z.string().optional(),
    });

    export type Outbound = {
        error?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Variables> = z.object({
        error: z.string().optional(),
        value: z.string().optional(),
    });
}

/** @internal */
export namespace V2TriggerTest$ {
    export const inboundSchema: z.ZodType<V2TriggerTest, z.ZodTypeDef, unknown> = z.object({
        filter: z.lazy(() => Filter$.inboundSchema).optional(),
        variables: z.record(z.lazy(() => Variables$.inboundSchema)).optional(),
    });

    export type Outbound = {
        filter?: Filter$.Outbound | undefined;
        variables?: { [k: string]: Variables$.Outbound } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2TriggerTest> = z.object({
        filter: z.lazy(() => Filter$.outboundSchema).optional(),
        variables: z.record(z.lazy(() => Variables$.outboundSchema)).optional(),
    });
}
