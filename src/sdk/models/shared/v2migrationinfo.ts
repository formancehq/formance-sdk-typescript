/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum V2MigrationInfoState {
    ToDo = "TO DO",
    Done = "DONE",
}

export type V2MigrationInfo = {
    date?: Date | undefined;
    name?: string | undefined;
    state?: V2MigrationInfoState | undefined;
    version?: number | undefined;
};

/** @internal */
export const V2MigrationInfoState$: z.ZodNativeEnum<typeof V2MigrationInfoState> =
    z.nativeEnum(V2MigrationInfoState);

/** @internal */
export namespace V2MigrationInfo$ {
    export type Inbound = {
        date?: string | undefined;
        name?: string | undefined;
        state?: V2MigrationInfoState | undefined;
        version?: number | undefined;
    };

    export const inboundSchema: z.ZodType<V2MigrationInfo, z.ZodTypeDef, Inbound> = z
        .object({
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            name: z.string().optional(),
            state: V2MigrationInfoState$.optional(),
            version: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });

    export type Outbound = {
        date?: string | undefined;
        name?: string | undefined;
        state?: V2MigrationInfoState | undefined;
        version?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2MigrationInfo> = z
        .object({
            date: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            name: z.string().optional(),
            state: V2MigrationInfoState$.optional(),
            version: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });
}
