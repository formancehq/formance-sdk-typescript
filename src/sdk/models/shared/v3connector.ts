/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3ConnectorConfig = {};

export type V3Connector = {
  config: V3ConnectorConfig;
  createdAt: Date;
  id: string;
  name: string;
  provider: string;
  reference: string;
  scheduledForDeletion: boolean;
};

/** @internal */
export const V3ConnectorConfig$inboundSchema: z.ZodType<
  V3ConnectorConfig,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type V3ConnectorConfig$Outbound = {};

/** @internal */
export const V3ConnectorConfig$outboundSchema: z.ZodType<
  V3ConnectorConfig$Outbound,
  z.ZodTypeDef,
  V3ConnectorConfig
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ConnectorConfig$ {
  /** @deprecated use `V3ConnectorConfig$inboundSchema` instead. */
  export const inboundSchema = V3ConnectorConfig$inboundSchema;
  /** @deprecated use `V3ConnectorConfig$outboundSchema` instead. */
  export const outboundSchema = V3ConnectorConfig$outboundSchema;
  /** @deprecated use `V3ConnectorConfig$Outbound` instead. */
  export type Outbound = V3ConnectorConfig$Outbound;
}

export function v3ConnectorConfigToJSON(
  v3ConnectorConfig: V3ConnectorConfig,
): string {
  return JSON.stringify(
    V3ConnectorConfig$outboundSchema.parse(v3ConnectorConfig),
  );
}

export function v3ConnectorConfigFromJSON(
  jsonString: string,
): SafeParseResult<V3ConnectorConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ConnectorConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ConnectorConfig' from JSON`,
  );
}

/** @internal */
export const V3Connector$inboundSchema: z.ZodType<
  V3Connector,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.lazy(() => V3ConnectorConfig$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  name: z.string(),
  provider: z.string(),
  reference: z.string(),
  scheduledForDeletion: z.boolean(),
});

/** @internal */
export type V3Connector$Outbound = {
  config: V3ConnectorConfig$Outbound;
  createdAt: string;
  id: string;
  name: string;
  provider: string;
  reference: string;
  scheduledForDeletion: boolean;
};

/** @internal */
export const V3Connector$outboundSchema: z.ZodType<
  V3Connector$Outbound,
  z.ZodTypeDef,
  V3Connector
> = z.object({
  config: z.lazy(() => V3ConnectorConfig$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  name: z.string(),
  provider: z.string(),
  reference: z.string(),
  scheduledForDeletion: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3Connector$ {
  /** @deprecated use `V3Connector$inboundSchema` instead. */
  export const inboundSchema = V3Connector$inboundSchema;
  /** @deprecated use `V3Connector$outboundSchema` instead. */
  export const outboundSchema = V3Connector$outboundSchema;
  /** @deprecated use `V3Connector$Outbound` instead. */
  export type Outbound = V3Connector$Outbound;
}

export function v3ConnectorToJSON(v3Connector: V3Connector): string {
  return JSON.stringify(V3Connector$outboundSchema.parse(v3Connector));
}

export function v3ConnectorFromJSON(
  jsonString: string,
): SafeParseResult<V3Connector, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3Connector$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3Connector' from JSON`,
  );
}
