/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    OrchestrationConnector,
    OrchestrationConnector$inboundSchema,
    OrchestrationConnector$outboundSchema,
} from "./orchestrationconnector.js";
import {
    OrchestrationPaymentAdjustment,
    OrchestrationPaymentAdjustment$inboundSchema,
    OrchestrationPaymentAdjustment$Outbound,
    OrchestrationPaymentAdjustment$outboundSchema,
} from "./orchestrationpaymentadjustment.js";
import {
    OrchestrationPaymentMetadata,
    OrchestrationPaymentMetadata$inboundSchema,
    OrchestrationPaymentMetadata$Outbound,
    OrchestrationPaymentMetadata$outboundSchema,
} from "./orchestrationpaymentmetadata.js";
import {
    OrchestrationPaymentStatus,
    OrchestrationPaymentStatus$inboundSchema,
    OrchestrationPaymentStatus$outboundSchema,
} from "./orchestrationpaymentstatus.js";
import * as z from "zod";

export type OrchestrationPaymentRaw = {};

export enum OrchestrationPaymentScheme {
    Visa = "visa",
    Mastercard = "mastercard",
    Amex = "amex",
    Diners = "diners",
    Discover = "discover",
    Jcb = "jcb",
    Unionpay = "unionpay",
    SepaDebit = "sepa debit",
    SepaCredit = "sepa credit",
    Sepa = "sepa",
    ApplePay = "apple pay",
    GooglePay = "google pay",
    A2a = "a2a",
    AchDebit = "ach debit",
    Ach = "ach",
    Rtp = "rtp",
    Unknown = "unknown",
    Other = "other",
}

export enum OrchestrationPaymentType {
    PayIn = "PAY-IN",
    Payout = "PAYOUT",
    Transfer = "TRANSFER",
    Other = "OTHER",
}

export type OrchestrationPayment = {
    adjustments: Array<OrchestrationPaymentAdjustment>;
    asset: string;
    connectorID: string;
    createdAt: Date;
    destinationAccountID: string;
    id: string;
    initialAmount: bigint;
    metadata: OrchestrationPaymentMetadata | null;
    provider?: OrchestrationConnector | undefined;
    raw: OrchestrationPaymentRaw | null;
    reference: string;
    scheme: OrchestrationPaymentScheme;
    sourceAccountID: string;
    status: OrchestrationPaymentStatus;
    type: OrchestrationPaymentType;
};

/** @internal */
export const OrchestrationPaymentRaw$inboundSchema: z.ZodType<
    OrchestrationPaymentRaw,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type OrchestrationPaymentRaw$Outbound = {};

/** @internal */
export const OrchestrationPaymentRaw$outboundSchema: z.ZodType<
    OrchestrationPaymentRaw$Outbound,
    z.ZodTypeDef,
    OrchestrationPaymentRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationPaymentRaw$ {
    /** @deprecated use `OrchestrationPaymentRaw$inboundSchema` instead. */
    export const inboundSchema = OrchestrationPaymentRaw$inboundSchema;
    /** @deprecated use `OrchestrationPaymentRaw$outboundSchema` instead. */
    export const outboundSchema = OrchestrationPaymentRaw$outboundSchema;
    /** @deprecated use `OrchestrationPaymentRaw$Outbound` instead. */
    export type Outbound = OrchestrationPaymentRaw$Outbound;
}

/** @internal */
export const OrchestrationPaymentScheme$inboundSchema: z.ZodNativeEnum<
    typeof OrchestrationPaymentScheme
> = z.nativeEnum(OrchestrationPaymentScheme);

/** @internal */
export const OrchestrationPaymentScheme$outboundSchema: z.ZodNativeEnum<
    typeof OrchestrationPaymentScheme
> = OrchestrationPaymentScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationPaymentScheme$ {
    /** @deprecated use `OrchestrationPaymentScheme$inboundSchema` instead. */
    export const inboundSchema = OrchestrationPaymentScheme$inboundSchema;
    /** @deprecated use `OrchestrationPaymentScheme$outboundSchema` instead. */
    export const outboundSchema = OrchestrationPaymentScheme$outboundSchema;
}

/** @internal */
export const OrchestrationPaymentType$inboundSchema: z.ZodNativeEnum<
    typeof OrchestrationPaymentType
> = z.nativeEnum(OrchestrationPaymentType);

/** @internal */
export const OrchestrationPaymentType$outboundSchema: z.ZodNativeEnum<
    typeof OrchestrationPaymentType
> = OrchestrationPaymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationPaymentType$ {
    /** @deprecated use `OrchestrationPaymentType$inboundSchema` instead. */
    export const inboundSchema = OrchestrationPaymentType$inboundSchema;
    /** @deprecated use `OrchestrationPaymentType$outboundSchema` instead. */
    export const outboundSchema = OrchestrationPaymentType$outboundSchema;
}

/** @internal */
export const OrchestrationPayment$inboundSchema: z.ZodType<
    OrchestrationPayment,
    z.ZodTypeDef,
    unknown
> = z.object({
    adjustments: z.array(OrchestrationPaymentAdjustment$inboundSchema),
    asset: z.string(),
    connectorID: z.string(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    destinationAccountID: z.string(),
    id: z.string(),
    initialAmount: z.number().transform((v) => BigInt(v)),
    metadata: z.nullable(OrchestrationPaymentMetadata$inboundSchema),
    provider: OrchestrationConnector$inboundSchema.optional(),
    raw: z.nullable(z.lazy(() => OrchestrationPaymentRaw$inboundSchema)),
    reference: z.string(),
    scheme: OrchestrationPaymentScheme$inboundSchema,
    sourceAccountID: z.string(),
    status: OrchestrationPaymentStatus$inboundSchema,
    type: OrchestrationPaymentType$inboundSchema,
});

/** @internal */
export type OrchestrationPayment$Outbound = {
    adjustments: Array<OrchestrationPaymentAdjustment$Outbound>;
    asset: string;
    connectorID: string;
    createdAt: string;
    destinationAccountID: string;
    id: string;
    initialAmount: number;
    metadata: OrchestrationPaymentMetadata$Outbound | null;
    provider?: string | undefined;
    raw: OrchestrationPaymentRaw$Outbound | null;
    reference: string;
    scheme: string;
    sourceAccountID: string;
    status: string;
    type: string;
};

/** @internal */
export const OrchestrationPayment$outboundSchema: z.ZodType<
    OrchestrationPayment$Outbound,
    z.ZodTypeDef,
    OrchestrationPayment
> = z.object({
    adjustments: z.array(OrchestrationPaymentAdjustment$outboundSchema),
    asset: z.string(),
    connectorID: z.string(),
    createdAt: z.date().transform((v) => v.toISOString()),
    destinationAccountID: z.string(),
    id: z.string(),
    initialAmount: z.bigint().transform((v) => Number(v)),
    metadata: z.nullable(OrchestrationPaymentMetadata$outboundSchema),
    provider: OrchestrationConnector$outboundSchema.optional(),
    raw: z.nullable(z.lazy(() => OrchestrationPaymentRaw$outboundSchema)),
    reference: z.string(),
    scheme: OrchestrationPaymentScheme$outboundSchema,
    sourceAccountID: z.string(),
    status: OrchestrationPaymentStatus$outboundSchema,
    type: OrchestrationPaymentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationPayment$ {
    /** @deprecated use `OrchestrationPayment$inboundSchema` instead. */
    export const inboundSchema = OrchestrationPayment$inboundSchema;
    /** @deprecated use `OrchestrationPayment$outboundSchema` instead. */
    export const outboundSchema = OrchestrationPayment$outboundSchema;
    /** @deprecated use `OrchestrationPayment$Outbound` instead. */
    export type Outbound = OrchestrationPayment$Outbound;
}
