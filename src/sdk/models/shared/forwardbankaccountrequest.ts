/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ForwardBankAccountRequest = {
  connectorID: string;
};

/** @internal */
export const ForwardBankAccountRequest$inboundSchema: z.ZodType<
  ForwardBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorID: z.string(),
});

/** @internal */
export type ForwardBankAccountRequest$Outbound = {
  connectorID: string;
};

/** @internal */
export const ForwardBankAccountRequest$outboundSchema: z.ZodType<
  ForwardBankAccountRequest$Outbound,
  z.ZodTypeDef,
  ForwardBankAccountRequest
> = z.object({
  connectorID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForwardBankAccountRequest$ {
  /** @deprecated use `ForwardBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = ForwardBankAccountRequest$inboundSchema;
  /** @deprecated use `ForwardBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = ForwardBankAccountRequest$outboundSchema;
  /** @deprecated use `ForwardBankAccountRequest$Outbound` instead. */
  export type Outbound = ForwardBankAccountRequest$Outbound;
}

export function forwardBankAccountRequestToJSON(
  forwardBankAccountRequest: ForwardBankAccountRequest,
): string {
  return JSON.stringify(
    ForwardBankAccountRequest$outboundSchema.parse(forwardBankAccountRequest),
  );
}

export function forwardBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<ForwardBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForwardBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForwardBankAccountRequest' from JSON`,
  );
}
