/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3Balance = {
  accountID: string;
  asset: string;
  balance: bigint;
  createdAt: Date;
  lastUpdatedAt: Date;
};

/** @internal */
export const V3Balance$inboundSchema: z.ZodType<
  V3Balance,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  asset: z.string(),
  balance: z.number().transform(v => BigInt(v)),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  lastUpdatedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
});

/** @internal */
export type V3Balance$Outbound = {
  accountID: string;
  asset: string;
  balance: number;
  createdAt: string;
  lastUpdatedAt: string;
};

/** @internal */
export const V3Balance$outboundSchema: z.ZodType<
  V3Balance$Outbound,
  z.ZodTypeDef,
  V3Balance
> = z.object({
  accountID: z.string(),
  asset: z.string(),
  balance: z.bigint().transform(v => Number(v)),
  createdAt: z.date().transform(v => v.toISOString()),
  lastUpdatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3Balance$ {
  /** @deprecated use `V3Balance$inboundSchema` instead. */
  export const inboundSchema = V3Balance$inboundSchema;
  /** @deprecated use `V3Balance$outboundSchema` instead. */
  export const outboundSchema = V3Balance$outboundSchema;
  /** @deprecated use `V3Balance$Outbound` instead. */
  export type Outbound = V3Balance$Outbound;
}

export function v3BalanceToJSON(v3Balance: V3Balance): string {
  return JSON.stringify(V3Balance$outboundSchema.parse(v3Balance));
}

export function v3BalanceFromJSON(
  jsonString: string,
): SafeParseResult<V3Balance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3Balance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3Balance' from JSON`,
  );
}
