/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    ClientSecret,
    ClientSecret$inboundSchema,
    ClientSecret$Outbound,
    ClientSecret$outboundSchema,
} from "./clientsecret.js";
import * as z from "zod";

export type Client = {
    description?: string | undefined;
    id: string;
    metadata?: { [k: string]: any } | undefined;
    name: string;
    postLogoutRedirectUris?: Array<string> | undefined;
    public?: boolean | undefined;
    redirectUris?: Array<string> | undefined;
    scopes?: Array<string> | undefined;
    secrets?: Array<ClientSecret> | undefined;
    trusted?: boolean | undefined;
};

/** @internal */
export const Client$inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z.object({
    description: z.string().optional(),
    id: z.string(),
    metadata: z.record(z.any()).optional(),
    name: z.string(),
    postLogoutRedirectUris: z.array(z.string()).optional(),
    public: z.boolean().optional(),
    redirectUris: z.array(z.string()).optional(),
    scopes: z.array(z.string()).optional(),
    secrets: z.array(ClientSecret$inboundSchema).optional(),
    trusted: z.boolean().optional(),
});

/** @internal */
export type Client$Outbound = {
    description?: string | undefined;
    id: string;
    metadata?: { [k: string]: any } | undefined;
    name: string;
    postLogoutRedirectUris?: Array<string> | undefined;
    public?: boolean | undefined;
    redirectUris?: Array<string> | undefined;
    scopes?: Array<string> | undefined;
    secrets?: Array<ClientSecret$Outbound> | undefined;
    trusted?: boolean | undefined;
};

/** @internal */
export const Client$outboundSchema: z.ZodType<Client$Outbound, z.ZodTypeDef, Client> = z.object({
    description: z.string().optional(),
    id: z.string(),
    metadata: z.record(z.any()).optional(),
    name: z.string(),
    postLogoutRedirectUris: z.array(z.string()).optional(),
    public: z.boolean().optional(),
    redirectUris: z.array(z.string()).optional(),
    scopes: z.array(z.string()).optional(),
    secrets: z.array(ClientSecret$outboundSchema).optional(),
    trusted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Client$ {
    /** @deprecated use `Client$inboundSchema` instead. */
    export const inboundSchema = Client$inboundSchema;
    /** @deprecated use `Client$outboundSchema` instead. */
    export const outboundSchema = Client$outboundSchema;
    /** @deprecated use `Client$Outbound` instead. */
    export type Outbound = Client$Outbound;
}
