/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LedgerStorage, LedgerStorage$ } from "./ledgerstorage";
import { z } from "zod";

export type Config = {
    storage: LedgerStorage;
};

/** @internal */
export namespace Config$ {
    export type Inbound = {
        storage: LedgerStorage$.Inbound;
    };

    export const inboundSchema: z.ZodType<Config, z.ZodTypeDef, Inbound> = z
        .object({
            storage: LedgerStorage$.inboundSchema,
        })
        .transform((v) => {
            return {
                storage: v.storage,
            };
        });

    export type Outbound = {
        storage: LedgerStorage$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Config> = z
        .object({
            storage: LedgerStorage$.outboundSchema,
        })
        .transform((v) => {
            return {
                storage: v.storage,
            };
        });
}
