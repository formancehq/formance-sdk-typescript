/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3UninstallConnectorResponseData = {
  /**
   * Since this call is asynchronous, the response will contain the ID of the task that was created to uninstall the connector. You can use the task API to check the status of the task and get the results.
   *
   * @remarks
   */
  taskID: string;
};

export type V3UninstallConnectorResponse = {
  data: V3UninstallConnectorResponseData;
};

/** @internal */
export const V3UninstallConnectorResponseData$inboundSchema: z.ZodType<
  V3UninstallConnectorResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  taskID: z.string(),
});

/** @internal */
export type V3UninstallConnectorResponseData$Outbound = {
  taskID: string;
};

/** @internal */
export const V3UninstallConnectorResponseData$outboundSchema: z.ZodType<
  V3UninstallConnectorResponseData$Outbound,
  z.ZodTypeDef,
  V3UninstallConnectorResponseData
> = z.object({
  taskID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3UninstallConnectorResponseData$ {
  /** @deprecated use `V3UninstallConnectorResponseData$inboundSchema` instead. */
  export const inboundSchema = V3UninstallConnectorResponseData$inboundSchema;
  /** @deprecated use `V3UninstallConnectorResponseData$outboundSchema` instead. */
  export const outboundSchema = V3UninstallConnectorResponseData$outboundSchema;
  /** @deprecated use `V3UninstallConnectorResponseData$Outbound` instead. */
  export type Outbound = V3UninstallConnectorResponseData$Outbound;
}

export function v3UninstallConnectorResponseDataToJSON(
  v3UninstallConnectorResponseData: V3UninstallConnectorResponseData,
): string {
  return JSON.stringify(
    V3UninstallConnectorResponseData$outboundSchema.parse(
      v3UninstallConnectorResponseData,
    ),
  );
}

export function v3UninstallConnectorResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<V3UninstallConnectorResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3UninstallConnectorResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3UninstallConnectorResponseData' from JSON`,
  );
}

/** @internal */
export const V3UninstallConnectorResponse$inboundSchema: z.ZodType<
  V3UninstallConnectorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => V3UninstallConnectorResponseData$inboundSchema),
});

/** @internal */
export type V3UninstallConnectorResponse$Outbound = {
  data: V3UninstallConnectorResponseData$Outbound;
};

/** @internal */
export const V3UninstallConnectorResponse$outboundSchema: z.ZodType<
  V3UninstallConnectorResponse$Outbound,
  z.ZodTypeDef,
  V3UninstallConnectorResponse
> = z.object({
  data: z.lazy(() => V3UninstallConnectorResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3UninstallConnectorResponse$ {
  /** @deprecated use `V3UninstallConnectorResponse$inboundSchema` instead. */
  export const inboundSchema = V3UninstallConnectorResponse$inboundSchema;
  /** @deprecated use `V3UninstallConnectorResponse$outboundSchema` instead. */
  export const outboundSchema = V3UninstallConnectorResponse$outboundSchema;
  /** @deprecated use `V3UninstallConnectorResponse$Outbound` instead. */
  export type Outbound = V3UninstallConnectorResponse$Outbound;
}

export function v3UninstallConnectorResponseToJSON(
  v3UninstallConnectorResponse: V3UninstallConnectorResponse,
): string {
  return JSON.stringify(
    V3UninstallConnectorResponse$outboundSchema.parse(
      v3UninstallConnectorResponse,
    ),
  );
}

export function v3UninstallConnectorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3UninstallConnectorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3UninstallConnectorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3UninstallConnectorResponse' from JSON`,
  );
}
