/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reconciliation,
  Reconciliation$inboundSchema,
  Reconciliation$Outbound,
  Reconciliation$outboundSchema,
} from "./reconciliation.js";

/**
 * OK
 */
export type ReconciliationResponse = {
  data: Reconciliation;
};

/** @internal */
export const ReconciliationResponse$inboundSchema: z.ZodType<
  ReconciliationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: Reconciliation$inboundSchema,
});

/** @internal */
export type ReconciliationResponse$Outbound = {
  data: Reconciliation$Outbound;
};

/** @internal */
export const ReconciliationResponse$outboundSchema: z.ZodType<
  ReconciliationResponse$Outbound,
  z.ZodTypeDef,
  ReconciliationResponse
> = z.object({
  data: Reconciliation$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconciliationResponse$ {
  /** @deprecated use `ReconciliationResponse$inboundSchema` instead. */
  export const inboundSchema = ReconciliationResponse$inboundSchema;
  /** @deprecated use `ReconciliationResponse$outboundSchema` instead. */
  export const outboundSchema = ReconciliationResponse$outboundSchema;
  /** @deprecated use `ReconciliationResponse$Outbound` instead. */
  export type Outbound = ReconciliationResponse$Outbound;
}

export function reconciliationResponseToJSON(
  reconciliationResponse: ReconciliationResponse,
): string {
  return JSON.stringify(
    ReconciliationResponse$outboundSchema.parse(reconciliationResponse),
  );
}

export function reconciliationResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReconciliationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconciliationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconciliationResponse' from JSON`,
  );
}
