/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WalletsTransaction, WalletsTransaction$ } from "./walletstransaction";
import * as z from "zod";

export type GetTransactionsResponseCursor = {
    data: Array<WalletsTransaction>;
    hasMore?: boolean | undefined;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type GetTransactionsResponse = {
    cursor: GetTransactionsResponseCursor;
};

/** @internal */
export namespace GetTransactionsResponseCursor$ {
    export const inboundSchema: z.ZodType<GetTransactionsResponseCursor, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(WalletsTransaction$.inboundSchema),
            hasMore: z.boolean().optional(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });

    export type Outbound = {
        data: Array<WalletsTransaction$.Outbound>;
        hasMore?: boolean | undefined;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionsResponseCursor> =
        z.object({
            data: z.array(WalletsTransaction$.outboundSchema),
            hasMore: z.boolean().optional(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });
}

/** @internal */
export namespace GetTransactionsResponse$ {
    export const inboundSchema: z.ZodType<GetTransactionsResponse, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => GetTransactionsResponseCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: GetTransactionsResponseCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionsResponse> =
        z.object({
            cursor: z.lazy(() => GetTransactionsResponseCursor$.outboundSchema),
        });
}
