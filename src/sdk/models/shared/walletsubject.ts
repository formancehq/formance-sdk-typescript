/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WalletSubject = {
  balance?: string | undefined;
  identifier: string;
  type: string;
};

/** @internal */
export const WalletSubject$inboundSchema: z.ZodType<
  WalletSubject,
  z.ZodTypeDef,
  unknown
> = z.object({
  balance: z.string().optional(),
  identifier: z.string(),
  type: z.string(),
});

/** @internal */
export type WalletSubject$Outbound = {
  balance?: string | undefined;
  identifier: string;
  type: string;
};

/** @internal */
export const WalletSubject$outboundSchema: z.ZodType<
  WalletSubject$Outbound,
  z.ZodTypeDef,
  WalletSubject
> = z.object({
  balance: z.string().optional(),
  identifier: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletSubject$ {
  /** @deprecated use `WalletSubject$inboundSchema` instead. */
  export const inboundSchema = WalletSubject$inboundSchema;
  /** @deprecated use `WalletSubject$outboundSchema` instead. */
  export const outboundSchema = WalletSubject$outboundSchema;
  /** @deprecated use `WalletSubject$Outbound` instead. */
  export type Outbound = WalletSubject$Outbound;
}

export function walletSubjectToJSON(walletSubject: WalletSubject): string {
  return JSON.stringify(WalletSubject$outboundSchema.parse(walletSubject));
}

export function walletSubjectFromJSON(
  jsonString: string,
): SafeParseResult<WalletSubject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WalletSubject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WalletSubject' from JSON`,
  );
}
