/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type WalletSubject = {
    balance?: string | undefined;
    identifier: string;
    type: string;
};

/** @internal */
export namespace WalletSubject$ {
    export type Inbound = {
        balance?: string | undefined;
        identifier: string;
        type: string;
    };

    export const inboundSchema: z.ZodType<WalletSubject, z.ZodTypeDef, Inbound> = z
        .object({
            balance: z.string().optional(),
            identifier: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.balance === undefined ? null : { balance: v.balance }),
                identifier: v.identifier,
                type: v.type,
            };
        });

    export type Outbound = {
        balance?: string | undefined;
        identifier: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WalletSubject> = z
        .object({
            balance: z.string().optional(),
            identifier: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.balance === undefined ? null : { balance: v.balance }),
                identifier: v.identifier,
                type: v.type,
            };
        });
}
