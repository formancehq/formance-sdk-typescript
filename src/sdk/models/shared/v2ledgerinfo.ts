/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2MigrationInfo, V2MigrationInfo$ } from "./v2migrationinfo";
import * as z from "zod";

export type V2LedgerInfoStorage = {
    migrations?: Array<V2MigrationInfo> | undefined;
};

export type V2LedgerInfo = {
    name?: string | undefined;
    storage?: V2LedgerInfoStorage | undefined;
};

/** @internal */
export namespace V2LedgerInfoStorage$ {
    export type Inbound = {
        migrations?: Array<V2MigrationInfo$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<V2LedgerInfoStorage, z.ZodTypeDef, Inbound> = z
        .object({
            migrations: z.array(V2MigrationInfo$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.migrations === undefined ? null : { migrations: v.migrations }),
            };
        });

    export type Outbound = {
        migrations?: Array<V2MigrationInfo$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2LedgerInfoStorage> = z
        .object({
            migrations: z.array(V2MigrationInfo$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.migrations === undefined ? null : { migrations: v.migrations }),
            };
        });
}

/** @internal */
export namespace V2LedgerInfo$ {
    export type Inbound = {
        name?: string | undefined;
        storage?: V2LedgerInfoStorage$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<V2LedgerInfo, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            storage: z.lazy(() => V2LedgerInfoStorage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        storage?: V2LedgerInfoStorage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2LedgerInfo> = z
        .object({
            name: z.string().optional(),
            storage: z.lazy(() => V2LedgerInfoStorage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
            };
        });
}
