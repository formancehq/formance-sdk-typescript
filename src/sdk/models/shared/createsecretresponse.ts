/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Secret, Secret$ } from "./secret";
import * as z from "zod";

export type CreateSecretResponse = {
    data?: Secret | undefined;
};

/** @internal */
export namespace CreateSecretResponse$ {
    export const inboundSchema: z.ZodType<CreateSecretResponse, z.ZodTypeDef, unknown> = z
        .object({
            data: Secret$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Secret$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSecretResponse> = z
        .object({
            data: Secret$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}
