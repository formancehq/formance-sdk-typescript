/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type BalancesCursorResponseCursor = {
    data: Array<{ [k: string]: { [k: string]: number } }>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type BalancesCursorResponse = {
    cursor: BalancesCursorResponseCursor;
};

/** @internal */
export namespace BalancesCursorResponseCursor$ {
    export const inboundSchema: z.ZodType<BalancesCursorResponseCursor, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(z.record(z.record(z.number().int()))),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });

    export type Outbound = {
        data: Array<{ [k: string]: { [k: string]: number } }>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesCursorResponseCursor> =
        z.object({
            data: z.array(z.record(z.record(z.number().int()))),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });
}

/** @internal */
export namespace BalancesCursorResponse$ {
    export const inboundSchema: z.ZodType<BalancesCursorResponse, z.ZodTypeDef, unknown> = z.object(
        {
            cursor: z.lazy(() => BalancesCursorResponseCursor$.inboundSchema),
        }
    );

    export type Outbound = {
        cursor: BalancesCursorResponseCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesCursorResponse> =
        z.object({
            cursor: z.lazy(() => BalancesCursorResponseCursor$.outboundSchema),
        });
}
