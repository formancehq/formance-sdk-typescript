/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BalancesCursorResponseCursor = {
  data: Array<{ [k: string]: { [k: string]: number } }>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type BalancesCursorResponse = {
  cursor: BalancesCursorResponseCursor;
};

/** @internal */
export const BalancesCursorResponseCursor$inboundSchema: z.ZodType<
  BalancesCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.record(z.record(z.number().int()))),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type BalancesCursorResponseCursor$Outbound = {
  data: Array<{ [k: string]: { [k: string]: number } }>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const BalancesCursorResponseCursor$outboundSchema: z.ZodType<
  BalancesCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  BalancesCursorResponseCursor
> = z.object({
  data: z.array(z.record(z.record(z.number().int()))),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalancesCursorResponseCursor$ {
  /** @deprecated use `BalancesCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = BalancesCursorResponseCursor$inboundSchema;
  /** @deprecated use `BalancesCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema = BalancesCursorResponseCursor$outboundSchema;
  /** @deprecated use `BalancesCursorResponseCursor$Outbound` instead. */
  export type Outbound = BalancesCursorResponseCursor$Outbound;
}

export function balancesCursorResponseCursorToJSON(
  balancesCursorResponseCursor: BalancesCursorResponseCursor,
): string {
  return JSON.stringify(
    BalancesCursorResponseCursor$outboundSchema.parse(
      balancesCursorResponseCursor,
    ),
  );
}

export function balancesCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<BalancesCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalancesCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalancesCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const BalancesCursorResponse$inboundSchema: z.ZodType<
  BalancesCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => BalancesCursorResponseCursor$inboundSchema),
});

/** @internal */
export type BalancesCursorResponse$Outbound = {
  cursor: BalancesCursorResponseCursor$Outbound;
};

/** @internal */
export const BalancesCursorResponse$outboundSchema: z.ZodType<
  BalancesCursorResponse$Outbound,
  z.ZodTypeDef,
  BalancesCursorResponse
> = z.object({
  cursor: z.lazy(() => BalancesCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalancesCursorResponse$ {
  /** @deprecated use `BalancesCursorResponse$inboundSchema` instead. */
  export const inboundSchema = BalancesCursorResponse$inboundSchema;
  /** @deprecated use `BalancesCursorResponse$outboundSchema` instead. */
  export const outboundSchema = BalancesCursorResponse$outboundSchema;
  /** @deprecated use `BalancesCursorResponse$Outbound` instead. */
  export type Outbound = BalancesCursorResponse$Outbound;
}

export function balancesCursorResponseToJSON(
  balancesCursorResponse: BalancesCursorResponse,
): string {
  return JSON.stringify(
    BalancesCursorResponse$outboundSchema.parse(balancesCursorResponse),
  );
}

export function balancesCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<BalancesCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalancesCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalancesCursorResponse' from JSON`,
  );
}
