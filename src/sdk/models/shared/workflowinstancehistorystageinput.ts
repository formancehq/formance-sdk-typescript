/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import {
    ActivityAddAccountMetadata,
    ActivityAddAccountMetadata$,
} from "./activityaddaccountmetadata";
import { ActivityConfirmHold, ActivityConfirmHold$ } from "./activityconfirmhold";
import { ActivityCreateTransaction, ActivityCreateTransaction$ } from "./activitycreatetransaction";
import { ActivityCreditWallet, ActivityCreditWallet$ } from "./activitycreditwallet";
import { ActivityDebitWallet, ActivityDebitWallet$ } from "./activitydebitwallet";
import { ActivityGetAccount, ActivityGetAccount$ } from "./activitygetaccount";
import { ActivityGetPayment, ActivityGetPayment$ } from "./activitygetpayment";
import { ActivityGetWallet, ActivityGetWallet$ } from "./activitygetwallet";
import { ActivityListWallets, ActivityListWallets$ } from "./activitylistwallets";
import { ActivityRevertTransaction, ActivityRevertTransaction$ } from "./activityreverttransaction";
import { ActivityStripeTransfer, ActivityStripeTransfer$ } from "./activitystripetransfer";
import { ActivityVoidHold, ActivityVoidHold$ } from "./activityvoidhold";
import * as z from "zod";

export type WorkflowInstanceHistoryStageInput = {
    addAccountMetadata?: ActivityAddAccountMetadata | undefined;
    confirmHold?: ActivityConfirmHold | undefined;
    createTransaction?: ActivityCreateTransaction | undefined;
    creditWallet?: ActivityCreditWallet | undefined;
    debitWallet?: ActivityDebitWallet | undefined;
    getAccount?: ActivityGetAccount | undefined;
    getPayment?: ActivityGetPayment | undefined;
    getWallet?: ActivityGetWallet | undefined;
    listWallets?: ActivityListWallets | undefined;
    revertTransaction?: ActivityRevertTransaction | undefined;
    stripeTransfer?: ActivityStripeTransfer | undefined;
    voidHold?: ActivityVoidHold | undefined;
};

/** @internal */
export namespace WorkflowInstanceHistoryStageInput$ {
    export const inboundSchema: z.ZodType<
        WorkflowInstanceHistoryStageInput,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            AddAccountMetadata: ActivityAddAccountMetadata$.inboundSchema.optional(),
            ConfirmHold: ActivityConfirmHold$.inboundSchema.optional(),
            CreateTransaction: ActivityCreateTransaction$.inboundSchema.optional(),
            CreditWallet: ActivityCreditWallet$.inboundSchema.optional(),
            DebitWallet: ActivityDebitWallet$.inboundSchema.optional(),
            GetAccount: ActivityGetAccount$.inboundSchema.optional(),
            GetPayment: ActivityGetPayment$.inboundSchema.optional(),
            GetWallet: ActivityGetWallet$.inboundSchema.optional(),
            ListWallets: ActivityListWallets$.inboundSchema.optional(),
            RevertTransaction: ActivityRevertTransaction$.inboundSchema.optional(),
            StripeTransfer: ActivityStripeTransfer$.inboundSchema.optional(),
            VoidHold: ActivityVoidHold$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                AddAccountMetadata: "addAccountMetadata",
                ConfirmHold: "confirmHold",
                CreateTransaction: "createTransaction",
                CreditWallet: "creditWallet",
                DebitWallet: "debitWallet",
                GetAccount: "getAccount",
                GetPayment: "getPayment",
                GetWallet: "getWallet",
                ListWallets: "listWallets",
                RevertTransaction: "revertTransaction",
                StripeTransfer: "stripeTransfer",
                VoidHold: "voidHold",
            });
        });

    export type Outbound = {
        AddAccountMetadata?: ActivityAddAccountMetadata$.Outbound | undefined;
        ConfirmHold?: ActivityConfirmHold$.Outbound | undefined;
        CreateTransaction?: ActivityCreateTransaction$.Outbound | undefined;
        CreditWallet?: ActivityCreditWallet$.Outbound | undefined;
        DebitWallet?: ActivityDebitWallet$.Outbound | undefined;
        GetAccount?: ActivityGetAccount$.Outbound | undefined;
        GetPayment?: ActivityGetPayment$.Outbound | undefined;
        GetWallet?: ActivityGetWallet$.Outbound | undefined;
        ListWallets?: ActivityListWallets$.Outbound | undefined;
        RevertTransaction?: ActivityRevertTransaction$.Outbound | undefined;
        StripeTransfer?: ActivityStripeTransfer$.Outbound | undefined;
        VoidHold?: ActivityVoidHold$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        WorkflowInstanceHistoryStageInput
    > = z
        .object({
            addAccountMetadata: ActivityAddAccountMetadata$.outboundSchema.optional(),
            confirmHold: ActivityConfirmHold$.outboundSchema.optional(),
            createTransaction: ActivityCreateTransaction$.outboundSchema.optional(),
            creditWallet: ActivityCreditWallet$.outboundSchema.optional(),
            debitWallet: ActivityDebitWallet$.outboundSchema.optional(),
            getAccount: ActivityGetAccount$.outboundSchema.optional(),
            getPayment: ActivityGetPayment$.outboundSchema.optional(),
            getWallet: ActivityGetWallet$.outboundSchema.optional(),
            listWallets: ActivityListWallets$.outboundSchema.optional(),
            revertTransaction: ActivityRevertTransaction$.outboundSchema.optional(),
            stripeTransfer: ActivityStripeTransfer$.outboundSchema.optional(),
            voidHold: ActivityVoidHold$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                addAccountMetadata: "AddAccountMetadata",
                confirmHold: "ConfirmHold",
                createTransaction: "CreateTransaction",
                creditWallet: "CreditWallet",
                debitWallet: "DebitWallet",
                getAccount: "GetAccount",
                getPayment: "GetPayment",
                getWallet: "GetWallet",
                listWallets: "ListWallets",
                revertTransaction: "RevertTransaction",
                stripeTransfer: "StripeTransfer",
                voidHold: "VoidHold",
            });
        });
}
