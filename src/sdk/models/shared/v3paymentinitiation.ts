/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3PaymentInitiationStatusEnum,
  V3PaymentInitiationStatusEnum$inboundSchema,
  V3PaymentInitiationStatusEnum$outboundSchema,
} from "./v3paymentinitiationstatusenum.js";
import {
  V3PaymentInitiationTypeEnum,
  V3PaymentInitiationTypeEnum$inboundSchema,
  V3PaymentInitiationTypeEnum$outboundSchema,
} from "./v3paymentinitiationtypeenum.js";

export type V3PaymentInitiation = {
  amount: bigint;
  asset: string;
  connectorID: string;
  createdAt: Date;
  description: string;
  destinationAccountID?: string | undefined;
  error?: string | undefined;
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  provider: string;
  reference: string;
  scheduledAt: Date;
  sourceAccountID?: string | undefined;
  status: V3PaymentInitiationStatusEnum;
  type: V3PaymentInitiationTypeEnum;
};

/** @internal */
export const V3PaymentInitiation$inboundSchema: z.ZodType<
  V3PaymentInitiation,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().transform(v => BigInt(v)),
  asset: z.string(),
  connectorID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
  destinationAccountID: z.string().optional(),
  error: z.string().optional(),
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  provider: z.string(),
  reference: z.string(),
  scheduledAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  sourceAccountID: z.string().optional(),
  status: V3PaymentInitiationStatusEnum$inboundSchema,
  type: V3PaymentInitiationTypeEnum$inboundSchema,
});

/** @internal */
export type V3PaymentInitiation$Outbound = {
  amount: number;
  asset: string;
  connectorID: string;
  createdAt: string;
  description: string;
  destinationAccountID?: string | undefined;
  error?: string | undefined;
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  provider: string;
  reference: string;
  scheduledAt: string;
  sourceAccountID?: string | undefined;
  status: string;
  type: string;
};

/** @internal */
export const V3PaymentInitiation$outboundSchema: z.ZodType<
  V3PaymentInitiation$Outbound,
  z.ZodTypeDef,
  V3PaymentInitiation
> = z.object({
  amount: z.bigint().transform(v => Number(v)),
  asset: z.string(),
  connectorID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
  destinationAccountID: z.string().optional(),
  error: z.string().optional(),
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  provider: z.string(),
  reference: z.string(),
  scheduledAt: z.date().transform(v => v.toISOString()),
  sourceAccountID: z.string().optional(),
  status: V3PaymentInitiationStatusEnum$outboundSchema,
  type: V3PaymentInitiationTypeEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3PaymentInitiation$ {
  /** @deprecated use `V3PaymentInitiation$inboundSchema` instead. */
  export const inboundSchema = V3PaymentInitiation$inboundSchema;
  /** @deprecated use `V3PaymentInitiation$outboundSchema` instead. */
  export const outboundSchema = V3PaymentInitiation$outboundSchema;
  /** @deprecated use `V3PaymentInitiation$Outbound` instead. */
  export type Outbound = V3PaymentInitiation$Outbound;
}

export function v3PaymentInitiationToJSON(
  v3PaymentInitiation: V3PaymentInitiation,
): string {
  return JSON.stringify(
    V3PaymentInitiation$outboundSchema.parse(v3PaymentInitiation),
  );
}

export function v3PaymentInitiationFromJSON(
  jsonString: string,
): SafeParseResult<V3PaymentInitiation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3PaymentInitiation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3PaymentInitiation' from JSON`,
  );
}
