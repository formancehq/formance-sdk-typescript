/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3Payment,
  V3Payment$inboundSchema,
  V3Payment$Outbound,
  V3Payment$outboundSchema,
} from "./v3payment.js";

export type V3PaymentsCursorResponseCursor = {
  data: Array<V3Payment>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V3PaymentsCursorResponse = {
  cursor: V3PaymentsCursorResponseCursor;
};

/** @internal */
export const V3PaymentsCursorResponseCursor$inboundSchema: z.ZodType<
  V3PaymentsCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V3Payment$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V3PaymentsCursorResponseCursor$Outbound = {
  data: Array<V3Payment$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V3PaymentsCursorResponseCursor$outboundSchema: z.ZodType<
  V3PaymentsCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  V3PaymentsCursorResponseCursor
> = z.object({
  data: z.array(V3Payment$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3PaymentsCursorResponseCursor$ {
  /** @deprecated use `V3PaymentsCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = V3PaymentsCursorResponseCursor$inboundSchema;
  /** @deprecated use `V3PaymentsCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema = V3PaymentsCursorResponseCursor$outboundSchema;
  /** @deprecated use `V3PaymentsCursorResponseCursor$Outbound` instead. */
  export type Outbound = V3PaymentsCursorResponseCursor$Outbound;
}

export function v3PaymentsCursorResponseCursorToJSON(
  v3PaymentsCursorResponseCursor: V3PaymentsCursorResponseCursor,
): string {
  return JSON.stringify(
    V3PaymentsCursorResponseCursor$outboundSchema.parse(
      v3PaymentsCursorResponseCursor,
    ),
  );
}

export function v3PaymentsCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<V3PaymentsCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3PaymentsCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3PaymentsCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const V3PaymentsCursorResponse$inboundSchema: z.ZodType<
  V3PaymentsCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V3PaymentsCursorResponseCursor$inboundSchema),
});

/** @internal */
export type V3PaymentsCursorResponse$Outbound = {
  cursor: V3PaymentsCursorResponseCursor$Outbound;
};

/** @internal */
export const V3PaymentsCursorResponse$outboundSchema: z.ZodType<
  V3PaymentsCursorResponse$Outbound,
  z.ZodTypeDef,
  V3PaymentsCursorResponse
> = z.object({
  cursor: z.lazy(() => V3PaymentsCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3PaymentsCursorResponse$ {
  /** @deprecated use `V3PaymentsCursorResponse$inboundSchema` instead. */
  export const inboundSchema = V3PaymentsCursorResponse$inboundSchema;
  /** @deprecated use `V3PaymentsCursorResponse$outboundSchema` instead. */
  export const outboundSchema = V3PaymentsCursorResponse$outboundSchema;
  /** @deprecated use `V3PaymentsCursorResponse$Outbound` instead. */
  export type Outbound = V3PaymentsCursorResponse$Outbound;
}

export function v3PaymentsCursorResponseToJSON(
  v3PaymentsCursorResponse: V3PaymentsCursorResponse,
): string {
  return JSON.stringify(
    V3PaymentsCursorResponse$outboundSchema.parse(v3PaymentsCursorResponse),
  );
}

export function v3PaymentsCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3PaymentsCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3PaymentsCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3PaymentsCursorResponse' from JSON`,
  );
}
