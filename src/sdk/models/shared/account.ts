/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Account = {
    address: string;
    metadata?: Record<string, any> | undefined;
    type?: string | undefined;
};

/** @internal */
export namespace Account$ {
    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z
        .object({
            address: z.string(),
            metadata: z.record(z.any()).optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                address: v.address,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        address: string;
        metadata?: Record<string, any> | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z
        .object({
            address: z.string(),
            metadata: z.record(z.any()).optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                address: v.address,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
