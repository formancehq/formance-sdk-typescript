/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ClientOptions = {
  description?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  name: string;
  postLogoutRedirectUris?: Array<string> | undefined;
  public?: boolean | undefined;
  redirectUris?: Array<string> | undefined;
  scopes?: Array<string> | undefined;
  trusted?: boolean | undefined;
};

/** @internal */
export const ClientOptions$inboundSchema: z.ZodType<
  ClientOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  name: z.string(),
  postLogoutRedirectUris: z.array(z.string()).optional(),
  public: z.boolean().optional(),
  redirectUris: z.array(z.string()).optional(),
  scopes: z.array(z.string()).optional(),
  trusted: z.boolean().optional(),
});

/** @internal */
export type ClientOptions$Outbound = {
  description?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  name: string;
  postLogoutRedirectUris?: Array<string> | undefined;
  public?: boolean | undefined;
  redirectUris?: Array<string> | undefined;
  scopes?: Array<string> | undefined;
  trusted?: boolean | undefined;
};

/** @internal */
export const ClientOptions$outboundSchema: z.ZodType<
  ClientOptions$Outbound,
  z.ZodTypeDef,
  ClientOptions
> = z.object({
  description: z.string().optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  name: z.string(),
  postLogoutRedirectUris: z.array(z.string()).optional(),
  public: z.boolean().optional(),
  redirectUris: z.array(z.string()).optional(),
  scopes: z.array(z.string()).optional(),
  trusted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientOptions$ {
  /** @deprecated use `ClientOptions$inboundSchema` instead. */
  export const inboundSchema = ClientOptions$inboundSchema;
  /** @deprecated use `ClientOptions$outboundSchema` instead. */
  export const outboundSchema = ClientOptions$outboundSchema;
  /** @deprecated use `ClientOptions$Outbound` instead. */
  export type Outbound = ClientOptions$Outbound;
}

export function clientOptionsToJSON(clientOptions: ClientOptions): string {
  return JSON.stringify(ClientOptions$outboundSchema.parse(clientOptions));
}

export function clientOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ClientOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientOptions' from JSON`,
  );
}
