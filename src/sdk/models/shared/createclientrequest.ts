/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CreateClientRequest = {
    description?: string | undefined;
    metadata?: Record<string, any> | undefined;
    name: string;
    postLogoutRedirectUris?: Array<string> | undefined;
    public?: boolean | undefined;
    redirectUris?: Array<string> | undefined;
    scopes?: Array<string> | undefined;
    trusted?: boolean | undefined;
};

/** @internal */
export namespace CreateClientRequest$ {
    export type Inbound = {
        description?: string | undefined;
        metadata?: Record<string, any> | undefined;
        name: string;
        postLogoutRedirectUris?: Array<string> | undefined;
        public?: boolean | undefined;
        redirectUris?: Array<string> | undefined;
        scopes?: Array<string> | undefined;
        trusted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<CreateClientRequest, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            metadata: z.record(z.any()).optional(),
            name: z.string(),
            postLogoutRedirectUris: z.array(z.string()).optional(),
            public: z.boolean().optional(),
            redirectUris: z.array(z.string()).optional(),
            scopes: z.array(z.string()).optional(),
            trusted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                name: v.name,
                ...(v.postLogoutRedirectUris === undefined
                    ? null
                    : { postLogoutRedirectUris: v.postLogoutRedirectUris }),
                ...(v.public === undefined ? null : { public: v.public }),
                ...(v.redirectUris === undefined ? null : { redirectUris: v.redirectUris }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.trusted === undefined ? null : { trusted: v.trusted }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        metadata?: Record<string, any> | undefined;
        name: string;
        postLogoutRedirectUris?: Array<string> | undefined;
        public?: boolean | undefined;
        redirectUris?: Array<string> | undefined;
        scopes?: Array<string> | undefined;
        trusted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateClientRequest> = z
        .object({
            description: z.string().optional(),
            metadata: z.record(z.any()).optional(),
            name: z.string(),
            postLogoutRedirectUris: z.array(z.string()).optional(),
            public: z.boolean().optional(),
            redirectUris: z.array(z.string()).optional(),
            scopes: z.array(z.string()).optional(),
            trusted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                name: v.name,
                ...(v.postLogoutRedirectUris === undefined
                    ? null
                    : { postLogoutRedirectUris: v.postLogoutRedirectUris }),
                ...(v.public === undefined ? null : { public: v.public }),
                ...(v.redirectUris === undefined ? null : { redirectUris: v.redirectUris }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.trusted === undefined ? null : { trusted: v.trusted }),
            };
        });
}
