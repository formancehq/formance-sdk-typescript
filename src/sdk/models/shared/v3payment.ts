/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3PaymentAdjustment,
  V3PaymentAdjustment$inboundSchema,
  V3PaymentAdjustment$Outbound,
  V3PaymentAdjustment$outboundSchema,
} from "./v3paymentadjustment.js";
import {
  V3PaymentStatusEnum,
  V3PaymentStatusEnum$inboundSchema,
  V3PaymentStatusEnum$outboundSchema,
} from "./v3paymentstatusenum.js";
import {
  V3PaymentTypeEnum,
  V3PaymentTypeEnum$inboundSchema,
  V3PaymentTypeEnum$outboundSchema,
} from "./v3paymenttypeenum.js";

export type V3Payment = {
  adjustments?: Array<V3PaymentAdjustment> | null | undefined;
  amount: bigint;
  asset: string;
  connectorID: string;
  createdAt: Date;
  destinationAccountID?: string | null | undefined;
  id: string;
  initialAmount: bigint;
  metadata?: { [k: string]: string } | null | undefined;
  provider: string;
  reference: string;
  scheme: string;
  sourceAccountID?: string | null | undefined;
  status: V3PaymentStatusEnum;
  type: V3PaymentTypeEnum;
};

/** @internal */
export const V3Payment$inboundSchema: z.ZodType<
  V3Payment,
  z.ZodTypeDef,
  unknown
> = z.object({
  adjustments: z.nullable(z.array(V3PaymentAdjustment$inboundSchema))
    .optional(),
  amount: z.number().transform(v => BigInt(v)),
  asset: z.string(),
  connectorID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  destinationAccountID: z.nullable(z.string()).optional(),
  id: z.string(),
  initialAmount: z.number().transform(v => BigInt(v)),
  metadata: z.nullable(z.record(z.string())).optional(),
  provider: z.string(),
  reference: z.string(),
  scheme: z.string(),
  sourceAccountID: z.nullable(z.string()).optional(),
  status: V3PaymentStatusEnum$inboundSchema,
  type: V3PaymentTypeEnum$inboundSchema,
});

/** @internal */
export type V3Payment$Outbound = {
  adjustments?: Array<V3PaymentAdjustment$Outbound> | null | undefined;
  amount: number;
  asset: string;
  connectorID: string;
  createdAt: string;
  destinationAccountID?: string | null | undefined;
  id: string;
  initialAmount: number;
  metadata?: { [k: string]: string } | null | undefined;
  provider: string;
  reference: string;
  scheme: string;
  sourceAccountID?: string | null | undefined;
  status: string;
  type: string;
};

/** @internal */
export const V3Payment$outboundSchema: z.ZodType<
  V3Payment$Outbound,
  z.ZodTypeDef,
  V3Payment
> = z.object({
  adjustments: z.nullable(z.array(V3PaymentAdjustment$outboundSchema))
    .optional(),
  amount: z.bigint().transform(v => Number(v)),
  asset: z.string(),
  connectorID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  destinationAccountID: z.nullable(z.string()).optional(),
  id: z.string(),
  initialAmount: z.bigint().transform(v => Number(v)),
  metadata: z.nullable(z.record(z.string())).optional(),
  provider: z.string(),
  reference: z.string(),
  scheme: z.string(),
  sourceAccountID: z.nullable(z.string()).optional(),
  status: V3PaymentStatusEnum$outboundSchema,
  type: V3PaymentTypeEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3Payment$ {
  /** @deprecated use `V3Payment$inboundSchema` instead. */
  export const inboundSchema = V3Payment$inboundSchema;
  /** @deprecated use `V3Payment$outboundSchema` instead. */
  export const outboundSchema = V3Payment$outboundSchema;
  /** @deprecated use `V3Payment$Outbound` instead. */
  export type Outbound = V3Payment$Outbound;
}

export function v3PaymentToJSON(v3Payment: V3Payment): string {
  return JSON.stringify(V3Payment$outboundSchema.parse(v3Payment));
}

export function v3PaymentFromJSON(
  jsonString: string,
): SafeParseResult<V3Payment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3Payment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3Payment' from JSON`,
  );
}
