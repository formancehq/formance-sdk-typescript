/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3BankAccountRelatedAccount = {
  accountID: string;
  createdAt: Date;
};

/** @internal */
export const V3BankAccountRelatedAccount$inboundSchema: z.ZodType<
  V3BankAccountRelatedAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type V3BankAccountRelatedAccount$Outbound = {
  accountID: string;
  createdAt: string;
};

/** @internal */
export const V3BankAccountRelatedAccount$outboundSchema: z.ZodType<
  V3BankAccountRelatedAccount$Outbound,
  z.ZodTypeDef,
  V3BankAccountRelatedAccount
> = z.object({
  accountID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3BankAccountRelatedAccount$ {
  /** @deprecated use `V3BankAccountRelatedAccount$inboundSchema` instead. */
  export const inboundSchema = V3BankAccountRelatedAccount$inboundSchema;
  /** @deprecated use `V3BankAccountRelatedAccount$outboundSchema` instead. */
  export const outboundSchema = V3BankAccountRelatedAccount$outboundSchema;
  /** @deprecated use `V3BankAccountRelatedAccount$Outbound` instead. */
  export type Outbound = V3BankAccountRelatedAccount$Outbound;
}

export function v3BankAccountRelatedAccountToJSON(
  v3BankAccountRelatedAccount: V3BankAccountRelatedAccount,
): string {
  return JSON.stringify(
    V3BankAccountRelatedAccount$outboundSchema.parse(
      v3BankAccountRelatedAccount,
    ),
  );
}

export function v3BankAccountRelatedAccountFromJSON(
  jsonString: string,
): SafeParseResult<V3BankAccountRelatedAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3BankAccountRelatedAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3BankAccountRelatedAccount' from JSON`,
  );
}
