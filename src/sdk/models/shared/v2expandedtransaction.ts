/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2Posting, V2Posting$ } from "./v2posting";
import { V2Volume, V2Volume$ } from "./v2volume";
import { z } from "zod";

export type V2ExpandedTransaction = {
    id: number;
    metadata: Record<string, string>;
    postCommitVolumes?: Record<string, Record<string, V2Volume>> | undefined;
    postings: Array<V2Posting>;
    preCommitVolumes?: Record<string, Record<string, V2Volume>> | undefined;
    reference?: string | undefined;
    reverted: boolean;
    timestamp: Date;
};

/** @internal */
export namespace V2ExpandedTransaction$ {
    export type Inbound = {
        id: number;
        metadata: Record<string, string>;
        postCommitVolumes?: Record<string, Record<string, V2Volume$.Inbound>> | undefined;
        postings: Array<V2Posting$.Inbound>;
        preCommitVolumes?: Record<string, Record<string, V2Volume$.Inbound>> | undefined;
        reference?: string | undefined;
        reverted: boolean;
        timestamp: string;
    };

    export const inboundSchema: z.ZodType<V2ExpandedTransaction, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            metadata: z.record(z.string()),
            postCommitVolumes: z.record(z.record(V2Volume$.inboundSchema)).optional(),
            postings: z.array(V2Posting$.inboundSchema),
            preCommitVolumes: z.record(z.record(V2Volume$.inboundSchema)).optional(),
            reference: z.string().optional(),
            reverted: z.boolean(),
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                id: v.id,
                metadata: v.metadata,
                ...(v.postCommitVolumes === undefined
                    ? null
                    : { postCommitVolumes: v.postCommitVolumes }),
                postings: v.postings,
                ...(v.preCommitVolumes === undefined
                    ? null
                    : { preCommitVolumes: v.preCommitVolumes }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                reverted: v.reverted,
                timestamp: v.timestamp,
            };
        });

    export type Outbound = {
        id: number;
        metadata: Record<string, string>;
        postCommitVolumes?: Record<string, Record<string, V2Volume$.Outbound>> | undefined;
        postings: Array<V2Posting$.Outbound>;
        preCommitVolumes?: Record<string, Record<string, V2Volume$.Outbound>> | undefined;
        reference?: string | undefined;
        reverted: boolean;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ExpandedTransaction> = z
        .object({
            id: z.number().int(),
            metadata: z.record(z.string()),
            postCommitVolumes: z.record(z.record(V2Volume$.outboundSchema)).optional(),
            postings: z.array(V2Posting$.outboundSchema),
            preCommitVolumes: z.record(z.record(V2Volume$.outboundSchema)).optional(),
            reference: z.string().optional(),
            reverted: z.boolean(),
            timestamp: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                id: v.id,
                metadata: v.metadata,
                ...(v.postCommitVolumes === undefined
                    ? null
                    : { postCommitVolumes: v.postCommitVolumes }),
                postings: v.postings,
                ...(v.preCommitVolumes === undefined
                    ? null
                    : { preCommitVolumes: v.preCommitVolumes }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                reverted: v.reverted,
                timestamp: v.timestamp,
            };
        });
}
