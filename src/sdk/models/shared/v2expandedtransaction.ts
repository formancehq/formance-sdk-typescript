/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { V2Posting } from "./v2posting";
import { V2Volume } from "./v2volume";
import { Expose, Transform, Type } from "class-transformer";

export class V2ExpandedTransaction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: number;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    metadata: Record<string, string>;

    @SpeakeasyMetadata({ elemType: V2Volume, elemDepth: 2 })
    @Expose({ name: "postCommitVolumes" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Record<string, V2Volume>> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], V2Volume);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    postCommitVolumes?: Record<string, Record<string, V2Volume>>;

    @SpeakeasyMetadata({ elemType: V2Posting })
    @Expose({ name: "postings" })
    @Type(() => V2Posting)
    postings: V2Posting[];

    @SpeakeasyMetadata({ elemType: V2Volume, elemDepth: 2 })
    @Expose({ name: "preCommitVolumes" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Record<string, V2Volume>> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], V2Volume);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    preCommitVolumes?: Record<string, Record<string, V2Volume>>;

    @SpeakeasyMetadata()
    @Expose({ name: "reference" })
    reference?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "reverted" })
    reverted: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "timestamp" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    timestamp: Date;
}
