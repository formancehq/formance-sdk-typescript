/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2Posting, V2Posting$ } from "./v2posting";
import { V2Volume, V2Volume$ } from "./v2volume";
import * as z from "zod";

export type V2ExpandedTransaction = {
    id: bigint;
    metadata: { [k: string]: string };
    postCommitVolumes?: { [k: string]: { [k: string]: V2Volume } } | undefined;
    postings: Array<V2Posting>;
    preCommitVolumes?: { [k: string]: { [k: string]: V2Volume } } | undefined;
    reference?: string | undefined;
    reverted: boolean;
    timestamp: Date;
};

/** @internal */
export namespace V2ExpandedTransaction$ {
    export const inboundSchema: z.ZodType<V2ExpandedTransaction, z.ZodTypeDef, unknown> = z.object({
        id: z.number().transform((v) => BigInt(v)),
        metadata: z.record(z.string()),
        postCommitVolumes: z.record(z.record(V2Volume$.inboundSchema)).optional(),
        postings: z.array(V2Posting$.inboundSchema),
        preCommitVolumes: z.record(z.record(V2Volume$.inboundSchema)).optional(),
        reference: z.string().optional(),
        reverted: z.boolean(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        id: number;
        metadata: { [k: string]: string };
        postCommitVolumes?: { [k: string]: { [k: string]: V2Volume$.Outbound } } | undefined;
        postings: Array<V2Posting$.Outbound>;
        preCommitVolumes?: { [k: string]: { [k: string]: V2Volume$.Outbound } } | undefined;
        reference?: string | undefined;
        reverted: boolean;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ExpandedTransaction> =
        z.object({
            id: z.bigint().transform((v) => Number(v)),
            metadata: z.record(z.string()),
            postCommitVolumes: z.record(z.record(V2Volume$.outboundSchema)).optional(),
            postings: z.array(V2Posting$.outboundSchema),
            preCommitVolumes: z.record(z.record(V2Volume$.outboundSchema)).optional(),
            reference: z.string().optional(),
            reverted: z.boolean(),
            timestamp: z.date().transform((v) => v.toISOString()),
        });
}
