/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Volume = {
    balance?: bigint | undefined;
    input: bigint;
    output: bigint;
};

/** @internal */
export namespace Volume$ {
    export type Inbound = {
        balance?: number | undefined;
        input: number;
        output: number;
    };

    export const inboundSchema: z.ZodType<Volume, z.ZodTypeDef, Inbound> = z
        .object({
            balance: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            input: z.number().transform((v) => BigInt(v)),
            output: z.number().transform((v) => BigInt(v)),
        })
        .transform((v) => {
            return {
                ...(v.balance === undefined ? null : { balance: v.balance }),
                input: v.input,
                output: v.output,
            };
        });

    export type Outbound = {
        balance?: number | undefined;
        input: number;
        output: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Volume> = z
        .object({
            balance: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            input: z.bigint().transform((v) => Number(v)),
            output: z.bigint().transform((v) => Number(v)),
        })
        .transform((v) => {
            return {
                ...(v.balance === undefined ? null : { balance: v.balance }),
                input: v.input,
                output: v.output,
            };
        });
}
