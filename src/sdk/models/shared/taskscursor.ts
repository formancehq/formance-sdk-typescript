/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TaskBankingCircle, TaskBankingCircle$ } from "./taskbankingcircle";
import { TaskCurrencyCloud, TaskCurrencyCloud$ } from "./taskcurrencycloud";
import { TaskDummyPay, TaskDummyPay$ } from "./taskdummypay";
import { TaskMangoPay, TaskMangoPay$ } from "./taskmangopay";
import { TaskModulr, TaskModulr$ } from "./taskmodulr";
import { TaskMoneycorp, TaskMoneycorp$ } from "./taskmoneycorp";
import { TaskStripe, TaskStripe$ } from "./taskstripe";
import { TaskWise, TaskWise$ } from "./taskwise";
import * as z from "zod";

export type TasksCursorData =
    | TaskStripe
    | TaskWise
    | TaskCurrencyCloud
    | TaskDummyPay
    | TaskModulr
    | TaskBankingCircle
    | TaskMangoPay
    | TaskMoneycorp;

export type TasksCursorCursor = {
    data: Array<
        | TaskStripe
        | TaskWise
        | TaskCurrencyCloud
        | TaskDummyPay
        | TaskModulr
        | TaskBankingCircle
        | TaskMangoPay
        | TaskMoneycorp
    >;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type TasksCursor = {
    cursor: TasksCursorCursor;
};

/** @internal */
export namespace TasksCursorData$ {
    export const inboundSchema: z.ZodType<TasksCursorData, z.ZodTypeDef, unknown> = z.union([
        TaskStripe$.inboundSchema,
        TaskWise$.inboundSchema,
        TaskCurrencyCloud$.inboundSchema,
        TaskDummyPay$.inboundSchema,
        TaskModulr$.inboundSchema,
        TaskBankingCircle$.inboundSchema,
        TaskMangoPay$.inboundSchema,
        TaskMoneycorp$.inboundSchema,
    ]);

    export type Outbound =
        | TaskStripe$.Outbound
        | TaskWise$.Outbound
        | TaskCurrencyCloud$.Outbound
        | TaskDummyPay$.Outbound
        | TaskModulr$.Outbound
        | TaskBankingCircle$.Outbound
        | TaskMangoPay$.Outbound
        | TaskMoneycorp$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TasksCursorData> = z.union([
        TaskStripe$.outboundSchema,
        TaskWise$.outboundSchema,
        TaskCurrencyCloud$.outboundSchema,
        TaskDummyPay$.outboundSchema,
        TaskModulr$.outboundSchema,
        TaskBankingCircle$.outboundSchema,
        TaskMangoPay$.outboundSchema,
        TaskMoneycorp$.outboundSchema,
    ]);
}

/** @internal */
export namespace TasksCursorCursor$ {
    export const inboundSchema: z.ZodType<TasksCursorCursor, z.ZodTypeDef, unknown> = z.object({
        data: z.array(
            z.union([
                TaskStripe$.inboundSchema,
                TaskWise$.inboundSchema,
                TaskCurrencyCloud$.inboundSchema,
                TaskDummyPay$.inboundSchema,
                TaskModulr$.inboundSchema,
                TaskBankingCircle$.inboundSchema,
                TaskMangoPay$.inboundSchema,
                TaskMoneycorp$.inboundSchema,
            ])
        ),
        hasMore: z.boolean(),
        next: z.string().optional(),
        pageSize: z.number().int(),
        previous: z.string().optional(),
    });

    export type Outbound = {
        data: Array<
            | TaskStripe$.Outbound
            | TaskWise$.Outbound
            | TaskCurrencyCloud$.Outbound
            | TaskDummyPay$.Outbound
            | TaskModulr$.Outbound
            | TaskBankingCircle$.Outbound
            | TaskMangoPay$.Outbound
            | TaskMoneycorp$.Outbound
        >;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TasksCursorCursor> = z.object({
        data: z.array(
            z.union([
                TaskStripe$.outboundSchema,
                TaskWise$.outboundSchema,
                TaskCurrencyCloud$.outboundSchema,
                TaskDummyPay$.outboundSchema,
                TaskModulr$.outboundSchema,
                TaskBankingCircle$.outboundSchema,
                TaskMangoPay$.outboundSchema,
                TaskMoneycorp$.outboundSchema,
            ])
        ),
        hasMore: z.boolean(),
        next: z.string().optional(),
        pageSize: z.number().int(),
        previous: z.string().optional(),
    });
}

/** @internal */
export namespace TasksCursor$ {
    export const inboundSchema: z.ZodType<TasksCursor, z.ZodTypeDef, unknown> = z.object({
        cursor: z.lazy(() => TasksCursorCursor$.inboundSchema),
    });

    export type Outbound = {
        cursor: TasksCursorCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TasksCursor> = z.object({
        cursor: z.lazy(() => TasksCursorCursor$.outboundSchema),
    });
}
