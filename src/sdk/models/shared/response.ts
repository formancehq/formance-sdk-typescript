/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Total = {
  relation?: string | undefined;
  value?: number | undefined;
};

export type ResponseCursor = {
  data?: Array<{ [k: string]: any }> | undefined;
  hasMore?: boolean | undefined;
  next?: string | undefined;
  pageSize?: number | undefined;
  previous?: string | undefined;
  total?: Total | undefined;
};

export type ResponseT = {
  cursor?: ResponseCursor | undefined;
  /**
   * The payload
   */
  data?: { [k: string]: any } | undefined;
};

/** @internal */
export const Total$inboundSchema: z.ZodType<Total, z.ZodTypeDef, unknown> = z
  .object({
    relation: z.string().optional(),
    value: z.number().int().optional(),
  });

/** @internal */
export type Total$Outbound = {
  relation?: string | undefined;
  value?: number | undefined;
};

/** @internal */
export const Total$outboundSchema: z.ZodType<
  Total$Outbound,
  z.ZodTypeDef,
  Total
> = z.object({
  relation: z.string().optional(),
  value: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Total$ {
  /** @deprecated use `Total$inboundSchema` instead. */
  export const inboundSchema = Total$inboundSchema;
  /** @deprecated use `Total$outboundSchema` instead. */
  export const outboundSchema = Total$outboundSchema;
  /** @deprecated use `Total$Outbound` instead. */
  export type Outbound = Total$Outbound;
}

export function totalToJSON(total: Total): string {
  return JSON.stringify(Total$outboundSchema.parse(total));
}

export function totalFromJSON(
  jsonString: string,
): SafeParseResult<Total, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Total$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Total' from JSON`,
  );
}

/** @internal */
export const ResponseCursor$inboundSchema: z.ZodType<
  ResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.record(z.any())).optional(),
  hasMore: z.boolean().optional(),
  next: z.string().optional(),
  pageSize: z.number().int().optional(),
  previous: z.string().optional(),
  total: z.lazy(() => Total$inboundSchema).optional(),
});

/** @internal */
export type ResponseCursor$Outbound = {
  data?: Array<{ [k: string]: any }> | undefined;
  hasMore?: boolean | undefined;
  next?: string | undefined;
  pageSize?: number | undefined;
  previous?: string | undefined;
  total?: Total$Outbound | undefined;
};

/** @internal */
export const ResponseCursor$outboundSchema: z.ZodType<
  ResponseCursor$Outbound,
  z.ZodTypeDef,
  ResponseCursor
> = z.object({
  data: z.array(z.record(z.any())).optional(),
  hasMore: z.boolean().optional(),
  next: z.string().optional(),
  pageSize: z.number().int().optional(),
  previous: z.string().optional(),
  total: z.lazy(() => Total$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseCursor$ {
  /** @deprecated use `ResponseCursor$inboundSchema` instead. */
  export const inboundSchema = ResponseCursor$inboundSchema;
  /** @deprecated use `ResponseCursor$outboundSchema` instead. */
  export const outboundSchema = ResponseCursor$outboundSchema;
  /** @deprecated use `ResponseCursor$Outbound` instead. */
  export type Outbound = ResponseCursor$Outbound;
}

export function responseCursorToJSON(responseCursor: ResponseCursor): string {
  return JSON.stringify(ResponseCursor$outboundSchema.parse(responseCursor));
}

export function responseCursorFromJSON(
  jsonString: string,
): SafeParseResult<ResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseCursor' from JSON`,
  );
}

/** @internal */
export const ResponseT$inboundSchema: z.ZodType<
  ResponseT,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => ResponseCursor$inboundSchema).optional(),
  data: z.record(z.any()).optional(),
});

/** @internal */
export type ResponseT$Outbound = {
  cursor?: ResponseCursor$Outbound | undefined;
  data?: { [k: string]: any } | undefined;
};

/** @internal */
export const ResponseT$outboundSchema: z.ZodType<
  ResponseT$Outbound,
  z.ZodTypeDef,
  ResponseT
> = z.object({
  cursor: z.lazy(() => ResponseCursor$outboundSchema).optional(),
  data: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseT$ {
  /** @deprecated use `ResponseT$inboundSchema` instead. */
  export const inboundSchema = ResponseT$inboundSchema;
  /** @deprecated use `ResponseT$outboundSchema` instead. */
  export const outboundSchema = ResponseT$outboundSchema;
  /** @deprecated use `ResponseT$Outbound` instead. */
  export type Outbound = ResponseT$Outbound;
}

export function responseToJSON(responseT: ResponseT): string {
  return JSON.stringify(ResponseT$outboundSchema.parse(responseT));
}

export function responseFromJSON(
  jsonString: string,
): SafeParseResult<ResponseT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseT' from JSON`,
  );
}
