/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    V2WorkflowInstanceHistoryStageInput,
    V2WorkflowInstanceHistoryStageInput$,
} from "./v2workflowinstancehistorystageinput";
import {
    V2WorkflowInstanceHistoryStageOutput,
    V2WorkflowInstanceHistoryStageOutput$,
} from "./v2workflowinstancehistorystageoutput";
import * as z from "zod";

export type V2WorkflowInstanceHistoryStage = {
    attempt: number;
    error?: string | undefined;
    input: V2WorkflowInstanceHistoryStageInput;
    lastFailure?: string | undefined;
    name: string;
    nextExecution?: Date | undefined;
    output?: V2WorkflowInstanceHistoryStageOutput | undefined;
    startedAt: Date;
    terminated: boolean;
    terminatedAt?: Date | undefined;
};

/** @internal */
export namespace V2WorkflowInstanceHistoryStage$ {
    export const inboundSchema: z.ZodType<V2WorkflowInstanceHistoryStage, z.ZodTypeDef, unknown> = z
        .object({
            attempt: z.number().int(),
            error: z.string().optional(),
            input: V2WorkflowInstanceHistoryStageInput$.inboundSchema,
            lastFailure: z.string().optional(),
            name: z.string(),
            nextExecution: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            output: V2WorkflowInstanceHistoryStageOutput$.inboundSchema.optional(),
            startedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            terminated: z.boolean(),
            terminatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                attempt: v.attempt,
                ...(v.error === undefined ? null : { error: v.error }),
                input: v.input,
                ...(v.lastFailure === undefined ? null : { lastFailure: v.lastFailure }),
                name: v.name,
                ...(v.nextExecution === undefined ? null : { nextExecution: v.nextExecution }),
                ...(v.output === undefined ? null : { output: v.output }),
                startedAt: v.startedAt,
                terminated: v.terminated,
                ...(v.terminatedAt === undefined ? null : { terminatedAt: v.terminatedAt }),
            };
        });

    export type Outbound = {
        attempt: number;
        error?: string | undefined;
        input: V2WorkflowInstanceHistoryStageInput$.Outbound;
        lastFailure?: string | undefined;
        name: string;
        nextExecution?: string | undefined;
        output?: V2WorkflowInstanceHistoryStageOutput$.Outbound | undefined;
        startedAt: string;
        terminated: boolean;
        terminatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2WorkflowInstanceHistoryStage> =
        z
            .object({
                attempt: z.number().int(),
                error: z.string().optional(),
                input: V2WorkflowInstanceHistoryStageInput$.outboundSchema,
                lastFailure: z.string().optional(),
                name: z.string(),
                nextExecution: z
                    .date()
                    .transform((v) => v.toISOString())
                    .optional(),
                output: V2WorkflowInstanceHistoryStageOutput$.outboundSchema.optional(),
                startedAt: z.date().transform((v) => v.toISOString()),
                terminated: z.boolean(),
                terminatedAt: z
                    .date()
                    .transform((v) => v.toISOString())
                    .optional(),
            })
            .transform((v) => {
                return {
                    attempt: v.attempt,
                    ...(v.error === undefined ? null : { error: v.error }),
                    input: v.input,
                    ...(v.lastFailure === undefined ? null : { lastFailure: v.lastFailure }),
                    name: v.name,
                    ...(v.nextExecution === undefined ? null : { nextExecution: v.nextExecution }),
                    ...(v.output === undefined ? null : { output: v.output }),
                    startedAt: v.startedAt,
                    terminated: v.terminated,
                    ...(v.terminatedAt === undefined ? null : { terminatedAt: v.terminatedAt }),
                };
            });
}
