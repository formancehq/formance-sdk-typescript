/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2CreateLedgerRequest = {
  bucket?: string | undefined;
  features?: { [k: string]: string } | undefined;
  metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export const V2CreateLedgerRequest$inboundSchema: z.ZodType<
  V2CreateLedgerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bucket: z.string().optional(),
  features: z.record(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
});

/** @internal */
export type V2CreateLedgerRequest$Outbound = {
  bucket?: string | undefined;
  features?: { [k: string]: string } | undefined;
  metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export const V2CreateLedgerRequest$outboundSchema: z.ZodType<
  V2CreateLedgerRequest$Outbound,
  z.ZodTypeDef,
  V2CreateLedgerRequest
> = z.object({
  bucket: z.string().optional(),
  features: z.record(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateLedgerRequest$ {
  /** @deprecated use `V2CreateLedgerRequest$inboundSchema` instead. */
  export const inboundSchema = V2CreateLedgerRequest$inboundSchema;
  /** @deprecated use `V2CreateLedgerRequest$outboundSchema` instead. */
  export const outboundSchema = V2CreateLedgerRequest$outboundSchema;
  /** @deprecated use `V2CreateLedgerRequest$Outbound` instead. */
  export type Outbound = V2CreateLedgerRequest$Outbound;
}

export function v2CreateLedgerRequestToJSON(
  v2CreateLedgerRequest: V2CreateLedgerRequest,
): string {
  return JSON.stringify(
    V2CreateLedgerRequest$outboundSchema.parse(v2CreateLedgerRequest),
  );
}

export function v2CreateLedgerRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2CreateLedgerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreateLedgerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreateLedgerRequest' from JSON`,
  );
}
