/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum V2LogType {
    NewTransaction = "NEW_TRANSACTION",
    SetMetadata = "SET_METADATA",
    RevertedTransaction = "REVERTED_TRANSACTION",
}

export type V2Log = {
    data: { [k: string]: any };
    date: Date;
    hash: string;
    id: bigint;
    type: V2LogType;
};

/** @internal */
export namespace V2LogType$ {
    export const inboundSchema = z.nativeEnum(V2LogType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace V2Log$ {
    export const inboundSchema: z.ZodType<V2Log, z.ZodTypeDef, unknown> = z.object({
        data: z.record(z.any()),
        date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        hash: z.string(),
        id: z.number().transform((v) => BigInt(v)),
        type: V2LogType$.inboundSchema,
    });

    export type Outbound = {
        data: { [k: string]: any };
        date: string;
        hash: string;
        id: number;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2Log> = z.object({
        data: z.record(z.any()),
        date: z.date().transform((v) => v.toISOString()),
        hash: z.string(),
        id: z.bigint().transform((v) => Number(v)),
        type: V2LogType$.outboundSchema,
    });
}
