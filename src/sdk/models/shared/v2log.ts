/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum V2LogType {
    NewTransaction = "NEW_TRANSACTION",
    SetMetadata = "SET_METADATA",
    RevertedTransaction = "REVERTED_TRANSACTION",
}

export type V2Log = {
    data: Record<string, any>;
    date: Date;
    hash: string;
    id: bigint;
    type: V2LogType;
};

/** @internal */
export const V2LogType$: z.ZodNativeEnum<typeof V2LogType> = z.nativeEnum(V2LogType);

/** @internal */
export namespace V2Log$ {
    export type Inbound = {
        data: Record<string, any>;
        date: string;
        hash: string;
        id: number;
        type: V2LogType;
    };

    export const inboundSchema: z.ZodType<V2Log, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.record(z.any()),
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            hash: z.string(),
            id: z.number().transform((v) => BigInt(v)),
            type: V2LogType$,
        })
        .transform((v) => {
            return {
                data: v.data,
                date: v.date,
                hash: v.hash,
                id: v.id,
                type: v.type,
            };
        });

    export type Outbound = {
        data: Record<string, any>;
        date: string;
        hash: string;
        id: number;
        type: V2LogType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2Log> = z
        .object({
            data: z.record(z.any()),
            date: z.date().transform((v) => v.toISOString()),
            hash: z.string(),
            id: z.bigint().transform((v) => Number(v)),
            type: V2LogType$,
        })
        .transform((v) => {
            return {
                data: v.data,
                date: v.date,
                hash: v.hash,
                id: v.id,
                type: v.type,
            };
        });
}
