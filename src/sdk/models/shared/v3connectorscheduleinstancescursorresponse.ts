/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3Instance,
  V3Instance$inboundSchema,
  V3Instance$Outbound,
  V3Instance$outboundSchema,
} from "./v3instance.js";

export type V3ConnectorScheduleInstancesCursorResponseCursor = {
  data: Array<V3Instance>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V3ConnectorScheduleInstancesCursorResponse = {
  cursor: V3ConnectorScheduleInstancesCursorResponseCursor;
};

/** @internal */
export const V3ConnectorScheduleInstancesCursorResponseCursor$inboundSchema:
  z.ZodType<
    V3ConnectorScheduleInstancesCursorResponseCursor,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.array(V3Instance$inboundSchema),
    hasMore: z.boolean(),
    next: z.string().optional(),
    pageSize: z.number().int(),
    previous: z.string().optional(),
  });

/** @internal */
export type V3ConnectorScheduleInstancesCursorResponseCursor$Outbound = {
  data: Array<V3Instance$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V3ConnectorScheduleInstancesCursorResponseCursor$outboundSchema:
  z.ZodType<
    V3ConnectorScheduleInstancesCursorResponseCursor$Outbound,
    z.ZodTypeDef,
    V3ConnectorScheduleInstancesCursorResponseCursor
  > = z.object({
    data: z.array(V3Instance$outboundSchema),
    hasMore: z.boolean(),
    next: z.string().optional(),
    pageSize: z.number().int(),
    previous: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ConnectorScheduleInstancesCursorResponseCursor$ {
  /** @deprecated use `V3ConnectorScheduleInstancesCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema =
    V3ConnectorScheduleInstancesCursorResponseCursor$inboundSchema;
  /** @deprecated use `V3ConnectorScheduleInstancesCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema =
    V3ConnectorScheduleInstancesCursorResponseCursor$outboundSchema;
  /** @deprecated use `V3ConnectorScheduleInstancesCursorResponseCursor$Outbound` instead. */
  export type Outbound =
    V3ConnectorScheduleInstancesCursorResponseCursor$Outbound;
}

export function v3ConnectorScheduleInstancesCursorResponseCursorToJSON(
  v3ConnectorScheduleInstancesCursorResponseCursor:
    V3ConnectorScheduleInstancesCursorResponseCursor,
): string {
  return JSON.stringify(
    V3ConnectorScheduleInstancesCursorResponseCursor$outboundSchema.parse(
      v3ConnectorScheduleInstancesCursorResponseCursor,
    ),
  );
}

export function v3ConnectorScheduleInstancesCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ConnectorScheduleInstancesCursorResponseCursor,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ConnectorScheduleInstancesCursorResponseCursor$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ConnectorScheduleInstancesCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const V3ConnectorScheduleInstancesCursorResponse$inboundSchema:
  z.ZodType<V3ConnectorScheduleInstancesCursorResponse, z.ZodTypeDef, unknown> =
    z.object({
      cursor: z.lazy(() =>
        V3ConnectorScheduleInstancesCursorResponseCursor$inboundSchema
      ),
    });

/** @internal */
export type V3ConnectorScheduleInstancesCursorResponse$Outbound = {
  cursor: V3ConnectorScheduleInstancesCursorResponseCursor$Outbound;
};

/** @internal */
export const V3ConnectorScheduleInstancesCursorResponse$outboundSchema:
  z.ZodType<
    V3ConnectorScheduleInstancesCursorResponse$Outbound,
    z.ZodTypeDef,
    V3ConnectorScheduleInstancesCursorResponse
  > = z.object({
    cursor: z.lazy(() =>
      V3ConnectorScheduleInstancesCursorResponseCursor$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ConnectorScheduleInstancesCursorResponse$ {
  /** @deprecated use `V3ConnectorScheduleInstancesCursorResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3ConnectorScheduleInstancesCursorResponse$inboundSchema;
  /** @deprecated use `V3ConnectorScheduleInstancesCursorResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ConnectorScheduleInstancesCursorResponse$outboundSchema;
  /** @deprecated use `V3ConnectorScheduleInstancesCursorResponse$Outbound` instead. */
  export type Outbound = V3ConnectorScheduleInstancesCursorResponse$Outbound;
}

export function v3ConnectorScheduleInstancesCursorResponseToJSON(
  v3ConnectorScheduleInstancesCursorResponse:
    V3ConnectorScheduleInstancesCursorResponse,
): string {
  return JSON.stringify(
    V3ConnectorScheduleInstancesCursorResponse$outboundSchema.parse(
      v3ConnectorScheduleInstancesCursorResponse,
    ),
  );
}

export function v3ConnectorScheduleInstancesCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ConnectorScheduleInstancesCursorResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ConnectorScheduleInstancesCursorResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ConnectorScheduleInstancesCursorResponse' from JSON`,
  );
}
