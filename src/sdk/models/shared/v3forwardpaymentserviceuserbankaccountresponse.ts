/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3ForwardPaymentServiceUserBankAccountResponseData = {
  /**
   * Since this call is asynchronous, the response will contain the ID of the task that was created to forward the bank account to the PSP. You can use the task API to check the status of the task and get the resulting bank account ID.
   *
   * @remarks
   */
  taskID: string;
};

export type V3ForwardPaymentServiceUserBankAccountResponse = {
  data: V3ForwardPaymentServiceUserBankAccountResponseData;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountResponseData$inboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountResponseData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    taskID: z.string(),
  });

/** @internal */
export type V3ForwardPaymentServiceUserBankAccountResponseData$Outbound = {
  taskID: string;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountResponseData$outboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountResponseData$Outbound,
    z.ZodTypeDef,
    V3ForwardPaymentServiceUserBankAccountResponseData
  > = z.object({
    taskID: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ForwardPaymentServiceUserBankAccountResponseData$ {
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponseData$inboundSchema` instead. */
  export const inboundSchema =
    V3ForwardPaymentServiceUserBankAccountResponseData$inboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponseData$outboundSchema` instead. */
  export const outboundSchema =
    V3ForwardPaymentServiceUserBankAccountResponseData$outboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponseData$Outbound` instead. */
  export type Outbound =
    V3ForwardPaymentServiceUserBankAccountResponseData$Outbound;
}

export function v3ForwardPaymentServiceUserBankAccountResponseDataToJSON(
  v3ForwardPaymentServiceUserBankAccountResponseData:
    V3ForwardPaymentServiceUserBankAccountResponseData,
): string {
  return JSON.stringify(
    V3ForwardPaymentServiceUserBankAccountResponseData$outboundSchema.parse(
      v3ForwardPaymentServiceUserBankAccountResponseData,
    ),
  );
}

export function v3ForwardPaymentServiceUserBankAccountResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ForwardPaymentServiceUserBankAccountResponseData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ForwardPaymentServiceUserBankAccountResponseData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ForwardPaymentServiceUserBankAccountResponseData' from JSON`,
  );
}

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      V3ForwardPaymentServiceUserBankAccountResponseData$inboundSchema
    ),
  });

/** @internal */
export type V3ForwardPaymentServiceUserBankAccountResponse$Outbound = {
  data: V3ForwardPaymentServiceUserBankAccountResponseData$Outbound;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountResponse$Outbound,
    z.ZodTypeDef,
    V3ForwardPaymentServiceUserBankAccountResponse
  > = z.object({
    data: z.lazy(() =>
      V3ForwardPaymentServiceUserBankAccountResponseData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ForwardPaymentServiceUserBankAccountResponse$ {
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponse$Outbound` instead. */
  export type Outbound =
    V3ForwardPaymentServiceUserBankAccountResponse$Outbound;
}

export function v3ForwardPaymentServiceUserBankAccountResponseToJSON(
  v3ForwardPaymentServiceUserBankAccountResponse:
    V3ForwardPaymentServiceUserBankAccountResponse,
): string {
  return JSON.stringify(
    V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema.parse(
      v3ForwardPaymentServiceUserBankAccountResponse,
    ),
  );
}

export function v3ForwardPaymentServiceUserBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ForwardPaymentServiceUserBankAccountResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ForwardPaymentServiceUserBankAccountResponse' from JSON`,
  );
}
