/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3TaskStatusEnum,
  V3TaskStatusEnum$inboundSchema,
  V3TaskStatusEnum$outboundSchema,
} from "./v3taskstatusenum.js";

export type V3Task = {
  connectorID?: string | undefined;
  createdAt: Date;
  createdObjectID?: string | undefined;
  error?: string | undefined;
  id: string;
  status: V3TaskStatusEnum;
  updatedAt: Date;
};

/** @internal */
export const V3Task$inboundSchema: z.ZodType<V3Task, z.ZodTypeDef, unknown> = z
  .object({
    connectorID: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    createdObjectID: z.string().optional(),
    error: z.string().optional(),
    id: z.string(),
    status: V3TaskStatusEnum$inboundSchema,
    updatedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  });

/** @internal */
export type V3Task$Outbound = {
  connectorID?: string | undefined;
  createdAt: string;
  createdObjectID?: string | undefined;
  error?: string | undefined;
  id: string;
  status: string;
  updatedAt: string;
};

/** @internal */
export const V3Task$outboundSchema: z.ZodType<
  V3Task$Outbound,
  z.ZodTypeDef,
  V3Task
> = z.object({
  connectorID: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  createdObjectID: z.string().optional(),
  error: z.string().optional(),
  id: z.string(),
  status: V3TaskStatusEnum$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3Task$ {
  /** @deprecated use `V3Task$inboundSchema` instead. */
  export const inboundSchema = V3Task$inboundSchema;
  /** @deprecated use `V3Task$outboundSchema` instead. */
  export const outboundSchema = V3Task$outboundSchema;
  /** @deprecated use `V3Task$Outbound` instead. */
  export type Outbound = V3Task$Outbound;
}

export function v3TaskToJSON(v3Task: V3Task): string {
  return JSON.stringify(V3Task$outboundSchema.parse(v3Task));
}

export function v3TaskFromJSON(
  jsonString: string,
): SafeParseResult<V3Task, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3Task$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3Task' from JSON`,
  );
}
