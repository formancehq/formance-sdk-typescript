/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Pool, Pool$ } from "./pool";
import * as z from "zod";

export type PoolsCursorCursor = {
    data: Array<Pool>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type PoolsCursor = {
    cursor: PoolsCursorCursor;
};

/** @internal */
export namespace PoolsCursorCursor$ {
    export const inboundSchema: z.ZodType<PoolsCursorCursor, z.ZodTypeDef, unknown> = z.object({
        data: z.array(Pool$.inboundSchema),
        hasMore: z.boolean(),
        next: z.string().optional(),
        pageSize: z.number().int(),
        previous: z.string().optional(),
    });

    export type Outbound = {
        data: Array<Pool$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PoolsCursorCursor> = z.object({
        data: z.array(Pool$.outboundSchema),
        hasMore: z.boolean(),
        next: z.string().optional(),
        pageSize: z.number().int(),
        previous: z.string().optional(),
    });
}

/** @internal */
export namespace PoolsCursor$ {
    export const inboundSchema: z.ZodType<PoolsCursor, z.ZodTypeDef, unknown> = z.object({
        cursor: z.lazy(() => PoolsCursorCursor$.inboundSchema),
    });

    export type Outbound = {
        cursor: PoolsCursorCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PoolsCursor> = z.object({
        cursor: z.lazy(() => PoolsCursorCursor$.outboundSchema),
    });
}
