/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type V2Volume = {
    balance?: number | undefined;
    input: number;
    output: number;
};

/** @internal */
export namespace V2Volume$ {
    export type Inbound = {
        balance?: number | undefined;
        input: number;
        output: number;
    };

    export const inboundSchema: z.ZodType<V2Volume, z.ZodTypeDef, Inbound> = z
        .object({
            balance: z.number().int().optional(),
            input: z.number().int(),
            output: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.balance === undefined ? null : { balance: v.balance }),
                input: v.input,
                output: v.output,
            };
        });

    export type Outbound = {
        balance?: number | undefined;
        input: number;
        output: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2Volume> = z
        .object({
            balance: z.number().int().optional(),
            input: z.number().int(),
            output: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.balance === undefined ? null : { balance: v.balance }),
                input: v.input,
                output: v.output,
            };
        });
}
