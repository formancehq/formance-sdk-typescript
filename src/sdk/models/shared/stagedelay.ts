/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StageDelay = {
  duration?: string | undefined;
  until?: Date | undefined;
};

/** @internal */
export const StageDelay$inboundSchema: z.ZodType<
  StageDelay,
  z.ZodTypeDef,
  unknown
> = z.object({
  duration: z.string().optional(),
  until: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type StageDelay$Outbound = {
  duration?: string | undefined;
  until?: string | undefined;
};

/** @internal */
export const StageDelay$outboundSchema: z.ZodType<
  StageDelay$Outbound,
  z.ZodTypeDef,
  StageDelay
> = z.object({
  duration: z.string().optional(),
  until: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageDelay$ {
  /** @deprecated use `StageDelay$inboundSchema` instead. */
  export const inboundSchema = StageDelay$inboundSchema;
  /** @deprecated use `StageDelay$outboundSchema` instead. */
  export const outboundSchema = StageDelay$outboundSchema;
  /** @deprecated use `StageDelay$Outbound` instead. */
  export type Outbound = StageDelay$Outbound;
}

export function stageDelayToJSON(stageDelay: StageDelay): string {
  return JSON.stringify(StageDelay$outboundSchema.parse(stageDelay));
}

export function stageDelayFromJSON(
  jsonString: string,
): SafeParseResult<StageDelay, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageDelay$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageDelay' from JSON`,
  );
}
