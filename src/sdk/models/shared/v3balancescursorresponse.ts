/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3Balance,
  V3Balance$inboundSchema,
  V3Balance$Outbound,
  V3Balance$outboundSchema,
} from "./v3balance.js";

export type V3BalancesCursorResponseCursor = {
  data: Array<V3Balance>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V3BalancesCursorResponse = {
  cursor: V3BalancesCursorResponseCursor;
};

/** @internal */
export const V3BalancesCursorResponseCursor$inboundSchema: z.ZodType<
  V3BalancesCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V3Balance$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V3BalancesCursorResponseCursor$Outbound = {
  data: Array<V3Balance$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V3BalancesCursorResponseCursor$outboundSchema: z.ZodType<
  V3BalancesCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  V3BalancesCursorResponseCursor
> = z.object({
  data: z.array(V3Balance$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3BalancesCursorResponseCursor$ {
  /** @deprecated use `V3BalancesCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = V3BalancesCursorResponseCursor$inboundSchema;
  /** @deprecated use `V3BalancesCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema = V3BalancesCursorResponseCursor$outboundSchema;
  /** @deprecated use `V3BalancesCursorResponseCursor$Outbound` instead. */
  export type Outbound = V3BalancesCursorResponseCursor$Outbound;
}

export function v3BalancesCursorResponseCursorToJSON(
  v3BalancesCursorResponseCursor: V3BalancesCursorResponseCursor,
): string {
  return JSON.stringify(
    V3BalancesCursorResponseCursor$outboundSchema.parse(
      v3BalancesCursorResponseCursor,
    ),
  );
}

export function v3BalancesCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<V3BalancesCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3BalancesCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3BalancesCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const V3BalancesCursorResponse$inboundSchema: z.ZodType<
  V3BalancesCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V3BalancesCursorResponseCursor$inboundSchema),
});

/** @internal */
export type V3BalancesCursorResponse$Outbound = {
  cursor: V3BalancesCursorResponseCursor$Outbound;
};

/** @internal */
export const V3BalancesCursorResponse$outboundSchema: z.ZodType<
  V3BalancesCursorResponse$Outbound,
  z.ZodTypeDef,
  V3BalancesCursorResponse
> = z.object({
  cursor: z.lazy(() => V3BalancesCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3BalancesCursorResponse$ {
  /** @deprecated use `V3BalancesCursorResponse$inboundSchema` instead. */
  export const inboundSchema = V3BalancesCursorResponse$inboundSchema;
  /** @deprecated use `V3BalancesCursorResponse$outboundSchema` instead. */
  export const outboundSchema = V3BalancesCursorResponse$outboundSchema;
  /** @deprecated use `V3BalancesCursorResponse$Outbound` instead. */
  export type Outbound = V3BalancesCursorResponse$Outbound;
}

export function v3BalancesCursorResponseToJSON(
  v3BalancesCursorResponse: V3BalancesCursorResponse,
): string {
  return JSON.stringify(
    V3BalancesCursorResponse$outboundSchema.parse(v3BalancesCursorResponse),
  );
}

export function v3BalancesCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3BalancesCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3BalancesCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3BalancesCursorResponse' from JSON`,
  );
}
