/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentScheme, PaymentScheme$ } from "./paymentscheme";
import { PaymentStatus, PaymentStatus$ } from "./paymentstatus";
import { PaymentType, PaymentType$ } from "./paymenttype";
import * as z from "zod";

export type PaymentRequest = {
    amount: bigint;
    asset: string;
    connectorID: string;
    createdAt: Date;
    destinationAccountID?: string | undefined;
    reference: string;
    scheme: PaymentScheme;
    sourceAccountID?: string | undefined;
    status: PaymentStatus;
    type: PaymentType;
};

/** @internal */
export namespace PaymentRequest$ {
    export const inboundSchema: z.ZodType<PaymentRequest, z.ZodTypeDef, unknown> = z.object({
        amount: z.number().transform((v) => BigInt(v)),
        asset: z.string(),
        connectorID: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        destinationAccountID: z.string().optional(),
        reference: z.string(),
        scheme: PaymentScheme$.inboundSchema,
        sourceAccountID: z.string().optional(),
        status: PaymentStatus$.inboundSchema,
        type: PaymentType$.inboundSchema,
    });

    export type Outbound = {
        amount: number;
        asset: string;
        connectorID: string;
        createdAt: string;
        destinationAccountID?: string | undefined;
        reference: string;
        scheme: string;
        sourceAccountID?: string | undefined;
        status: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentRequest> = z.object({
        amount: z.bigint().transform((v) => Number(v)),
        asset: z.string(),
        connectorID: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        destinationAccountID: z.string().optional(),
        reference: z.string(),
        scheme: PaymentScheme$.outboundSchema,
        sourceAccountID: z.string().optional(),
        status: PaymentStatus$.outboundSchema,
        type: PaymentType$.outboundSchema,
    });
}
