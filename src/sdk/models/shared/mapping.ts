/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Contract, Contract$ } from "./contract";
import { z } from "zod";

export type Mapping = {
    contracts: Array<Contract>;
};

/** @internal */
export namespace Mapping$ {
    export type Inbound = {
        contracts: Array<Contract$.Inbound>;
    };

    export const inboundSchema: z.ZodType<Mapping, z.ZodTypeDef, Inbound> = z
        .object({
            contracts: z.array(Contract$.inboundSchema),
        })
        .transform((v) => {
            return {
                contracts: v.contracts,
            };
        });

    export type Outbound = {
        contracts: Array<Contract$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Mapping> = z
        .object({
            contracts: z.array(Contract$.outboundSchema),
        })
        .transform((v) => {
            return {
                contracts: v.contracts,
            };
        });
}
