/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BankAccountRequest = {
  accountNumber?: string | undefined;
  connectorID?: string | undefined;
  country: string;
  iban?: string | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
  swiftBicCode?: string | undefined;
};

/** @internal */
export const BankAccountRequest$inboundSchema: z.ZodType<
  BankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountNumber: z.string().optional(),
  connectorID: z.string().optional(),
  country: z.string(),
  iban: z.string().optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
  swiftBicCode: z.string().optional(),
});

/** @internal */
export type BankAccountRequest$Outbound = {
  accountNumber?: string | undefined;
  connectorID?: string | undefined;
  country: string;
  iban?: string | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
  swiftBicCode?: string | undefined;
};

/** @internal */
export const BankAccountRequest$outboundSchema: z.ZodType<
  BankAccountRequest$Outbound,
  z.ZodTypeDef,
  BankAccountRequest
> = z.object({
  accountNumber: z.string().optional(),
  connectorID: z.string().optional(),
  country: z.string(),
  iban: z.string().optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
  swiftBicCode: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountRequest$ {
  /** @deprecated use `BankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = BankAccountRequest$inboundSchema;
  /** @deprecated use `BankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = BankAccountRequest$outboundSchema;
  /** @deprecated use `BankAccountRequest$Outbound` instead. */
  export type Outbound = BankAccountRequest$Outbound;
}

export function bankAccountRequestToJSON(
  bankAccountRequest: BankAccountRequest,
): string {
  return JSON.stringify(
    BankAccountRequest$outboundSchema.parse(bankAccountRequest),
  );
}

export function bankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountRequest' from JSON`,
  );
}
