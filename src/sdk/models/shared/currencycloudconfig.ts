/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CurrencyCloudConfig = {
  apiKey: string;
  /**
   * The endpoint to use for the API. Defaults to https://devapi.currencycloud.com
   */
  endpoint?: string | undefined;
  /**
   * Username of the API Key holder
   */
  loginID: string;
  name: string;
  /**
   * The frequency at which the connector will fetch transactions
   */
  pollingPeriod?: string | undefined;
};

/** @internal */
export const CurrencyCloudConfig$inboundSchema: z.ZodType<
  CurrencyCloudConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
  endpoint: z.string().optional(),
  loginID: z.string(),
  name: z.string(),
  pollingPeriod: z.string().default("120s"),
});

/** @internal */
export type CurrencyCloudConfig$Outbound = {
  apiKey: string;
  endpoint?: string | undefined;
  loginID: string;
  name: string;
  pollingPeriod: string;
};

/** @internal */
export const CurrencyCloudConfig$outboundSchema: z.ZodType<
  CurrencyCloudConfig$Outbound,
  z.ZodTypeDef,
  CurrencyCloudConfig
> = z.object({
  apiKey: z.string(),
  endpoint: z.string().optional(),
  loginID: z.string(),
  name: z.string(),
  pollingPeriod: z.string().default("120s"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrencyCloudConfig$ {
  /** @deprecated use `CurrencyCloudConfig$inboundSchema` instead. */
  export const inboundSchema = CurrencyCloudConfig$inboundSchema;
  /** @deprecated use `CurrencyCloudConfig$outboundSchema` instead. */
  export const outboundSchema = CurrencyCloudConfig$outboundSchema;
  /** @deprecated use `CurrencyCloudConfig$Outbound` instead. */
  export type Outbound = CurrencyCloudConfig$Outbound;
}

export function currencyCloudConfigToJSON(
  currencyCloudConfig: CurrencyCloudConfig,
): string {
  return JSON.stringify(
    CurrencyCloudConfig$outboundSchema.parse(currencyCloudConfig),
  );
}

export function currencyCloudConfigFromJSON(
  jsonString: string,
): SafeParseResult<CurrencyCloudConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrencyCloudConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrencyCloudConfig' from JSON`,
  );
}
