/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ConfigUser = {
    endpoint: string;
    eventTypes: Array<string>;
    name?: string | undefined;
    secret?: string | undefined;
};

/** @internal */
export namespace ConfigUser$ {
    export const inboundSchema: z.ZodType<ConfigUser, z.ZodTypeDef, unknown> = z.object({
        endpoint: z.string(),
        eventTypes: z.array(z.string()),
        name: z.string().optional(),
        secret: z.string().optional(),
    });

    export type Outbound = {
        endpoint: string;
        eventTypes: Array<string>;
        name?: string | undefined;
        secret?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfigUser> = z.object({
        endpoint: z.string(),
        eventTypes: z.array(z.string()),
        name: z.string().optional(),
        secret: z.string().optional(),
    });
}
