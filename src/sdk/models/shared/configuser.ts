/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ConfigUser = {
    endpoint: string;
    eventTypes: Array<string>;
    secret?: string | undefined;
};

/** @internal */
export namespace ConfigUser$ {
    export type Inbound = {
        endpoint: string;
        eventTypes: Array<string>;
        secret?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ConfigUser, z.ZodTypeDef, Inbound> = z
        .object({
            endpoint: z.string(),
            eventTypes: z.array(z.string()),
            secret: z.string().optional(),
        })
        .transform((v) => {
            return {
                endpoint: v.endpoint,
                eventTypes: v.eventTypes,
                ...(v.secret === undefined ? null : { secret: v.secret }),
            };
        });

    export type Outbound = {
        endpoint: string;
        eventTypes: Array<string>;
        secret?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfigUser> = z
        .object({
            endpoint: z.string(),
            eventTypes: z.array(z.string()),
            secret: z.string().optional(),
        })
        .transform((v) => {
            return {
                endpoint: v.endpoint,
                eventTypes: v.eventTypes,
                ...(v.secret === undefined ? null : { secret: v.secret }),
            };
        });
}
