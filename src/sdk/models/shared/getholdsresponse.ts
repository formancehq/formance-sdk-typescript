/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Hold, Hold$ } from "./hold";
import * as z from "zod";

export type GetHoldsResponseCursor = {
    data: Array<Hold>;
    hasMore?: boolean | undefined;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type GetHoldsResponse = {
    cursor: GetHoldsResponseCursor;
};

/** @internal */
export namespace GetHoldsResponseCursor$ {
    export const inboundSchema: z.ZodType<GetHoldsResponseCursor, z.ZodTypeDef, unknown> = z.object(
        {
            data: z.array(Hold$.inboundSchema),
            hasMore: z.boolean().optional(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        }
    );

    export type Outbound = {
        data: Array<Hold$.Outbound>;
        hasMore?: boolean | undefined;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetHoldsResponseCursor> =
        z.object({
            data: z.array(Hold$.outboundSchema),
            hasMore: z.boolean().optional(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });
}

/** @internal */
export namespace GetHoldsResponse$ {
    export const inboundSchema: z.ZodType<GetHoldsResponse, z.ZodTypeDef, unknown> = z.object({
        cursor: z.lazy(() => GetHoldsResponseCursor$.inboundSchema),
    });

    export type Outbound = {
        cursor: GetHoldsResponseCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetHoldsResponse> = z.object({
        cursor: z.lazy(() => GetHoldsResponseCursor$.outboundSchema),
    });
}
