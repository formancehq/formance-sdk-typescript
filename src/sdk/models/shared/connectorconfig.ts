/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AdyenConfig,
  AdyenConfig$inboundSchema,
  AdyenConfig$Outbound,
  AdyenConfig$outboundSchema,
} from "./adyenconfig.js";
import {
  AtlarConfig,
  AtlarConfig$inboundSchema,
  AtlarConfig$Outbound,
  AtlarConfig$outboundSchema,
} from "./atlarconfig.js";
import {
  BankingCircleConfig,
  BankingCircleConfig$inboundSchema,
  BankingCircleConfig$Outbound,
  BankingCircleConfig$outboundSchema,
} from "./bankingcircleconfig.js";
import {
  CurrencyCloudConfig,
  CurrencyCloudConfig$inboundSchema,
  CurrencyCloudConfig$Outbound,
  CurrencyCloudConfig$outboundSchema,
} from "./currencycloudconfig.js";
import {
  DummyPayConfig,
  DummyPayConfig$inboundSchema,
  DummyPayConfig$Outbound,
  DummyPayConfig$outboundSchema,
} from "./dummypayconfig.js";
import {
  GenericConfig,
  GenericConfig$inboundSchema,
  GenericConfig$Outbound,
  GenericConfig$outboundSchema,
} from "./genericconfig.js";
import {
  MangoPayConfig,
  MangoPayConfig$inboundSchema,
  MangoPayConfig$Outbound,
  MangoPayConfig$outboundSchema,
} from "./mangopayconfig.js";
import {
  ModulrConfig,
  ModulrConfig$inboundSchema,
  ModulrConfig$Outbound,
  ModulrConfig$outboundSchema,
} from "./modulrconfig.js";
import {
  MoneycorpConfig,
  MoneycorpConfig$inboundSchema,
  MoneycorpConfig$Outbound,
  MoneycorpConfig$outboundSchema,
} from "./moneycorpconfig.js";
import {
  StripeConfig,
  StripeConfig$inboundSchema,
  StripeConfig$Outbound,
  StripeConfig$outboundSchema,
} from "./stripeconfig.js";
import {
  WiseConfig,
  WiseConfig$inboundSchema,
  WiseConfig$Outbound,
  WiseConfig$outboundSchema,
} from "./wiseconfig.js";

export type ConnectorConfig =
  | (BankingCircleConfig & { provider: "Bankingcircle" })
  | (MangoPayConfig & { provider: "Mangopay" })
  | (MoneycorpConfig & { provider: "Moneycorp" })
  | (AdyenConfig & { provider: "Adyen" })
  | (AtlarConfig & { provider: "Atlar" })
  | (CurrencyCloudConfig & { provider: "Currencycloud" })
  | (GenericConfig & { provider: "Generic" })
  | (ModulrConfig & { provider: "Modulr" })
  | (DummyPayConfig & { provider: "Dummypay" })
  | (StripeConfig & { provider: "Stripe" })
  | (WiseConfig & { provider: "Wise" });

/** @internal */
export const ConnectorConfig$inboundSchema: z.ZodType<
  ConnectorConfig,
  z.ZodTypeDef,
  unknown
> = z.union([
  BankingCircleConfig$inboundSchema.and(
    z.object({ provider: z.literal("Bankingcircle") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  MangoPayConfig$inboundSchema.and(
    z.object({ provider: z.literal("Mangopay") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  MoneycorpConfig$inboundSchema.and(
    z.object({ provider: z.literal("Moneycorp") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AdyenConfig$inboundSchema.and(
    z.object({ provider: z.literal("Adyen") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AtlarConfig$inboundSchema.and(
    z.object({ provider: z.literal("Atlar") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  CurrencyCloudConfig$inboundSchema.and(
    z.object({ provider: z.literal("Currencycloud") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  GenericConfig$inboundSchema.and(
    z.object({ provider: z.literal("Generic") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  ModulrConfig$inboundSchema.and(
    z.object({ provider: z.literal("Modulr") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  DummyPayConfig$inboundSchema.and(
    z.object({ provider: z.literal("Dummypay") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  StripeConfig$inboundSchema.and(
    z.object({ provider: z.literal("Stripe") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  WiseConfig$inboundSchema.and(
    z.object({ provider: z.literal("Wise") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/** @internal */
export type ConnectorConfig$Outbound =
  | (BankingCircleConfig$Outbound & { provider: "Bankingcircle" })
  | (MangoPayConfig$Outbound & { provider: "Mangopay" })
  | (MoneycorpConfig$Outbound & { provider: "Moneycorp" })
  | (AdyenConfig$Outbound & { provider: "Adyen" })
  | (AtlarConfig$Outbound & { provider: "Atlar" })
  | (CurrencyCloudConfig$Outbound & { provider: "Currencycloud" })
  | (GenericConfig$Outbound & { provider: "Generic" })
  | (ModulrConfig$Outbound & { provider: "Modulr" })
  | (DummyPayConfig$Outbound & { provider: "Dummypay" })
  | (StripeConfig$Outbound & { provider: "Stripe" })
  | (WiseConfig$Outbound & { provider: "Wise" });

/** @internal */
export const ConnectorConfig$outboundSchema: z.ZodType<
  ConnectorConfig$Outbound,
  z.ZodTypeDef,
  ConnectorConfig
> = z.union([
  BankingCircleConfig$outboundSchema.and(
    z.object({ provider: z.literal("Bankingcircle") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  MangoPayConfig$outboundSchema.and(
    z.object({ provider: z.literal("Mangopay") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  MoneycorpConfig$outboundSchema.and(
    z.object({ provider: z.literal("Moneycorp") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AdyenConfig$outboundSchema.and(
    z.object({ provider: z.literal("Adyen") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  AtlarConfig$outboundSchema.and(
    z.object({ provider: z.literal("Atlar") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  CurrencyCloudConfig$outboundSchema.and(
    z.object({ provider: z.literal("Currencycloud") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  GenericConfig$outboundSchema.and(
    z.object({ provider: z.literal("Generic") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  ModulrConfig$outboundSchema.and(
    z.object({ provider: z.literal("Modulr") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  DummyPayConfig$outboundSchema.and(
    z.object({ provider: z.literal("Dummypay") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  StripeConfig$outboundSchema.and(
    z.object({ provider: z.literal("Stripe") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
  WiseConfig$outboundSchema.and(
    z.object({ provider: z.literal("Wise") }).transform((v) => ({
      provider: v.provider,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorConfig$ {
  /** @deprecated use `ConnectorConfig$inboundSchema` instead. */
  export const inboundSchema = ConnectorConfig$inboundSchema;
  /** @deprecated use `ConnectorConfig$outboundSchema` instead. */
  export const outboundSchema = ConnectorConfig$outboundSchema;
  /** @deprecated use `ConnectorConfig$Outbound` instead. */
  export type Outbound = ConnectorConfig$Outbound;
}

export function connectorConfigToJSON(
  connectorConfig: ConnectorConfig,
): string {
  return JSON.stringify(ConnectorConfig$outboundSchema.parse(connectorConfig));
}

export function connectorConfigFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorConfig' from JSON`,
  );
}
