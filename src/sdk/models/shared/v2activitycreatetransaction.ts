/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrchestrationV2PostTransaction,
  OrchestrationV2PostTransaction$inboundSchema,
  OrchestrationV2PostTransaction$Outbound,
  OrchestrationV2PostTransaction$outboundSchema,
} from "./orchestrationv2posttransaction.js";

export type V2ActivityCreateTransaction = {
  data?: OrchestrationV2PostTransaction | undefined;
  ledger?: string | undefined;
};

/** @internal */
export const V2ActivityCreateTransaction$inboundSchema: z.ZodType<
  V2ActivityCreateTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: OrchestrationV2PostTransaction$inboundSchema.optional(),
  ledger: z.string().optional(),
});

/** @internal */
export type V2ActivityCreateTransaction$Outbound = {
  data?: OrchestrationV2PostTransaction$Outbound | undefined;
  ledger?: string | undefined;
};

/** @internal */
export const V2ActivityCreateTransaction$outboundSchema: z.ZodType<
  V2ActivityCreateTransaction$Outbound,
  z.ZodTypeDef,
  V2ActivityCreateTransaction
> = z.object({
  data: OrchestrationV2PostTransaction$outboundSchema.optional(),
  ledger: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ActivityCreateTransaction$ {
  /** @deprecated use `V2ActivityCreateTransaction$inboundSchema` instead. */
  export const inboundSchema = V2ActivityCreateTransaction$inboundSchema;
  /** @deprecated use `V2ActivityCreateTransaction$outboundSchema` instead. */
  export const outboundSchema = V2ActivityCreateTransaction$outboundSchema;
  /** @deprecated use `V2ActivityCreateTransaction$Outbound` instead. */
  export type Outbound = V2ActivityCreateTransaction$Outbound;
}

export function v2ActivityCreateTransactionToJSON(
  v2ActivityCreateTransaction: V2ActivityCreateTransaction,
): string {
  return JSON.stringify(
    V2ActivityCreateTransaction$outboundSchema.parse(
      v2ActivityCreateTransaction,
    ),
  );
}

export function v2ActivityCreateTransactionFromJSON(
  jsonString: string,
): SafeParseResult<V2ActivityCreateTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ActivityCreateTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ActivityCreateTransaction' from JSON`,
  );
}
