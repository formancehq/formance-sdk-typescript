/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2PostTransaction, V2PostTransaction$ } from "./v2posttransaction";
import * as z from "zod";

export type V2ActivityCreateTransaction = {
    data?: V2PostTransaction | undefined;
    ledger?: string | undefined;
};

/** @internal */
export namespace V2ActivityCreateTransaction$ {
    export type Inbound = {
        data?: V2PostTransaction$.Inbound | undefined;
        ledger?: string | undefined;
    };

    export const inboundSchema: z.ZodType<V2ActivityCreateTransaction, z.ZodTypeDef, Inbound> = z
        .object({
            data: V2PostTransaction$.inboundSchema.optional(),
            ledger: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.ledger === undefined ? null : { ledger: v.ledger }),
            };
        });

    export type Outbound = {
        data?: V2PostTransaction$.Outbound | undefined;
        ledger?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ActivityCreateTransaction> = z
        .object({
            data: V2PostTransaction$.outboundSchema.optional(),
            ledger: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.ledger === undefined ? null : { ledger: v.ledger }),
            };
        });
}
