/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Posting,
  Posting$inboundSchema,
  Posting$Outbound,
  Posting$outboundSchema,
} from "./posting.js";

export type OrchestrationPostTransactionScript = {
  plain: string;
  vars?: { [k: string]: any } | undefined;
};

export type OrchestrationPostTransaction = {
  metadata: { [k: string]: string };
  postings?: Array<Posting> | undefined;
  reference?: string | undefined;
  script?: OrchestrationPostTransactionScript | undefined;
  timestamp?: Date | undefined;
};

/** @internal */
export const OrchestrationPostTransactionScript$inboundSchema: z.ZodType<
  OrchestrationPostTransactionScript,
  z.ZodTypeDef,
  unknown
> = z.object({
  plain: z.string(),
  vars: z.record(z.any()).optional(),
});

/** @internal */
export type OrchestrationPostTransactionScript$Outbound = {
  plain: string;
  vars?: { [k: string]: any } | undefined;
};

/** @internal */
export const OrchestrationPostTransactionScript$outboundSchema: z.ZodType<
  OrchestrationPostTransactionScript$Outbound,
  z.ZodTypeDef,
  OrchestrationPostTransactionScript
> = z.object({
  plain: z.string(),
  vars: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationPostTransactionScript$ {
  /** @deprecated use `OrchestrationPostTransactionScript$inboundSchema` instead. */
  export const inboundSchema = OrchestrationPostTransactionScript$inboundSchema;
  /** @deprecated use `OrchestrationPostTransactionScript$outboundSchema` instead. */
  export const outboundSchema =
    OrchestrationPostTransactionScript$outboundSchema;
  /** @deprecated use `OrchestrationPostTransactionScript$Outbound` instead. */
  export type Outbound = OrchestrationPostTransactionScript$Outbound;
}

export function orchestrationPostTransactionScriptToJSON(
  orchestrationPostTransactionScript: OrchestrationPostTransactionScript,
): string {
  return JSON.stringify(
    OrchestrationPostTransactionScript$outboundSchema.parse(
      orchestrationPostTransactionScript,
    ),
  );
}

export function orchestrationPostTransactionScriptFromJSON(
  jsonString: string,
): SafeParseResult<OrchestrationPostTransactionScript, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OrchestrationPostTransactionScript$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrchestrationPostTransactionScript' from JSON`,
  );
}

/** @internal */
export const OrchestrationPostTransaction$inboundSchema: z.ZodType<
  OrchestrationPostTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.string()),
  postings: z.array(Posting$inboundSchema).optional(),
  reference: z.string().optional(),
  script: z.lazy(() => OrchestrationPostTransactionScript$inboundSchema)
    .optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type OrchestrationPostTransaction$Outbound = {
  metadata: { [k: string]: string };
  postings?: Array<Posting$Outbound> | undefined;
  reference?: string | undefined;
  script?: OrchestrationPostTransactionScript$Outbound | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const OrchestrationPostTransaction$outboundSchema: z.ZodType<
  OrchestrationPostTransaction$Outbound,
  z.ZodTypeDef,
  OrchestrationPostTransaction
> = z.object({
  metadata: z.record(z.string()),
  postings: z.array(Posting$outboundSchema).optional(),
  reference: z.string().optional(),
  script: z.lazy(() => OrchestrationPostTransactionScript$outboundSchema)
    .optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationPostTransaction$ {
  /** @deprecated use `OrchestrationPostTransaction$inboundSchema` instead. */
  export const inboundSchema = OrchestrationPostTransaction$inboundSchema;
  /** @deprecated use `OrchestrationPostTransaction$outboundSchema` instead. */
  export const outboundSchema = OrchestrationPostTransaction$outboundSchema;
  /** @deprecated use `OrchestrationPostTransaction$Outbound` instead. */
  export type Outbound = OrchestrationPostTransaction$Outbound;
}

export function orchestrationPostTransactionToJSON(
  orchestrationPostTransaction: OrchestrationPostTransaction,
): string {
  return JSON.stringify(
    OrchestrationPostTransaction$outboundSchema.parse(
      orchestrationPostTransaction,
    ),
  );
}

export function orchestrationPostTransactionFromJSON(
  jsonString: string,
): SafeParseResult<OrchestrationPostTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrchestrationPostTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrchestrationPostTransaction' from JSON`,
  );
}
