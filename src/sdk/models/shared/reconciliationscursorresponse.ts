/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reconciliation,
  Reconciliation$inboundSchema,
  Reconciliation$Outbound,
  Reconciliation$outboundSchema,
} from "./reconciliation.js";

export type ReconciliationsCursorResponseCursor = {
  data: Array<Reconciliation>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/**
 * OK
 */
export type ReconciliationsCursorResponse = {
  cursor: ReconciliationsCursorResponseCursor;
};

/** @internal */
export const ReconciliationsCursorResponseCursor$inboundSchema: z.ZodType<
  ReconciliationsCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Reconciliation$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type ReconciliationsCursorResponseCursor$Outbound = {
  data: Array<Reconciliation$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const ReconciliationsCursorResponseCursor$outboundSchema: z.ZodType<
  ReconciliationsCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  ReconciliationsCursorResponseCursor
> = z.object({
  data: z.array(Reconciliation$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconciliationsCursorResponseCursor$ {
  /** @deprecated use `ReconciliationsCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema =
    ReconciliationsCursorResponseCursor$inboundSchema;
  /** @deprecated use `ReconciliationsCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema =
    ReconciliationsCursorResponseCursor$outboundSchema;
  /** @deprecated use `ReconciliationsCursorResponseCursor$Outbound` instead. */
  export type Outbound = ReconciliationsCursorResponseCursor$Outbound;
}

export function reconciliationsCursorResponseCursorToJSON(
  reconciliationsCursorResponseCursor: ReconciliationsCursorResponseCursor,
): string {
  return JSON.stringify(
    ReconciliationsCursorResponseCursor$outboundSchema.parse(
      reconciliationsCursorResponseCursor,
    ),
  );
}

export function reconciliationsCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<ReconciliationsCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ReconciliationsCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconciliationsCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const ReconciliationsCursorResponse$inboundSchema: z.ZodType<
  ReconciliationsCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => ReconciliationsCursorResponseCursor$inboundSchema),
});

/** @internal */
export type ReconciliationsCursorResponse$Outbound = {
  cursor: ReconciliationsCursorResponseCursor$Outbound;
};

/** @internal */
export const ReconciliationsCursorResponse$outboundSchema: z.ZodType<
  ReconciliationsCursorResponse$Outbound,
  z.ZodTypeDef,
  ReconciliationsCursorResponse
> = z.object({
  cursor: z.lazy(() => ReconciliationsCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconciliationsCursorResponse$ {
  /** @deprecated use `ReconciliationsCursorResponse$inboundSchema` instead. */
  export const inboundSchema = ReconciliationsCursorResponse$inboundSchema;
  /** @deprecated use `ReconciliationsCursorResponse$outboundSchema` instead. */
  export const outboundSchema = ReconciliationsCursorResponse$outboundSchema;
  /** @deprecated use `ReconciliationsCursorResponse$Outbound` instead. */
  export type Outbound = ReconciliationsCursorResponse$Outbound;
}

export function reconciliationsCursorResponseToJSON(
  reconciliationsCursorResponse: ReconciliationsCursorResponse,
): string {
  return JSON.stringify(
    ReconciliationsCursorResponse$outboundSchema.parse(
      reconciliationsCursorResponse,
    ),
  );
}

export function reconciliationsCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReconciliationsCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReconciliationsCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReconciliationsCursorResponse' from JSON`,
  );
}
