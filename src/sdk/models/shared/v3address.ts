/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3Address = {
  city?: string | undefined;
  country?: string | undefined;
  postalCode?: string | undefined;
  region?: string | undefined;
  streetName?: string | undefined;
  streetNumber?: string | undefined;
};

/** @internal */
export const V3Address$inboundSchema: z.ZodType<
  V3Address,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  region: z.string().optional(),
  streetName: z.string().optional(),
  streetNumber: z.string().optional(),
});

/** @internal */
export type V3Address$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postalCode?: string | undefined;
  region?: string | undefined;
  streetName?: string | undefined;
  streetNumber?: string | undefined;
};

/** @internal */
export const V3Address$outboundSchema: z.ZodType<
  V3Address$Outbound,
  z.ZodTypeDef,
  V3Address
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  region: z.string().optional(),
  streetName: z.string().optional(),
  streetNumber: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3Address$ {
  /** @deprecated use `V3Address$inboundSchema` instead. */
  export const inboundSchema = V3Address$inboundSchema;
  /** @deprecated use `V3Address$outboundSchema` instead. */
  export const outboundSchema = V3Address$outboundSchema;
  /** @deprecated use `V3Address$Outbound` instead. */
  export type Outbound = V3Address$Outbound;
}

export function v3AddressToJSON(v3Address: V3Address): string {
  return JSON.stringify(V3Address$outboundSchema.parse(v3Address));
}

export function v3AddressFromJSON(
  jsonString: string,
): SafeParseResult<V3Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3Address' from JSON`,
  );
}
