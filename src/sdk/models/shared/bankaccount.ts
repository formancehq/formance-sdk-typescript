/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type BankAccount = {
    accountID?: string | undefined;
    accountNumber?: string | undefined;
    connectorID: string;
    country: string;
    createdAt: Date;
    iban?: string | undefined;
    id: string;
    metadata?: Record<string, string> | null | undefined;
    name: string;
    provider?: string | undefined;
    swiftBicCode?: string | undefined;
};

/** @internal */
export namespace BankAccount$ {
    export type Inbound = {
        accountID?: string | undefined;
        accountNumber?: string | undefined;
        connectorID: string;
        country: string;
        createdAt: string;
        iban?: string | undefined;
        id: string;
        metadata?: Record<string, string> | null | undefined;
        name: string;
        provider?: string | undefined;
        swiftBicCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<BankAccount, z.ZodTypeDef, Inbound> = z
        .object({
            accountID: z.string().optional(),
            accountNumber: z.string().optional(),
            connectorID: z.string(),
            country: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            iban: z.string().optional(),
            id: z.string(),
            metadata: z.nullable(z.record(z.string())).optional(),
            name: z.string(),
            provider: z.string().optional(),
            swiftBicCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountID === undefined ? null : { accountID: v.accountID }),
                ...(v.accountNumber === undefined ? null : { accountNumber: v.accountNumber }),
                connectorID: v.connectorID,
                country: v.country,
                createdAt: v.createdAt,
                ...(v.iban === undefined ? null : { iban: v.iban }),
                id: v.id,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                name: v.name,
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.swiftBicCode === undefined ? null : { swiftBicCode: v.swiftBicCode }),
            };
        });

    export type Outbound = {
        accountID?: string | undefined;
        accountNumber?: string | undefined;
        connectorID: string;
        country: string;
        createdAt: string;
        iban?: string | undefined;
        id: string;
        metadata?: Record<string, string> | null | undefined;
        name: string;
        provider?: string | undefined;
        swiftBicCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankAccount> = z
        .object({
            accountID: z.string().optional(),
            accountNumber: z.string().optional(),
            connectorID: z.string(),
            country: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            iban: z.string().optional(),
            id: z.string(),
            metadata: z.nullable(z.record(z.string())).optional(),
            name: z.string(),
            provider: z.string().optional(),
            swiftBicCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountID === undefined ? null : { accountID: v.accountID }),
                ...(v.accountNumber === undefined ? null : { accountNumber: v.accountNumber }),
                connectorID: v.connectorID,
                country: v.country,
                createdAt: v.createdAt,
                ...(v.iban === undefined ? null : { iban: v.iban }),
                id: v.id,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                name: v.name,
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.swiftBicCode === undefined ? null : { swiftBicCode: v.swiftBicCode }),
            };
        });
}
