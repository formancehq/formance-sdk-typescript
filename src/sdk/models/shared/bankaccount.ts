/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    BankAccountRelatedAccounts,
    BankAccountRelatedAccounts$,
} from "./bankaccountrelatedaccounts";
import * as z from "zod";

export type BankAccount = {
    accountID?: string | undefined;
    accountNumber?: string | undefined;
    connectorID: string;
    country: string;
    createdAt: Date;
    iban?: string | undefined;
    id: string;
    metadata?: { [k: string]: string } | null | undefined;
    name: string;
    provider?: string | undefined;
    relatedAccounts?: Array<BankAccountRelatedAccounts> | undefined;
    swiftBicCode?: string | undefined;
};

/** @internal */
export namespace BankAccount$ {
    export const inboundSchema: z.ZodType<BankAccount, z.ZodTypeDef, unknown> = z.object({
        accountID: z.string().optional(),
        accountNumber: z.string().optional(),
        connectorID: z.string(),
        country: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        iban: z.string().optional(),
        id: z.string(),
        metadata: z.nullable(z.record(z.string())).optional(),
        name: z.string(),
        provider: z.string().optional(),
        relatedAccounts: z.array(BankAccountRelatedAccounts$.inboundSchema).optional(),
        swiftBicCode: z.string().optional(),
    });

    export type Outbound = {
        accountID?: string | undefined;
        accountNumber?: string | undefined;
        connectorID: string;
        country: string;
        createdAt: string;
        iban?: string | undefined;
        id: string;
        metadata?: { [k: string]: string } | null | undefined;
        name: string;
        provider?: string | undefined;
        relatedAccounts?: Array<BankAccountRelatedAccounts$.Outbound> | undefined;
        swiftBicCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankAccount> = z.object({
        accountID: z.string().optional(),
        accountNumber: z.string().optional(),
        connectorID: z.string(),
        country: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        iban: z.string().optional(),
        id: z.string(),
        metadata: z.nullable(z.record(z.string())).optional(),
        name: z.string(),
        provider: z.string().optional(),
        relatedAccounts: z.array(BankAccountRelatedAccounts$.outboundSchema).optional(),
        swiftBicCode: z.string().optional(),
    });
}
