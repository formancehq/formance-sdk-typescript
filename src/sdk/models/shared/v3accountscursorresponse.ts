/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3Account,
  V3Account$inboundSchema,
  V3Account$Outbound,
  V3Account$outboundSchema,
} from "./v3account.js";

export type V3AccountsCursorResponseCursor = {
  data: Array<V3Account>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V3AccountsCursorResponse = {
  cursor: V3AccountsCursorResponseCursor;
};

/** @internal */
export const V3AccountsCursorResponseCursor$inboundSchema: z.ZodType<
  V3AccountsCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V3Account$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V3AccountsCursorResponseCursor$Outbound = {
  data: Array<V3Account$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V3AccountsCursorResponseCursor$outboundSchema: z.ZodType<
  V3AccountsCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  V3AccountsCursorResponseCursor
> = z.object({
  data: z.array(V3Account$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3AccountsCursorResponseCursor$ {
  /** @deprecated use `V3AccountsCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = V3AccountsCursorResponseCursor$inboundSchema;
  /** @deprecated use `V3AccountsCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema = V3AccountsCursorResponseCursor$outboundSchema;
  /** @deprecated use `V3AccountsCursorResponseCursor$Outbound` instead. */
  export type Outbound = V3AccountsCursorResponseCursor$Outbound;
}

export function v3AccountsCursorResponseCursorToJSON(
  v3AccountsCursorResponseCursor: V3AccountsCursorResponseCursor,
): string {
  return JSON.stringify(
    V3AccountsCursorResponseCursor$outboundSchema.parse(
      v3AccountsCursorResponseCursor,
    ),
  );
}

export function v3AccountsCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<V3AccountsCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3AccountsCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3AccountsCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const V3AccountsCursorResponse$inboundSchema: z.ZodType<
  V3AccountsCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V3AccountsCursorResponseCursor$inboundSchema),
});

/** @internal */
export type V3AccountsCursorResponse$Outbound = {
  cursor: V3AccountsCursorResponseCursor$Outbound;
};

/** @internal */
export const V3AccountsCursorResponse$outboundSchema: z.ZodType<
  V3AccountsCursorResponse$Outbound,
  z.ZodTypeDef,
  V3AccountsCursorResponse
> = z.object({
  cursor: z.lazy(() => V3AccountsCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3AccountsCursorResponse$ {
  /** @deprecated use `V3AccountsCursorResponse$inboundSchema` instead. */
  export const inboundSchema = V3AccountsCursorResponse$inboundSchema;
  /** @deprecated use `V3AccountsCursorResponse$outboundSchema` instead. */
  export const outboundSchema = V3AccountsCursorResponse$outboundSchema;
  /** @deprecated use `V3AccountsCursorResponse$Outbound` instead. */
  export type Outbound = V3AccountsCursorResponse$Outbound;
}

export function v3AccountsCursorResponseToJSON(
  v3AccountsCursorResponse: V3AccountsCursorResponse,
): string {
  return JSON.stringify(
    V3AccountsCursorResponse$outboundSchema.parse(v3AccountsCursorResponse),
  );
}

export function v3AccountsCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3AccountsCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3AccountsCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3AccountsCursorResponse' from JSON`,
  );
}
