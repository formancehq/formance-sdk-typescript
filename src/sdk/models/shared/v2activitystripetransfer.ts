/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A set of key/value pairs that you can attach to a transfer object.
 *
 * @remarks
 * It can be useful for storing additional information about the transfer in a structured format.
 *
 */
export type V2ActivityStripeTransferMetadata = {};

export type V2ActivityStripeTransfer = {
    amount?: bigint | undefined;
    asset?: string | undefined;
    connectorID?: string | undefined;
    destination?: string | undefined;
    /**
     * A set of key/value pairs that you can attach to a transfer object.
     *
     * @remarks
     * It can be useful for storing additional information about the transfer in a structured format.
     *
     */
    metadata?: V2ActivityStripeTransferMetadata | undefined;
    waitingValidation?: boolean | undefined;
};

/** @internal */
export namespace V2ActivityStripeTransferMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<V2ActivityStripeTransferMetadata, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2ActivityStripeTransferMetadata
    > = z.object({});
}

/** @internal */
export namespace V2ActivityStripeTransfer$ {
    export type Inbound = {
        amount?: number | undefined;
        asset?: string | undefined;
        connectorID?: string | undefined;
        destination?: string | undefined;
        metadata?: V2ActivityStripeTransferMetadata$.Inbound | undefined;
        waitingValidation?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<V2ActivityStripeTransfer, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            asset: z.string().optional(),
            connectorID: z.string().optional(),
            destination: z.string().optional(),
            metadata: z.lazy(() => V2ActivityStripeTransferMetadata$.inboundSchema).optional(),
            waitingValidation: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.connectorID === undefined ? null : { connectorID: v.connectorID }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                waitingValidation: v.waitingValidation,
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        asset?: string | undefined;
        connectorID?: string | undefined;
        destination?: string | undefined;
        metadata?: V2ActivityStripeTransferMetadata$.Outbound | undefined;
        waitingValidation: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ActivityStripeTransfer> = z
        .object({
            amount: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            asset: z.string().optional(),
            connectorID: z.string().optional(),
            destination: z.string().optional(),
            metadata: z.lazy(() => V2ActivityStripeTransferMetadata$.outboundSchema).optional(),
            waitingValidation: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.connectorID === undefined ? null : { connectorID: v.connectorID }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                waitingValidation: v.waitingValidation,
            };
        });
}
