/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Posting, Posting$ } from "./posting";
import { Volume, Volume$ } from "./volume";
import * as z from "zod";

export type Transaction = {
    metadata?: { [k: string]: any } | null | undefined;
    postCommitVolumes?: { [k: string]: { [k: string]: Volume } } | undefined;
    postings: Array<Posting>;
    preCommitVolumes?: { [k: string]: { [k: string]: Volume } } | undefined;
    reference?: string | undefined;
    timestamp: Date;
    txid: bigint;
};

/** @internal */
export namespace Transaction$ {
    export const inboundSchema: z.ZodType<Transaction, z.ZodTypeDef, unknown> = z.object({
        metadata: z.nullable(z.record(z.any())).optional(),
        postCommitVolumes: z.record(z.record(Volume$.inboundSchema)).optional(),
        postings: z.array(Posting$.inboundSchema),
        preCommitVolumes: z.record(z.record(Volume$.inboundSchema)).optional(),
        reference: z.string().optional(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        txid: z.number().transform((v) => BigInt(v)),
    });

    export type Outbound = {
        metadata?: { [k: string]: any } | null | undefined;
        postCommitVolumes?: { [k: string]: { [k: string]: Volume$.Outbound } } | undefined;
        postings: Array<Posting$.Outbound>;
        preCommitVolumes?: { [k: string]: { [k: string]: Volume$.Outbound } } | undefined;
        reference?: string | undefined;
        timestamp: string;
        txid: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transaction> = z.object({
        metadata: z.nullable(z.record(z.any())).optional(),
        postCommitVolumes: z.record(z.record(Volume$.outboundSchema)).optional(),
        postings: z.array(Posting$.outboundSchema),
        preCommitVolumes: z.record(z.record(Volume$.outboundSchema)).optional(),
        reference: z.string().optional(),
        timestamp: z.date().transform((v) => v.toISOString()),
        txid: z.bigint().transform((v) => Number(v)),
    });
}
