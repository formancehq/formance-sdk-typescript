/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Posting,
  Posting$inboundSchema,
  Posting$Outbound,
  Posting$outboundSchema,
} from "./posting.js";
import {
  Volume,
  Volume$inboundSchema,
  Volume$Outbound,
  Volume$outboundSchema,
} from "./volume.js";

export type Transaction = {
  metadata?: { [k: string]: any } | null | undefined;
  postCommitVolumes?: { [k: string]: { [k: string]: Volume } } | undefined;
  postings: Array<Posting>;
  preCommitVolumes?: { [k: string]: { [k: string]: Volume } } | undefined;
  reference?: string | undefined;
  timestamp: Date;
  txid: bigint;
};

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.nullable(z.record(z.any())).optional(),
  postCommitVolumes: z.record(z.record(Volume$inboundSchema)).optional(),
  postings: z.array(Posting$inboundSchema),
  preCommitVolumes: z.record(z.record(Volume$inboundSchema)).optional(),
  reference: z.string().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  txid: z.number().transform(v => BigInt(v)),
});

/** @internal */
export type Transaction$Outbound = {
  metadata?: { [k: string]: any } | null | undefined;
  postCommitVolumes?:
    | { [k: string]: { [k: string]: Volume$Outbound } }
    | undefined;
  postings: Array<Posting$Outbound>;
  preCommitVolumes?:
    | { [k: string]: { [k: string]: Volume$Outbound } }
    | undefined;
  reference?: string | undefined;
  timestamp: string;
  txid: number;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  metadata: z.nullable(z.record(z.any())).optional(),
  postCommitVolumes: z.record(z.record(Volume$outboundSchema)).optional(),
  postings: z.array(Posting$outboundSchema),
  preCommitVolumes: z.record(z.record(Volume$outboundSchema)).optional(),
  reference: z.string().optional(),
  timestamp: z.date().transform(v => v.toISOString()),
  txid: z.bigint().transform(v => Number(v)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}
