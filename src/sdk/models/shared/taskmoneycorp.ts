/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskStatus,
  TaskStatus$inboundSchema,
  TaskStatus$outboundSchema,
} from "./taskstatus.js";

export type TaskMoneycorpDescriptor = {
  accountID?: string | undefined;
  key?: string | undefined;
  name?: string | undefined;
};

export type TaskMoneycorpState = {};

export type TaskMoneycorp = {
  connectorID: string;
  createdAt: Date;
  descriptor: TaskMoneycorpDescriptor;
  error?: string | null | undefined;
  id: string;
  state?: TaskMoneycorpState | null | undefined;
  status: TaskStatus;
  updatedAt: Date;
};

/** @internal */
export const TaskMoneycorpDescriptor$inboundSchema: z.ZodType<
  TaskMoneycorpDescriptor,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string().optional(),
  key: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type TaskMoneycorpDescriptor$Outbound = {
  accountID?: string | undefined;
  key?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const TaskMoneycorpDescriptor$outboundSchema: z.ZodType<
  TaskMoneycorpDescriptor$Outbound,
  z.ZodTypeDef,
  TaskMoneycorpDescriptor
> = z.object({
  accountID: z.string().optional(),
  key: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMoneycorpDescriptor$ {
  /** @deprecated use `TaskMoneycorpDescriptor$inboundSchema` instead. */
  export const inboundSchema = TaskMoneycorpDescriptor$inboundSchema;
  /** @deprecated use `TaskMoneycorpDescriptor$outboundSchema` instead. */
  export const outboundSchema = TaskMoneycorpDescriptor$outboundSchema;
  /** @deprecated use `TaskMoneycorpDescriptor$Outbound` instead. */
  export type Outbound = TaskMoneycorpDescriptor$Outbound;
}

export function taskMoneycorpDescriptorToJSON(
  taskMoneycorpDescriptor: TaskMoneycorpDescriptor,
): string {
  return JSON.stringify(
    TaskMoneycorpDescriptor$outboundSchema.parse(taskMoneycorpDescriptor),
  );
}

export function taskMoneycorpDescriptorFromJSON(
  jsonString: string,
): SafeParseResult<TaskMoneycorpDescriptor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMoneycorpDescriptor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMoneycorpDescriptor' from JSON`,
  );
}

/** @internal */
export const TaskMoneycorpState$inboundSchema: z.ZodType<
  TaskMoneycorpState,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMoneycorpState$Outbound = {};

/** @internal */
export const TaskMoneycorpState$outboundSchema: z.ZodType<
  TaskMoneycorpState$Outbound,
  z.ZodTypeDef,
  TaskMoneycorpState
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMoneycorpState$ {
  /** @deprecated use `TaskMoneycorpState$inboundSchema` instead. */
  export const inboundSchema = TaskMoneycorpState$inboundSchema;
  /** @deprecated use `TaskMoneycorpState$outboundSchema` instead. */
  export const outboundSchema = TaskMoneycorpState$outboundSchema;
  /** @deprecated use `TaskMoneycorpState$Outbound` instead. */
  export type Outbound = TaskMoneycorpState$Outbound;
}

export function taskMoneycorpStateToJSON(
  taskMoneycorpState: TaskMoneycorpState,
): string {
  return JSON.stringify(
    TaskMoneycorpState$outboundSchema.parse(taskMoneycorpState),
  );
}

export function taskMoneycorpStateFromJSON(
  jsonString: string,
): SafeParseResult<TaskMoneycorpState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMoneycorpState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMoneycorpState' from JSON`,
  );
}

/** @internal */
export const TaskMoneycorp$inboundSchema: z.ZodType<
  TaskMoneycorp,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  descriptor: z.lazy(() => TaskMoneycorpDescriptor$inboundSchema),
  error: z.nullable(z.string()).optional(),
  id: z.string(),
  state: z.nullable(z.lazy(() => TaskMoneycorpState$inboundSchema)).optional(),
  status: TaskStatus$inboundSchema,
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type TaskMoneycorp$Outbound = {
  connectorID: string;
  createdAt: string;
  descriptor: TaskMoneycorpDescriptor$Outbound;
  error?: string | null | undefined;
  id: string;
  state?: TaskMoneycorpState$Outbound | null | undefined;
  status: string;
  updatedAt: string;
};

/** @internal */
export const TaskMoneycorp$outboundSchema: z.ZodType<
  TaskMoneycorp$Outbound,
  z.ZodTypeDef,
  TaskMoneycorp
> = z.object({
  connectorID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  descriptor: z.lazy(() => TaskMoneycorpDescriptor$outboundSchema),
  error: z.nullable(z.string()).optional(),
  id: z.string(),
  state: z.nullable(z.lazy(() => TaskMoneycorpState$outboundSchema)).optional(),
  status: TaskStatus$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMoneycorp$ {
  /** @deprecated use `TaskMoneycorp$inboundSchema` instead. */
  export const inboundSchema = TaskMoneycorp$inboundSchema;
  /** @deprecated use `TaskMoneycorp$outboundSchema` instead. */
  export const outboundSchema = TaskMoneycorp$outboundSchema;
  /** @deprecated use `TaskMoneycorp$Outbound` instead. */
  export type Outbound = TaskMoneycorp$Outbound;
}

export function taskMoneycorpToJSON(taskMoneycorp: TaskMoneycorp): string {
  return JSON.stringify(TaskMoneycorp$outboundSchema.parse(taskMoneycorp));
}

export function taskMoneycorpFromJSON(
  jsonString: string,
): SafeParseResult<TaskMoneycorp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMoneycorp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMoneycorp' from JSON`,
  );
}
