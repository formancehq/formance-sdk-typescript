/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2StageStatus, V2StageStatus$ } from "./v2stagestatus";
import { z } from "zod";

export type V2WorkflowInstance = {
    createdAt: Date;
    error?: string | undefined;
    id: string;
    status?: Array<V2StageStatus> | undefined;
    terminated: boolean;
    terminatedAt?: Date | undefined;
    updatedAt: Date;
    workflowID: string;
};

/** @internal */
export namespace V2WorkflowInstance$ {
    export type Inbound = {
        createdAt: string;
        error?: string | undefined;
        id: string;
        status?: Array<V2StageStatus$.Inbound> | undefined;
        terminated: boolean;
        terminatedAt?: string | undefined;
        updatedAt: string;
        workflowID: string;
    };

    export const inboundSchema: z.ZodType<V2WorkflowInstance, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            error: z.string().optional(),
            id: z.string(),
            status: z.array(V2StageStatus$.inboundSchema).optional(),
            terminated: z.boolean(),
            terminatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            workflowID: z.string(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                ...(v.error === undefined ? null : { error: v.error }),
                id: v.id,
                ...(v.status === undefined ? null : { status: v.status }),
                terminated: v.terminated,
                ...(v.terminatedAt === undefined ? null : { terminatedAt: v.terminatedAt }),
                updatedAt: v.updatedAt,
                workflowID: v.workflowID,
            };
        });

    export type Outbound = {
        createdAt: string;
        error?: string | undefined;
        id: string;
        status?: Array<V2StageStatus$.Outbound> | undefined;
        terminated: boolean;
        terminatedAt?: string | undefined;
        updatedAt: string;
        workflowID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2WorkflowInstance> = z
        .object({
            createdAt: z.date().transform((v) => v.toISOString()),
            error: z.string().optional(),
            id: z.string(),
            status: z.array(V2StageStatus$.outboundSchema).optional(),
            terminated: z.boolean(),
            terminatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z.date().transform((v) => v.toISOString()),
            workflowID: z.string(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                ...(v.error === undefined ? null : { error: v.error }),
                id: v.id,
                ...(v.status === undefined ? null : { status: v.status }),
                terminated: v.terminated,
                ...(v.terminatedAt === undefined ? null : { terminatedAt: v.terminatedAt }),
                updatedAt: v.updatedAt,
                workflowID: v.workflowID,
            };
        });
}
