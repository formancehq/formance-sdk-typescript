/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { StageDelay, StageDelay$ } from "./stagedelay";
import { StageSend, StageSend$ } from "./stagesend";
import { StageWaitEvent, StageWaitEvent$ } from "./stagewaitevent";
import { z } from "zod";

export type WorkflowInstanceHistory = {
    error?: string | undefined;
    input: StageWaitEvent | StageDelay | StageSend;
    name: string;
    startedAt: Date;
    terminated: boolean;
    terminatedAt?: Date | undefined;
};

/** @internal */
export namespace WorkflowInstanceHistory$ {
    export type Inbound = {
        error?: string | undefined;
        input: StageWaitEvent$.Inbound | StageDelay$.Inbound | StageSend$.Inbound;
        name: string;
        startedAt: string;
        terminated: boolean;
        terminatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<WorkflowInstanceHistory, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.string().optional(),
            input: z.union([
                StageWaitEvent$.inboundSchema,
                StageDelay$.inboundSchema,
                StageSend$.inboundSchema,
            ]),
            name: z.string(),
            startedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            terminated: z.boolean(),
            terminatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.error === undefined ? null : { error: v.error }),
                input: v.input,
                name: v.name,
                startedAt: v.startedAt,
                terminated: v.terminated,
                ...(v.terminatedAt === undefined ? null : { terminatedAt: v.terminatedAt }),
            };
        });

    export type Outbound = {
        error?: string | undefined;
        input: StageWaitEvent$.Outbound | StageDelay$.Outbound | StageSend$.Outbound;
        name: string;
        startedAt: string;
        terminated: boolean;
        terminatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowInstanceHistory> = z
        .object({
            error: z.string().optional(),
            input: z.union([
                StageWaitEvent$.outboundSchema,
                StageDelay$.outboundSchema,
                StageSend$.outboundSchema,
            ]),
            name: z.string(),
            startedAt: z.date().transform((v) => v.toISOString()),
            terminated: z.boolean(),
            terminatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.error === undefined ? null : { error: v.error }),
                input: v.input,
                name: v.name,
                startedAt: v.startedAt,
                terminated: v.terminated,
                ...(v.terminatedAt === undefined ? null : { terminatedAt: v.terminatedAt }),
            };
        });
}
