/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Stage,
  Stage$inboundSchema,
  Stage$Outbound,
  Stage$outboundSchema,
} from "./stage.js";

export type WorkflowInstanceHistory = {
  error?: string | undefined;
  input: Stage;
  name: string;
  startedAt: Date;
  terminated: boolean;
  terminatedAt?: Date | undefined;
};

/** @internal */
export const WorkflowInstanceHistory$inboundSchema: z.ZodType<
  WorkflowInstanceHistory,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  input: Stage$inboundSchema,
  name: z.string(),
  startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  terminated: z.boolean(),
  terminatedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
});

/** @internal */
export type WorkflowInstanceHistory$Outbound = {
  error?: string | undefined;
  input: Stage$Outbound;
  name: string;
  startedAt: string;
  terminated: boolean;
  terminatedAt?: string | undefined;
};

/** @internal */
export const WorkflowInstanceHistory$outboundSchema: z.ZodType<
  WorkflowInstanceHistory$Outbound,
  z.ZodTypeDef,
  WorkflowInstanceHistory
> = z.object({
  error: z.string().optional(),
  input: Stage$outboundSchema,
  name: z.string(),
  startedAt: z.date().transform(v => v.toISOString()),
  terminated: z.boolean(),
  terminatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowInstanceHistory$ {
  /** @deprecated use `WorkflowInstanceHistory$inboundSchema` instead. */
  export const inboundSchema = WorkflowInstanceHistory$inboundSchema;
  /** @deprecated use `WorkflowInstanceHistory$outboundSchema` instead. */
  export const outboundSchema = WorkflowInstanceHistory$outboundSchema;
  /** @deprecated use `WorkflowInstanceHistory$Outbound` instead. */
  export type Outbound = WorkflowInstanceHistory$Outbound;
}

export function workflowInstanceHistoryToJSON(
  workflowInstanceHistory: WorkflowInstanceHistory,
): string {
  return JSON.stringify(
    WorkflowInstanceHistory$outboundSchema.parse(workflowInstanceHistory),
  );
}

export function workflowInstanceHistoryFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowInstanceHistory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowInstanceHistory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowInstanceHistory' from JSON`,
  );
}
