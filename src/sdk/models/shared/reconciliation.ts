/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Reconciliation = {
    createdAt: Date;
    driftBalances: { [k: string]: bigint };
    error?: string | undefined;
    id: string;
    ledgerBalances: { [k: string]: bigint };
    paymentsBalances: { [k: string]: bigint };
    policyID: string;
    reconciledAtLedger: Date;
    reconciledAtPayments: Date;
    status: string;
};

/** @internal */
export namespace Reconciliation$ {
    export const inboundSchema: z.ZodType<Reconciliation, z.ZodTypeDef, unknown> = z.object({
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        driftBalances: z.record(z.number().transform((v) => BigInt(v))),
        error: z.string().optional(),
        id: z.string(),
        ledgerBalances: z.record(z.number().transform((v) => BigInt(v))),
        paymentsBalances: z.record(z.number().transform((v) => BigInt(v))),
        policyID: z.string(),
        reconciledAtLedger: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        reconciledAtPayments: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        status: z.string(),
    });

    export type Outbound = {
        createdAt: string;
        driftBalances: { [k: string]: number };
        error?: string | undefined;
        id: string;
        ledgerBalances: { [k: string]: number };
        paymentsBalances: { [k: string]: number };
        policyID: string;
        reconciledAtLedger: string;
        reconciledAtPayments: string;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reconciliation> = z.object({
        createdAt: z.date().transform((v) => v.toISOString()),
        driftBalances: z.record(z.bigint().transform((v) => Number(v))),
        error: z.string().optional(),
        id: z.string(),
        ledgerBalances: z.record(z.bigint().transform((v) => Number(v))),
        paymentsBalances: z.record(z.bigint().transform((v) => Number(v))),
        policyID: z.string(),
        reconciledAtLedger: z.date().transform((v) => v.toISOString()),
        reconciledAtPayments: z.date().transform((v) => v.toISOString()),
        status: z.string(),
    });
}
