/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class Reconciliation extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "driftBalances" })
    driftBalances: Record<string, number>;

    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    error?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "ledgerBalances" })
    ledgerBalances: Record<string, number>;

    @SpeakeasyMetadata()
    @Expose({ name: "paymentsBalances" })
    paymentsBalances: Record<string, number>;

    @SpeakeasyMetadata()
    @Expose({ name: "policyID" })
    policyID: string;

    @SpeakeasyMetadata()
    @Expose({ name: "reconciledAtLedger" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    reconciledAtLedger: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "reconciledAtPayments" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    reconciledAtPayments: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: string;
}
