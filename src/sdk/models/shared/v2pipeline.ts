/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2Pipeline = {
  createdAt: Date;
  enabled?: boolean | undefined;
  exporterID: string;
  id: string;
  lastLogID?: number | undefined;
  ledger: string;
};

/** @internal */
export const V2Pipeline$inboundSchema: z.ZodType<
  V2Pipeline,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  enabled: z.boolean().optional(),
  exporterID: z.string(),
  id: z.string(),
  lastLogID: z.number().int().optional(),
  ledger: z.string(),
});

/** @internal */
export type V2Pipeline$Outbound = {
  createdAt: string;
  enabled?: boolean | undefined;
  exporterID: string;
  id: string;
  lastLogID?: number | undefined;
  ledger: string;
};

/** @internal */
export const V2Pipeline$outboundSchema: z.ZodType<
  V2Pipeline$Outbound,
  z.ZodTypeDef,
  V2Pipeline
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  enabled: z.boolean().optional(),
  exporterID: z.string(),
  id: z.string(),
  lastLogID: z.number().int().optional(),
  ledger: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2Pipeline$ {
  /** @deprecated use `V2Pipeline$inboundSchema` instead. */
  export const inboundSchema = V2Pipeline$inboundSchema;
  /** @deprecated use `V2Pipeline$outboundSchema` instead. */
  export const outboundSchema = V2Pipeline$outboundSchema;
  /** @deprecated use `V2Pipeline$Outbound` instead. */
  export type Outbound = V2Pipeline$Outbound;
}

export function v2PipelineToJSON(v2Pipeline: V2Pipeline): string {
  return JSON.stringify(V2Pipeline$outboundSchema.parse(v2Pipeline));
}

export function v2PipelineFromJSON(
  jsonString: string,
): SafeParseResult<V2Pipeline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2Pipeline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2Pipeline' from JSON`,
  );
}
