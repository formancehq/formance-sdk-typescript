/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3Address,
  V3Address$inboundSchema,
  V3Address$Outbound,
  V3Address$outboundSchema,
} from "./v3address.js";
import {
  V3ContactDetails,
  V3ContactDetails$inboundSchema,
  V3ContactDetails$Outbound,
  V3ContactDetails$outboundSchema,
} from "./v3contactdetails.js";

export type V3PaymentServiceUser = {
  address?: V3Address | undefined;
  bankAccountIDs?: Array<string> | null | undefined;
  contactDetails?: V3ContactDetails | undefined;
  createdAt: Date;
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
};

/** @internal */
export const V3PaymentServiceUser$inboundSchema: z.ZodType<
  V3PaymentServiceUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: V3Address$inboundSchema.optional(),
  bankAccountIDs: z.nullable(z.array(z.string())).optional(),
  contactDetails: V3ContactDetails$inboundSchema.optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
});

/** @internal */
export type V3PaymentServiceUser$Outbound = {
  address?: V3Address$Outbound | undefined;
  bankAccountIDs?: Array<string> | null | undefined;
  contactDetails?: V3ContactDetails$Outbound | undefined;
  createdAt: string;
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
};

/** @internal */
export const V3PaymentServiceUser$outboundSchema: z.ZodType<
  V3PaymentServiceUser$Outbound,
  z.ZodTypeDef,
  V3PaymentServiceUser
> = z.object({
  address: V3Address$outboundSchema.optional(),
  bankAccountIDs: z.nullable(z.array(z.string())).optional(),
  contactDetails: V3ContactDetails$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3PaymentServiceUser$ {
  /** @deprecated use `V3PaymentServiceUser$inboundSchema` instead. */
  export const inboundSchema = V3PaymentServiceUser$inboundSchema;
  /** @deprecated use `V3PaymentServiceUser$outboundSchema` instead. */
  export const outboundSchema = V3PaymentServiceUser$outboundSchema;
  /** @deprecated use `V3PaymentServiceUser$Outbound` instead. */
  export type Outbound = V3PaymentServiceUser$Outbound;
}

export function v3PaymentServiceUserToJSON(
  v3PaymentServiceUser: V3PaymentServiceUser,
): string {
  return JSON.stringify(
    V3PaymentServiceUser$outboundSchema.parse(v3PaymentServiceUser),
  );
}

export function v3PaymentServiceUserFromJSON(
  jsonString: string,
): SafeParseResult<V3PaymentServiceUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3PaymentServiceUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3PaymentServiceUser' from JSON`,
  );
}
