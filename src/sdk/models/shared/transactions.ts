/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransactionData,
  TransactionData$inboundSchema,
  TransactionData$Outbound,
  TransactionData$outboundSchema,
} from "./transactiondata.js";

export type Transactions = {
  transactions: Array<TransactionData>;
};

/** @internal */
export const Transactions$inboundSchema: z.ZodType<
  Transactions,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactions: z.array(TransactionData$inboundSchema),
});

/** @internal */
export type Transactions$Outbound = {
  transactions: Array<TransactionData$Outbound>;
};

/** @internal */
export const Transactions$outboundSchema: z.ZodType<
  Transactions$Outbound,
  z.ZodTypeDef,
  Transactions
> = z.object({
  transactions: z.array(TransactionData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transactions$ {
  /** @deprecated use `Transactions$inboundSchema` instead. */
  export const inboundSchema = Transactions$inboundSchema;
  /** @deprecated use `Transactions$outboundSchema` instead. */
  export const outboundSchema = Transactions$outboundSchema;
  /** @deprecated use `Transactions$Outbound` instead. */
  export type Outbound = Transactions$Outbound;
}

export function transactionsToJSON(transactions: Transactions): string {
  return JSON.stringify(Transactions$outboundSchema.parse(transactions));
}

export function transactionsFromJSON(
  jsonString: string,
): SafeParseResult<Transactions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transactions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transactions' from JSON`,
  );
}
