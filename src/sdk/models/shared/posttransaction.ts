/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Posting, Posting$ } from "./posting";
import * as z from "zod";

export type PostTransactionScript = {
    plain: string;
    vars?: { [k: string]: any } | undefined;
};

export type PostTransaction = {
    metadata?: { [k: string]: any } | null | undefined;
    postings?: Array<Posting> | undefined;
    reference?: string | undefined;
    script?: PostTransactionScript | undefined;
    timestamp?: Date | undefined;
};

/** @internal */
export namespace PostTransactionScript$ {
    export const inboundSchema: z.ZodType<PostTransactionScript, z.ZodTypeDef, unknown> = z.object({
        plain: z.string(),
        vars: z.record(z.any()).optional(),
    });

    export type Outbound = {
        plain: string;
        vars?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostTransactionScript> =
        z.object({
            plain: z.string(),
            vars: z.record(z.any()).optional(),
        });
}

/** @internal */
export namespace PostTransaction$ {
    export const inboundSchema: z.ZodType<PostTransaction, z.ZodTypeDef, unknown> = z.object({
        metadata: z.nullable(z.record(z.any())).optional(),
        postings: z.array(Posting$.inboundSchema).optional(),
        reference: z.string().optional(),
        script: z.lazy(() => PostTransactionScript$.inboundSchema).optional(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

    export type Outbound = {
        metadata?: { [k: string]: any } | null | undefined;
        postings?: Array<Posting$.Outbound> | undefined;
        reference?: string | undefined;
        script?: PostTransactionScript$.Outbound | undefined;
        timestamp?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostTransaction> = z.object({
        metadata: z.nullable(z.record(z.any())).optional(),
        postings: z.array(Posting$.outboundSchema).optional(),
        reference: z.string().optional(),
        script: z.lazy(() => PostTransactionScript$.outboundSchema).optional(),
        timestamp: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    });
}
