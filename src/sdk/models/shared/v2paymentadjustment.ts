/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2PaymentStatus, V2PaymentStatus$ } from "./v2paymentstatus";
import * as z from "zod";

export type V2PaymentAdjustmentRaw = {};

export type V2PaymentAdjustment = {
    absolute: boolean;
    amount: bigint;
    date: Date;
    raw: V2PaymentAdjustmentRaw;
    status: V2PaymentStatus;
};

/** @internal */
export namespace V2PaymentAdjustmentRaw$ {
    export const inboundSchema: z.ZodType<V2PaymentAdjustmentRaw, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2PaymentAdjustmentRaw> =
        z.object({});
}

/** @internal */
export namespace V2PaymentAdjustment$ {
    export const inboundSchema: z.ZodType<V2PaymentAdjustment, z.ZodTypeDef, unknown> = z.object({
        absolute: z.boolean(),
        amount: z.number().transform((v) => BigInt(v)),
        date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        raw: z.lazy(() => V2PaymentAdjustmentRaw$.inboundSchema),
        status: V2PaymentStatus$.inboundSchema,
    });

    export type Outbound = {
        absolute: boolean;
        amount: number;
        date: string;
        raw: V2PaymentAdjustmentRaw$.Outbound;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2PaymentAdjustment> = z.object({
        absolute: z.boolean(),
        amount: z.bigint().transform((v) => Number(v)),
        date: z.date().transform((v) => v.toISOString()),
        raw: z.lazy(() => V2PaymentAdjustmentRaw$.outboundSchema),
        status: V2PaymentStatus$.outboundSchema,
    });
}
