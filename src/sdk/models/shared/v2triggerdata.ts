/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2TriggerData = {
  event: string;
  filter?: string | undefined;
  name?: string | undefined;
  vars?: { [k: string]: any } | undefined;
  version?: string | undefined;
  workflowID: string;
};

/** @internal */
export const V2TriggerData$inboundSchema: z.ZodType<
  V2TriggerData,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.string(),
  filter: z.string().optional(),
  name: z.string().optional(),
  vars: z.record(z.any()).optional(),
  version: z.string().optional(),
  workflowID: z.string(),
});

/** @internal */
export type V2TriggerData$Outbound = {
  event: string;
  filter?: string | undefined;
  name?: string | undefined;
  vars?: { [k: string]: any } | undefined;
  version?: string | undefined;
  workflowID: string;
};

/** @internal */
export const V2TriggerData$outboundSchema: z.ZodType<
  V2TriggerData$Outbound,
  z.ZodTypeDef,
  V2TriggerData
> = z.object({
  event: z.string(),
  filter: z.string().optional(),
  name: z.string().optional(),
  vars: z.record(z.any()).optional(),
  version: z.string().optional(),
  workflowID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2TriggerData$ {
  /** @deprecated use `V2TriggerData$inboundSchema` instead. */
  export const inboundSchema = V2TriggerData$inboundSchema;
  /** @deprecated use `V2TriggerData$outboundSchema` instead. */
  export const outboundSchema = V2TriggerData$outboundSchema;
  /** @deprecated use `V2TriggerData$Outbound` instead. */
  export type Outbound = V2TriggerData$Outbound;
}

export function v2TriggerDataToJSON(v2TriggerData: V2TriggerData): string {
  return JSON.stringify(V2TriggerData$outboundSchema.parse(v2TriggerData));
}

export function v2TriggerDataFromJSON(
  jsonString: string,
): SafeParseResult<V2TriggerData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2TriggerData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2TriggerData' from JSON`,
  );
}
