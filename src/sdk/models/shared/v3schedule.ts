/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3Schedule = {
  connectorID: string;
  createdAt: Date;
  id: string;
};

/** @internal */
export const V3Schedule$inboundSchema: z.ZodType<
  V3Schedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
});

/** @internal */
export type V3Schedule$Outbound = {
  connectorID: string;
  createdAt: string;
  id: string;
};

/** @internal */
export const V3Schedule$outboundSchema: z.ZodType<
  V3Schedule$Outbound,
  z.ZodTypeDef,
  V3Schedule
> = z.object({
  connectorID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3Schedule$ {
  /** @deprecated use `V3Schedule$inboundSchema` instead. */
  export const inboundSchema = V3Schedule$inboundSchema;
  /** @deprecated use `V3Schedule$outboundSchema` instead. */
  export const outboundSchema = V3Schedule$outboundSchema;
  /** @deprecated use `V3Schedule$Outbound` instead. */
  export type Outbound = V3Schedule$Outbound;
}

export function v3ScheduleToJSON(v3Schedule: V3Schedule): string {
  return JSON.stringify(V3Schedule$outboundSchema.parse(v3Schedule));
}

export function v3ScheduleFromJSON(
  jsonString: string,
): SafeParseResult<V3Schedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3Schedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3Schedule' from JSON`,
  );
}
