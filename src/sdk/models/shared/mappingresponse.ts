/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Mapping,
  Mapping$inboundSchema,
  Mapping$Outbound,
  Mapping$outboundSchema,
} from "./mapping.js";

export type MappingResponse = {
  data?: Mapping | null | undefined;
};

/** @internal */
export const MappingResponse$inboundSchema: z.ZodType<
  MappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(Mapping$inboundSchema).optional(),
});

/** @internal */
export type MappingResponse$Outbound = {
  data?: Mapping$Outbound | null | undefined;
};

/** @internal */
export const MappingResponse$outboundSchema: z.ZodType<
  MappingResponse$Outbound,
  z.ZodTypeDef,
  MappingResponse
> = z.object({
  data: z.nullable(Mapping$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MappingResponse$ {
  /** @deprecated use `MappingResponse$inboundSchema` instead. */
  export const inboundSchema = MappingResponse$inboundSchema;
  /** @deprecated use `MappingResponse$outboundSchema` instead. */
  export const outboundSchema = MappingResponse$outboundSchema;
  /** @deprecated use `MappingResponse$Outbound` instead. */
  export type Outbound = MappingResponse$Outbound;
}

export function mappingResponseToJSON(
  mappingResponse: MappingResponse,
): string {
  return JSON.stringify(MappingResponse$outboundSchema.parse(mappingResponse));
}

export function mappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<MappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MappingResponse' from JSON`,
  );
}
