/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LedgerAccountSubject, LedgerAccountSubject$ } from "./ledgeraccountsubject";
import { WalletSubject, WalletSubject$ } from "./walletsubject";
import { z } from "zod";

export type ExpandedDebitHold = {
    description: string;
    destination?:
        | (LedgerAccountSubject & { type: "ACCOUNT" })
        | (WalletSubject & { type: "WALLET" })
        | undefined;
    /**
     * The unique ID of the hold.
     */
    id: string;
    /**
     * Metadata associated with the hold.
     */
    metadata: Record<string, string>;
    /**
     * Original amount on hold
     */
    originalAmount: bigint;
    /**
     * Remaining amount on hold
     */
    remaining: bigint;
    /**
     * The ID of the wallet the hold is associated with.
     */
    walletID: string;
};

/** @internal */
export namespace ExpandedDebitHold$ {
    export type Inbound = {
        description: string;
        destination?:
            | (LedgerAccountSubject$.Inbound & { type: "ACCOUNT" })
            | (WalletSubject$.Inbound & { type: "WALLET" })
            | undefined;
        id: string;
        metadata: Record<string, string>;
        originalAmount: number;
        remaining: number;
        walletID: string;
    };

    export const inboundSchema: z.ZodType<ExpandedDebitHold, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string(),
            destination: z
                .union([
                    LedgerAccountSubject$.inboundSchema.and(
                        z.object({ type: z.literal("ACCOUNT") })
                    ),
                    WalletSubject$.inboundSchema.and(z.object({ type: z.literal("WALLET") })),
                ])
                .optional(),
            id: z.string(),
            metadata: z.record(z.string()),
            originalAmount: z.number().transform((v) => BigInt(v)),
            remaining: z.number().transform((v) => BigInt(v)),
            walletID: z.string(),
        })
        .transform((v) => {
            return {
                description: v.description,
                ...(v.destination === undefined ? null : { destination: v.destination }),
                id: v.id,
                metadata: v.metadata,
                originalAmount: v.originalAmount,
                remaining: v.remaining,
                walletID: v.walletID,
            };
        });

    export type Outbound = {
        description: string;
        destination?:
            | (LedgerAccountSubject$.Outbound & { type: "ACCOUNT" })
            | (WalletSubject$.Outbound & { type: "WALLET" })
            | undefined;
        id: string;
        metadata: Record<string, string>;
        originalAmount: number;
        remaining: number;
        walletID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExpandedDebitHold> = z
        .object({
            description: z.string(),
            destination: z
                .union([
                    LedgerAccountSubject$.outboundSchema.and(
                        z.object({ type: z.literal("ACCOUNT") })
                    ),
                    WalletSubject$.outboundSchema.and(z.object({ type: z.literal("WALLET") })),
                ])
                .optional(),
            id: z.string(),
            metadata: z.record(z.string()),
            originalAmount: z.bigint().transform((v) => Number(v)),
            remaining: z.bigint().transform((v) => Number(v)),
            walletID: z.string(),
        })
        .transform((v) => {
            return {
                description: v.description,
                ...(v.destination === undefined ? null : { destination: v.destination }),
                id: v.id,
                metadata: v.metadata,
                originalAmount: v.originalAmount,
                remaining: v.remaining,
                walletID: v.walletID,
            };
        });
}
