/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentStatus, PaymentStatus$ } from "./paymentstatus";
import { z } from "zod";

export type TaskCurrencyCloudDescriptor = {
    name?: string | undefined;
};

export type TaskCurrencyCloudState = {};

export type TaskCurrencyCloud = {
    connectorID: string;
    createdAt: Date;
    descriptor: TaskCurrencyCloudDescriptor;
    error?: string | undefined;
    id: string;
    state: TaskCurrencyCloudState;
    status: PaymentStatus;
    updatedAt: Date;
};

/** @internal */
export namespace TaskCurrencyCloudDescriptor$ {
    export type Inbound = {
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskCurrencyCloudDescriptor, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskCurrencyCloudDescriptor> = z
        .object({
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace TaskCurrencyCloudState$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<TaskCurrencyCloudState, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskCurrencyCloudState> =
        z.object({});
}

/** @internal */
export namespace TaskCurrencyCloud$ {
    export type Inbound = {
        connectorID: string;
        createdAt: string;
        descriptor: TaskCurrencyCloudDescriptor$.Inbound;
        error?: string | undefined;
        id: string;
        state: TaskCurrencyCloudState$.Inbound;
        status: PaymentStatus;
        updatedAt: string;
    };

    export const inboundSchema: z.ZodType<TaskCurrencyCloud, z.ZodTypeDef, Inbound> = z
        .object({
            connectorID: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            descriptor: z.lazy(() => TaskCurrencyCloudDescriptor$.inboundSchema),
            error: z.string().optional(),
            id: z.string(),
            state: z.lazy(() => TaskCurrencyCloudState$.inboundSchema),
            status: PaymentStatus$,
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                descriptor: v.descriptor,
                ...(v.error === undefined ? null : { error: v.error }),
                id: v.id,
                state: v.state,
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });

    export type Outbound = {
        connectorID: string;
        createdAt: string;
        descriptor: TaskCurrencyCloudDescriptor$.Outbound;
        error?: string | undefined;
        id: string;
        state: TaskCurrencyCloudState$.Outbound;
        status: PaymentStatus;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskCurrencyCloud> = z
        .object({
            connectorID: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            descriptor: z.lazy(() => TaskCurrencyCloudDescriptor$.outboundSchema),
            error: z.string().optional(),
            id: z.string(),
            state: z.lazy(() => TaskCurrencyCloudState$.outboundSchema),
            status: PaymentStatus$,
            updatedAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                descriptor: v.descriptor,
                ...(v.error === undefined ? null : { error: v.error }),
                id: v.id,
                state: v.state,
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });
}
