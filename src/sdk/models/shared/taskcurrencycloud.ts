/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskStatus,
  TaskStatus$inboundSchema,
  TaskStatus$outboundSchema,
} from "./taskstatus.js";

export type TaskCurrencyCloudDescriptor = {
  name?: string | undefined;
};

export type TaskCurrencyCloudState = {};

export type TaskCurrencyCloud = {
  connectorID: string;
  createdAt: Date;
  descriptor: TaskCurrencyCloudDescriptor;
  error?: string | null | undefined;
  id: string;
  state?: TaskCurrencyCloudState | null | undefined;
  status: TaskStatus;
  updatedAt: Date;
};

/** @internal */
export const TaskCurrencyCloudDescriptor$inboundSchema: z.ZodType<
  TaskCurrencyCloudDescriptor,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type TaskCurrencyCloudDescriptor$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const TaskCurrencyCloudDescriptor$outboundSchema: z.ZodType<
  TaskCurrencyCloudDescriptor$Outbound,
  z.ZodTypeDef,
  TaskCurrencyCloudDescriptor
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskCurrencyCloudDescriptor$ {
  /** @deprecated use `TaskCurrencyCloudDescriptor$inboundSchema` instead. */
  export const inboundSchema = TaskCurrencyCloudDescriptor$inboundSchema;
  /** @deprecated use `TaskCurrencyCloudDescriptor$outboundSchema` instead. */
  export const outboundSchema = TaskCurrencyCloudDescriptor$outboundSchema;
  /** @deprecated use `TaskCurrencyCloudDescriptor$Outbound` instead. */
  export type Outbound = TaskCurrencyCloudDescriptor$Outbound;
}

export function taskCurrencyCloudDescriptorToJSON(
  taskCurrencyCloudDescriptor: TaskCurrencyCloudDescriptor,
): string {
  return JSON.stringify(
    TaskCurrencyCloudDescriptor$outboundSchema.parse(
      taskCurrencyCloudDescriptor,
    ),
  );
}

export function taskCurrencyCloudDescriptorFromJSON(
  jsonString: string,
): SafeParseResult<TaskCurrencyCloudDescriptor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskCurrencyCloudDescriptor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskCurrencyCloudDescriptor' from JSON`,
  );
}

/** @internal */
export const TaskCurrencyCloudState$inboundSchema: z.ZodType<
  TaskCurrencyCloudState,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskCurrencyCloudState$Outbound = {};

/** @internal */
export const TaskCurrencyCloudState$outboundSchema: z.ZodType<
  TaskCurrencyCloudState$Outbound,
  z.ZodTypeDef,
  TaskCurrencyCloudState
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskCurrencyCloudState$ {
  /** @deprecated use `TaskCurrencyCloudState$inboundSchema` instead. */
  export const inboundSchema = TaskCurrencyCloudState$inboundSchema;
  /** @deprecated use `TaskCurrencyCloudState$outboundSchema` instead. */
  export const outboundSchema = TaskCurrencyCloudState$outboundSchema;
  /** @deprecated use `TaskCurrencyCloudState$Outbound` instead. */
  export type Outbound = TaskCurrencyCloudState$Outbound;
}

export function taskCurrencyCloudStateToJSON(
  taskCurrencyCloudState: TaskCurrencyCloudState,
): string {
  return JSON.stringify(
    TaskCurrencyCloudState$outboundSchema.parse(taskCurrencyCloudState),
  );
}

export function taskCurrencyCloudStateFromJSON(
  jsonString: string,
): SafeParseResult<TaskCurrencyCloudState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskCurrencyCloudState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskCurrencyCloudState' from JSON`,
  );
}

/** @internal */
export const TaskCurrencyCloud$inboundSchema: z.ZodType<
  TaskCurrencyCloud,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  descriptor: z.lazy(() => TaskCurrencyCloudDescriptor$inboundSchema),
  error: z.nullable(z.string()).optional(),
  id: z.string(),
  state: z.nullable(z.lazy(() => TaskCurrencyCloudState$inboundSchema))
    .optional(),
  status: TaskStatus$inboundSchema,
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type TaskCurrencyCloud$Outbound = {
  connectorID: string;
  createdAt: string;
  descriptor: TaskCurrencyCloudDescriptor$Outbound;
  error?: string | null | undefined;
  id: string;
  state?: TaskCurrencyCloudState$Outbound | null | undefined;
  status: string;
  updatedAt: string;
};

/** @internal */
export const TaskCurrencyCloud$outboundSchema: z.ZodType<
  TaskCurrencyCloud$Outbound,
  z.ZodTypeDef,
  TaskCurrencyCloud
> = z.object({
  connectorID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  descriptor: z.lazy(() => TaskCurrencyCloudDescriptor$outboundSchema),
  error: z.nullable(z.string()).optional(),
  id: z.string(),
  state: z.nullable(z.lazy(() => TaskCurrencyCloudState$outboundSchema))
    .optional(),
  status: TaskStatus$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskCurrencyCloud$ {
  /** @deprecated use `TaskCurrencyCloud$inboundSchema` instead. */
  export const inboundSchema = TaskCurrencyCloud$inboundSchema;
  /** @deprecated use `TaskCurrencyCloud$outboundSchema` instead. */
  export const outboundSchema = TaskCurrencyCloud$outboundSchema;
  /** @deprecated use `TaskCurrencyCloud$Outbound` instead. */
  export type Outbound = TaskCurrencyCloud$Outbound;
}

export function taskCurrencyCloudToJSON(
  taskCurrencyCloud: TaskCurrencyCloud,
): string {
  return JSON.stringify(
    TaskCurrencyCloud$outboundSchema.parse(taskCurrencyCloud),
  );
}

export function taskCurrencyCloudFromJSON(
  jsonString: string,
): SafeParseResult<TaskCurrencyCloud, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskCurrencyCloud$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskCurrencyCloud' from JSON`,
  );
}
