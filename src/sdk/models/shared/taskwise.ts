/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentStatus, PaymentStatus$ } from "./paymentstatus";
import * as z from "zod";

export type TaskWiseDescriptor = {
    key?: string | undefined;
    name?: string | undefined;
    profileID?: number | undefined;
};

export type TaskWiseState = {};

export type TaskWise = {
    connectorID: string;
    createdAt: Date;
    descriptor: TaskWiseDescriptor;
    error?: string | undefined;
    id: string;
    state: TaskWiseState;
    status: PaymentStatus;
    updatedAt: Date;
};

/** @internal */
export namespace TaskWiseDescriptor$ {
    export const inboundSchema: z.ZodType<TaskWiseDescriptor, z.ZodTypeDef, unknown> = z.object({
        key: z.string().optional(),
        name: z.string().optional(),
        profileID: z.number().int().optional(),
    });

    export type Outbound = {
        key?: string | undefined;
        name?: string | undefined;
        profileID?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskWiseDescriptor> = z.object({
        key: z.string().optional(),
        name: z.string().optional(),
        profileID: z.number().int().optional(),
    });
}

/** @internal */
export namespace TaskWiseState$ {
    export const inboundSchema: z.ZodType<TaskWiseState, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskWiseState> = z.object({});
}

/** @internal */
export namespace TaskWise$ {
    export const inboundSchema: z.ZodType<TaskWise, z.ZodTypeDef, unknown> = z.object({
        connectorID: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        descriptor: z.lazy(() => TaskWiseDescriptor$.inboundSchema),
        error: z.string().optional(),
        id: z.string(),
        state: z.lazy(() => TaskWiseState$.inboundSchema),
        status: PaymentStatus$.inboundSchema,
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        connectorID: string;
        createdAt: string;
        descriptor: TaskWiseDescriptor$.Outbound;
        error?: string | undefined;
        id: string;
        state: TaskWiseState$.Outbound;
        status: string;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskWise> = z.object({
        connectorID: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        descriptor: z.lazy(() => TaskWiseDescriptor$.outboundSchema),
        error: z.string().optional(),
        id: z.string(),
        state: z.lazy(() => TaskWiseState$.outboundSchema),
        status: PaymentStatus$.outboundSchema,
        updatedAt: z.date().transform((v) => v.toISOString()),
    });
}
