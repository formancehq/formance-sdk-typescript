/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3ForwardPaymentServiceUserBankAccountRequest = {
  connectorID: string;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    connectorID: z.string(),
  });

/** @internal */
export type V3ForwardPaymentServiceUserBankAccountRequest$Outbound = {
  connectorID: string;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountRequest$Outbound,
    z.ZodTypeDef,
    V3ForwardPaymentServiceUserBankAccountRequest
  > = z.object({
    connectorID: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ForwardPaymentServiceUserBankAccountRequest$ {
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountRequest$Outbound` instead. */
  export type Outbound = V3ForwardPaymentServiceUserBankAccountRequest$Outbound;
}

export function v3ForwardPaymentServiceUserBankAccountRequestToJSON(
  v3ForwardPaymentServiceUserBankAccountRequest:
    V3ForwardPaymentServiceUserBankAccountRequest,
): string {
  return JSON.stringify(
    V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema.parse(
      v3ForwardPaymentServiceUserBankAccountRequest,
    ),
  );
}

export function v3ForwardPaymentServiceUserBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ForwardPaymentServiceUserBankAccountRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ForwardPaymentServiceUserBankAccountRequest' from JSON`,
  );
}
