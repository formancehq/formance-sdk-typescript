/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentStatus, PaymentStatus$ } from "./paymentstatus";
import { z } from "zod";

export type PaymentAdjustmentRaw = {};

export type PaymentAdjustment = {
    absolute: boolean;
    amount: number;
    date: Date;
    raw: PaymentAdjustmentRaw;
    status: PaymentStatus;
};

/** @internal */
export namespace PaymentAdjustmentRaw$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PaymentAdjustmentRaw, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentAdjustmentRaw> = z.object(
        {}
    );
}

/** @internal */
export namespace PaymentAdjustment$ {
    export type Inbound = {
        absolute: boolean;
        amount: number;
        date: string;
        raw: PaymentAdjustmentRaw$.Inbound;
        status: PaymentStatus;
    };

    export const inboundSchema: z.ZodType<PaymentAdjustment, z.ZodTypeDef, Inbound> = z
        .object({
            absolute: z.boolean(),
            amount: z.number().int(),
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            raw: z.lazy(() => PaymentAdjustmentRaw$.inboundSchema),
            status: PaymentStatus$,
        })
        .transform((v) => {
            return {
                absolute: v.absolute,
                amount: v.amount,
                date: v.date,
                raw: v.raw,
                status: v.status,
            };
        });

    export type Outbound = {
        absolute: boolean;
        amount: number;
        date: string;
        raw: PaymentAdjustmentRaw$.Outbound;
        status: PaymentStatus;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentAdjustment> = z
        .object({
            absolute: z.boolean(),
            amount: z.number().int(),
            date: z.date().transform((v) => v.toISOString()),
            raw: z.lazy(() => PaymentAdjustmentRaw$.outboundSchema),
            status: PaymentStatus$,
        })
        .transform((v) => {
            return {
                absolute: v.absolute,
                amount: v.amount,
                date: v.date,
                raw: v.raw,
                status: v.status,
            };
        });
}
