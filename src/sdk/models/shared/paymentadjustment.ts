/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentStatus, PaymentStatus$ } from "./paymentstatus";
import * as z from "zod";

export type PaymentAdjustmentRaw = {};

export type PaymentAdjustment = {
    amount: bigint;
    createdAt: Date;
    raw: PaymentAdjustmentRaw;
    reference: string;
    status: PaymentStatus;
};

/** @internal */
export namespace PaymentAdjustmentRaw$ {
    export const inboundSchema: z.ZodType<PaymentAdjustmentRaw, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentAdjustmentRaw> = z.object(
        {}
    );
}

/** @internal */
export namespace PaymentAdjustment$ {
    export const inboundSchema: z.ZodType<PaymentAdjustment, z.ZodTypeDef, unknown> = z.object({
        amount: z.number().transform((v) => BigInt(v)),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        raw: z.lazy(() => PaymentAdjustmentRaw$.inboundSchema),
        reference: z.string(),
        status: PaymentStatus$.inboundSchema,
    });

    export type Outbound = {
        amount: number;
        createdAt: string;
        raw: PaymentAdjustmentRaw$.Outbound;
        reference: string;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentAdjustment> = z.object({
        amount: z.bigint().transform((v) => Number(v)),
        createdAt: z.date().transform((v) => v.toISOString()),
        raw: z.lazy(() => PaymentAdjustmentRaw$.outboundSchema),
        reference: z.string(),
        status: PaymentStatus$.outboundSchema,
    });
}
