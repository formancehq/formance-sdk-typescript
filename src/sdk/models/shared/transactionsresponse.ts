/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Transaction, Transaction$ } from "./transaction";
import * as z from "zod";

export type TransactionsResponse = {
    data: Array<Transaction>;
};

/** @internal */
export namespace TransactionsResponse$ {
    export type Inbound = {
        data: Array<Transaction$.Inbound>;
    };

    export const inboundSchema: z.ZodType<TransactionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(Transaction$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: Array<Transaction$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsResponse> = z
        .object({
            data: z.array(Transaction$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
