/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WorkflowInstance, WorkflowInstance$ } from "./workflowinstance";
import * as z from "zod";

export type TriggerOccurrence = {
    date: Date;
    error?: string | undefined;
    event: { [k: string]: any };
    triggerID: string;
    workflowInstance?: WorkflowInstance | undefined;
    workflowInstanceID?: string | undefined;
};

/** @internal */
export namespace TriggerOccurrence$ {
    export const inboundSchema: z.ZodType<TriggerOccurrence, z.ZodTypeDef, unknown> = z.object({
        date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        error: z.string().optional(),
        event: z.record(z.any()),
        triggerID: z.string(),
        workflowInstance: WorkflowInstance$.inboundSchema.optional(),
        workflowInstanceID: z.string().optional(),
    });

    export type Outbound = {
        date: string;
        error?: string | undefined;
        event: { [k: string]: any };
        triggerID: string;
        workflowInstance?: WorkflowInstance$.Outbound | undefined;
        workflowInstanceID?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggerOccurrence> = z.object({
        date: z.date().transform((v) => v.toISOString()),
        error: z.string().optional(),
        event: z.record(z.any()),
        triggerID: z.string(),
        workflowInstance: WorkflowInstance$.outboundSchema.optional(),
        workflowInstanceID: z.string().optional(),
    });
}
