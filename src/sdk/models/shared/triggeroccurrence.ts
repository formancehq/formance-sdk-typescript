/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WorkflowInstance, WorkflowInstance$ } from "./workflowinstance";
import { z } from "zod";

export type TriggerOccurrence = {
    date: Date;
    event: Record<string, any>;
    triggerID: string;
    workflowInstance: WorkflowInstance;
    workflowInstanceID: string;
};

/** @internal */
export namespace TriggerOccurrence$ {
    export type Inbound = {
        date: string;
        event: Record<string, any>;
        triggerID: string;
        workflowInstance: WorkflowInstance$.Inbound;
        workflowInstanceID: string;
    };

    export const inboundSchema: z.ZodType<TriggerOccurrence, z.ZodTypeDef, Inbound> = z
        .object({
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            event: z.record(z.any()),
            triggerID: z.string(),
            workflowInstance: WorkflowInstance$.inboundSchema,
            workflowInstanceID: z.string(),
        })
        .transform((v) => {
            return {
                date: v.date,
                event: v.event,
                triggerID: v.triggerID,
                workflowInstance: v.workflowInstance,
                workflowInstanceID: v.workflowInstanceID,
            };
        });

    export type Outbound = {
        date: string;
        event: Record<string, any>;
        triggerID: string;
        workflowInstance: WorkflowInstance$.Outbound;
        workflowInstanceID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggerOccurrence> = z
        .object({
            date: z.date().transform((v) => v.toISOString()),
            event: z.record(z.any()),
            triggerID: z.string(),
            workflowInstance: WorkflowInstance$.outboundSchema,
            workflowInstanceID: z.string(),
        })
        .transform((v) => {
            return {
                date: v.date,
                event: v.event,
                triggerID: v.triggerID,
                workflowInstance: v.workflowInstance,
                workflowInstanceID: v.workflowInstanceID,
            };
        });
}
