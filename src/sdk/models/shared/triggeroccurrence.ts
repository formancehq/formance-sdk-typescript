/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkflowInstance,
  WorkflowInstance$inboundSchema,
  WorkflowInstance$Outbound,
  WorkflowInstance$outboundSchema,
} from "./workflowinstance.js";

export type TriggerOccurrence = {
  date: Date;
  error?: string | undefined;
  event: { [k: string]: any };
  triggerID: string;
  workflowInstance?: WorkflowInstance | undefined;
  workflowInstanceID?: string | undefined;
};

/** @internal */
export const TriggerOccurrence$inboundSchema: z.ZodType<
  TriggerOccurrence,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  error: z.string().optional(),
  event: z.record(z.any()),
  triggerID: z.string(),
  workflowInstance: WorkflowInstance$inboundSchema.optional(),
  workflowInstanceID: z.string().optional(),
});

/** @internal */
export type TriggerOccurrence$Outbound = {
  date: string;
  error?: string | undefined;
  event: { [k: string]: any };
  triggerID: string;
  workflowInstance?: WorkflowInstance$Outbound | undefined;
  workflowInstanceID?: string | undefined;
};

/** @internal */
export const TriggerOccurrence$outboundSchema: z.ZodType<
  TriggerOccurrence$Outbound,
  z.ZodTypeDef,
  TriggerOccurrence
> = z.object({
  date: z.date().transform(v => v.toISOString()),
  error: z.string().optional(),
  event: z.record(z.any()),
  triggerID: z.string(),
  workflowInstance: WorkflowInstance$outboundSchema.optional(),
  workflowInstanceID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerOccurrence$ {
  /** @deprecated use `TriggerOccurrence$inboundSchema` instead. */
  export const inboundSchema = TriggerOccurrence$inboundSchema;
  /** @deprecated use `TriggerOccurrence$outboundSchema` instead. */
  export const outboundSchema = TriggerOccurrence$outboundSchema;
  /** @deprecated use `TriggerOccurrence$Outbound` instead. */
  export type Outbound = TriggerOccurrence$Outbound;
}

export function triggerOccurrenceToJSON(
  triggerOccurrence: TriggerOccurrence,
): string {
  return JSON.stringify(
    TriggerOccurrence$outboundSchema.parse(triggerOccurrence),
  );
}

export function triggerOccurrenceFromJSON(
  jsonString: string,
): SafeParseResult<TriggerOccurrence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerOccurrence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerOccurrence' from JSON`,
  );
}
