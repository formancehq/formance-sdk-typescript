/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2Connector,
  V2Connector$inboundSchema,
  V2Connector$outboundSchema,
} from "./v2connector.js";
import {
  V2PaymentAdjustment,
  V2PaymentAdjustment$inboundSchema,
  V2PaymentAdjustment$Outbound,
  V2PaymentAdjustment$outboundSchema,
} from "./v2paymentadjustment.js";
import {
  V2PaymentMetadata,
  V2PaymentMetadata$inboundSchema,
  V2PaymentMetadata$Outbound,
  V2PaymentMetadata$outboundSchema,
} from "./v2paymentmetadata.js";
import {
  V2PaymentStatus,
  V2PaymentStatus$inboundSchema,
  V2PaymentStatus$outboundSchema,
} from "./v2paymentstatus.js";

export type V2PaymentRaw = {};

export enum V2PaymentScheme {
  Visa = "visa",
  Mastercard = "mastercard",
  Amex = "amex",
  Diners = "diners",
  Discover = "discover",
  Jcb = "jcb",
  Unionpay = "unionpay",
  SepaDebit = "sepa debit",
  SepaCredit = "sepa credit",
  Sepa = "sepa",
  ApplePay = "apple pay",
  GooglePay = "google pay",
  A2a = "a2a",
  AchDebit = "ach debit",
  Ach = "ach",
  Rtp = "rtp",
  Unknown = "unknown",
  Other = "other",
}

export enum V2PaymentType {
  PayIn = "PAY-IN",
  Payout = "PAYOUT",
  Transfer = "TRANSFER",
  Other = "OTHER",
}

export type V2Payment = {
  adjustments: Array<V2PaymentAdjustment>;
  asset: string;
  connectorID: string;
  createdAt: Date;
  destinationAccountID: string;
  id: string;
  initialAmount: bigint;
  metadata: V2PaymentMetadata | null;
  provider?: V2Connector | undefined;
  raw: V2PaymentRaw | null;
  reference: string;
  scheme: V2PaymentScheme;
  sourceAccountID: string;
  status: V2PaymentStatus;
  type: V2PaymentType;
};

/** @internal */
export const V2PaymentRaw$inboundSchema: z.ZodType<
  V2PaymentRaw,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type V2PaymentRaw$Outbound = {};

/** @internal */
export const V2PaymentRaw$outboundSchema: z.ZodType<
  V2PaymentRaw$Outbound,
  z.ZodTypeDef,
  V2PaymentRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PaymentRaw$ {
  /** @deprecated use `V2PaymentRaw$inboundSchema` instead. */
  export const inboundSchema = V2PaymentRaw$inboundSchema;
  /** @deprecated use `V2PaymentRaw$outboundSchema` instead. */
  export const outboundSchema = V2PaymentRaw$outboundSchema;
  /** @deprecated use `V2PaymentRaw$Outbound` instead. */
  export type Outbound = V2PaymentRaw$Outbound;
}

export function v2PaymentRawToJSON(v2PaymentRaw: V2PaymentRaw): string {
  return JSON.stringify(V2PaymentRaw$outboundSchema.parse(v2PaymentRaw));
}

export function v2PaymentRawFromJSON(
  jsonString: string,
): SafeParseResult<V2PaymentRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2PaymentRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PaymentRaw' from JSON`,
  );
}

/** @internal */
export const V2PaymentScheme$inboundSchema: z.ZodNativeEnum<
  typeof V2PaymentScheme
> = z.nativeEnum(V2PaymentScheme);

/** @internal */
export const V2PaymentScheme$outboundSchema: z.ZodNativeEnum<
  typeof V2PaymentScheme
> = V2PaymentScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PaymentScheme$ {
  /** @deprecated use `V2PaymentScheme$inboundSchema` instead. */
  export const inboundSchema = V2PaymentScheme$inboundSchema;
  /** @deprecated use `V2PaymentScheme$outboundSchema` instead. */
  export const outboundSchema = V2PaymentScheme$outboundSchema;
}

/** @internal */
export const V2PaymentType$inboundSchema: z.ZodNativeEnum<
  typeof V2PaymentType
> = z.nativeEnum(V2PaymentType);

/** @internal */
export const V2PaymentType$outboundSchema: z.ZodNativeEnum<
  typeof V2PaymentType
> = V2PaymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PaymentType$ {
  /** @deprecated use `V2PaymentType$inboundSchema` instead. */
  export const inboundSchema = V2PaymentType$inboundSchema;
  /** @deprecated use `V2PaymentType$outboundSchema` instead. */
  export const outboundSchema = V2PaymentType$outboundSchema;
}

/** @internal */
export const V2Payment$inboundSchema: z.ZodType<
  V2Payment,
  z.ZodTypeDef,
  unknown
> = z.object({
  adjustments: z.array(V2PaymentAdjustment$inboundSchema),
  asset: z.string(),
  connectorID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  destinationAccountID: z.string(),
  id: z.string(),
  initialAmount: z.number().transform(v => BigInt(v)),
  metadata: z.nullable(V2PaymentMetadata$inboundSchema),
  provider: V2Connector$inboundSchema.optional(),
  raw: z.nullable(z.lazy(() => V2PaymentRaw$inboundSchema)),
  reference: z.string(),
  scheme: V2PaymentScheme$inboundSchema,
  sourceAccountID: z.string(),
  status: V2PaymentStatus$inboundSchema,
  type: V2PaymentType$inboundSchema,
});

/** @internal */
export type V2Payment$Outbound = {
  adjustments: Array<V2PaymentAdjustment$Outbound>;
  asset: string;
  connectorID: string;
  createdAt: string;
  destinationAccountID: string;
  id: string;
  initialAmount: number;
  metadata: V2PaymentMetadata$Outbound | null;
  provider?: string | undefined;
  raw: V2PaymentRaw$Outbound | null;
  reference: string;
  scheme: string;
  sourceAccountID: string;
  status: string;
  type: string;
};

/** @internal */
export const V2Payment$outboundSchema: z.ZodType<
  V2Payment$Outbound,
  z.ZodTypeDef,
  V2Payment
> = z.object({
  adjustments: z.array(V2PaymentAdjustment$outboundSchema),
  asset: z.string(),
  connectorID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  destinationAccountID: z.string(),
  id: z.string(),
  initialAmount: z.bigint().transform(v => Number(v)),
  metadata: z.nullable(V2PaymentMetadata$outboundSchema),
  provider: V2Connector$outboundSchema.optional(),
  raw: z.nullable(z.lazy(() => V2PaymentRaw$outboundSchema)),
  reference: z.string(),
  scheme: V2PaymentScheme$outboundSchema,
  sourceAccountID: z.string(),
  status: V2PaymentStatus$outboundSchema,
  type: V2PaymentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2Payment$ {
  /** @deprecated use `V2Payment$inboundSchema` instead. */
  export const inboundSchema = V2Payment$inboundSchema;
  /** @deprecated use `V2Payment$outboundSchema` instead. */
  export const outboundSchema = V2Payment$outboundSchema;
  /** @deprecated use `V2Payment$Outbound` instead. */
  export type Outbound = V2Payment$Outbound;
}

export function v2PaymentToJSON(v2Payment: V2Payment): string {
  return JSON.stringify(V2Payment$outboundSchema.parse(v2Payment));
}

export function v2PaymentFromJSON(
  jsonString: string,
): SafeParseResult<V2Payment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2Payment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2Payment' from JSON`,
  );
}
