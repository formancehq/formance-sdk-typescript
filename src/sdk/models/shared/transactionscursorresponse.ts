/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Transaction, Transaction$ } from "./transaction";
import * as z from "zod";

export type TransactionsCursorResponseCursor = {
    data: Array<Transaction>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type TransactionsCursorResponse = {
    cursor: TransactionsCursorResponseCursor;
};

/** @internal */
export namespace TransactionsCursorResponseCursor$ {
    export const inboundSchema: z.ZodType<TransactionsCursorResponseCursor, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(Transaction$.inboundSchema),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });

    export type Outbound = {
        data: Array<Transaction$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionsCursorResponseCursor
    > = z.object({
        data: z.array(Transaction$.outboundSchema),
        hasMore: z.boolean(),
        next: z.string().optional(),
        pageSize: z.number().int(),
        previous: z.string().optional(),
    });
}

/** @internal */
export namespace TransactionsCursorResponse$ {
    export const inboundSchema: z.ZodType<TransactionsCursorResponse, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => TransactionsCursorResponseCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: TransactionsCursorResponseCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsCursorResponse> =
        z.object({
            cursor: z.lazy(() => TransactionsCursorResponseCursor$.outboundSchema),
        });
}
