/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Transaction,
  Transaction$inboundSchema,
  Transaction$Outbound,
  Transaction$outboundSchema,
} from "./transaction.js";

export type TransactionsCursorResponseCursor = {
  data: Array<Transaction>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type TransactionsCursorResponse = {
  cursor: TransactionsCursorResponseCursor;
};

/** @internal */
export const TransactionsCursorResponseCursor$inboundSchema: z.ZodType<
  TransactionsCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Transaction$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type TransactionsCursorResponseCursor$Outbound = {
  data: Array<Transaction$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const TransactionsCursorResponseCursor$outboundSchema: z.ZodType<
  TransactionsCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  TransactionsCursorResponseCursor
> = z.object({
  data: z.array(Transaction$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCursorResponseCursor$ {
  /** @deprecated use `TransactionsCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = TransactionsCursorResponseCursor$inboundSchema;
  /** @deprecated use `TransactionsCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema = TransactionsCursorResponseCursor$outboundSchema;
  /** @deprecated use `TransactionsCursorResponseCursor$Outbound` instead. */
  export type Outbound = TransactionsCursorResponseCursor$Outbound;
}

export function transactionsCursorResponseCursorToJSON(
  transactionsCursorResponseCursor: TransactionsCursorResponseCursor,
): string {
  return JSON.stringify(
    TransactionsCursorResponseCursor$outboundSchema.parse(
      transactionsCursorResponseCursor,
    ),
  );
}

export function transactionsCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const TransactionsCursorResponse$inboundSchema: z.ZodType<
  TransactionsCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => TransactionsCursorResponseCursor$inboundSchema),
});

/** @internal */
export type TransactionsCursorResponse$Outbound = {
  cursor: TransactionsCursorResponseCursor$Outbound;
};

/** @internal */
export const TransactionsCursorResponse$outboundSchema: z.ZodType<
  TransactionsCursorResponse$Outbound,
  z.ZodTypeDef,
  TransactionsCursorResponse
> = z.object({
  cursor: z.lazy(() => TransactionsCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCursorResponse$ {
  /** @deprecated use `TransactionsCursorResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionsCursorResponse$inboundSchema;
  /** @deprecated use `TransactionsCursorResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionsCursorResponse$outboundSchema;
  /** @deprecated use `TransactionsCursorResponse$Outbound` instead. */
  export type Outbound = TransactionsCursorResponse$Outbound;
}

export function transactionsCursorResponseToJSON(
  transactionsCursorResponse: TransactionsCursorResponse,
): string {
  return JSON.stringify(
    TransactionsCursorResponse$outboundSchema.parse(transactionsCursorResponse),
  );
}

export function transactionsCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsCursorResponse' from JSON`,
  );
}
