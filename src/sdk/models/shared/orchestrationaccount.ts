/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Volume,
  Volume$inboundSchema,
  Volume$Outbound,
  Volume$outboundSchema,
} from "./volume.js";

export type OrchestrationAccount = {
  address: string;
  effectiveVolumes?: { [k: string]: Volume } | undefined;
  metadata: { [k: string]: string };
  volumes?: { [k: string]: Volume } | undefined;
};

/** @internal */
export const OrchestrationAccount$inboundSchema: z.ZodType<
  OrchestrationAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  effectiveVolumes: z.record(Volume$inboundSchema).optional(),
  metadata: z.record(z.string()),
  volumes: z.record(Volume$inboundSchema).optional(),
});

/** @internal */
export type OrchestrationAccount$Outbound = {
  address: string;
  effectiveVolumes?: { [k: string]: Volume$Outbound } | undefined;
  metadata: { [k: string]: string };
  volumes?: { [k: string]: Volume$Outbound } | undefined;
};

/** @internal */
export const OrchestrationAccount$outboundSchema: z.ZodType<
  OrchestrationAccount$Outbound,
  z.ZodTypeDef,
  OrchestrationAccount
> = z.object({
  address: z.string(),
  effectiveVolumes: z.record(Volume$outboundSchema).optional(),
  metadata: z.record(z.string()),
  volumes: z.record(Volume$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationAccount$ {
  /** @deprecated use `OrchestrationAccount$inboundSchema` instead. */
  export const inboundSchema = OrchestrationAccount$inboundSchema;
  /** @deprecated use `OrchestrationAccount$outboundSchema` instead. */
  export const outboundSchema = OrchestrationAccount$outboundSchema;
  /** @deprecated use `OrchestrationAccount$Outbound` instead. */
  export type Outbound = OrchestrationAccount$Outbound;
}

export function orchestrationAccountToJSON(
  orchestrationAccount: OrchestrationAccount,
): string {
  return JSON.stringify(
    OrchestrationAccount$outboundSchema.parse(orchestrationAccount),
  );
}

export function orchestrationAccountFromJSON(
  jsonString: string,
): SafeParseResult<OrchestrationAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrchestrationAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrchestrationAccount' from JSON`,
  );
}
