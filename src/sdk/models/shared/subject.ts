/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    LedgerAccountSubject,
    LedgerAccountSubject$inboundSchema,
    LedgerAccountSubject$Outbound,
    LedgerAccountSubject$outboundSchema,
} from "./ledgeraccountsubject.js";
import {
    WalletSubject,
    WalletSubject$inboundSchema,
    WalletSubject$Outbound,
    WalletSubject$outboundSchema,
} from "./walletsubject.js";
import * as z from "zod";

export type Subject =
    | (LedgerAccountSubject & { type: "ACCOUNT" })
    | (WalletSubject & { type: "WALLET" });

/** @internal */
export const Subject$inboundSchema: z.ZodType<Subject, z.ZodTypeDef, unknown> = z.union([
    LedgerAccountSubject$inboundSchema.and(
        z.object({ type: z.literal("ACCOUNT") }).transform((v) => ({ type: v.type }))
    ),
    WalletSubject$inboundSchema.and(
        z.object({ type: z.literal("WALLET") }).transform((v) => ({ type: v.type }))
    ),
]);

/** @internal */
export type Subject$Outbound =
    | (LedgerAccountSubject$Outbound & { type: "ACCOUNT" })
    | (WalletSubject$Outbound & { type: "WALLET" });

/** @internal */
export const Subject$outboundSchema: z.ZodType<Subject$Outbound, z.ZodTypeDef, Subject> = z.union([
    LedgerAccountSubject$outboundSchema.and(
        z.object({ type: z.literal("ACCOUNT") }).transform((v) => ({ type: v.type }))
    ),
    WalletSubject$outboundSchema.and(
        z.object({ type: z.literal("WALLET") }).transform((v) => ({ type: v.type }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Subject$ {
    /** @deprecated use `Subject$inboundSchema` instead. */
    export const inboundSchema = Subject$inboundSchema;
    /** @deprecated use `Subject$outboundSchema` instead. */
    export const outboundSchema = Subject$outboundSchema;
    /** @deprecated use `Subject$Outbound` instead. */
    export type Outbound = Subject$Outbound;
}
