/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LedgerAccountSubject, LedgerAccountSubject$ } from "./ledgeraccountsubject";
import { WalletSubject, WalletSubject$ } from "./walletsubject";
import * as z from "zod";

export type Subject =
    | (LedgerAccountSubject & { type: "ACCOUNT" })
    | (WalletSubject & { type: "WALLET" });

/** @internal */
export namespace Subject$ {
    export type Inbound =
        | (LedgerAccountSubject$.Inbound & { type: "ACCOUNT" })
        | (WalletSubject$.Inbound & { type: "WALLET" });

    export type Outbound =
        | (LedgerAccountSubject$.Outbound & { type: "ACCOUNT" })
        | (WalletSubject$.Outbound & { type: "WALLET" });
    export const inboundSchema: z.ZodType<Subject, z.ZodTypeDef, Inbound> = z.union([
        LedgerAccountSubject$.inboundSchema.and(
            z.object({ type: z.literal("ACCOUNT") }).transform((v) => ({ type: v.type }))
        ),
        WalletSubject$.inboundSchema.and(
            z.object({ type: z.literal("WALLET") }).transform((v) => ({ type: v.type }))
        ),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Subject> = z.union([
        LedgerAccountSubject$.outboundSchema.and(
            z.object({ type: z.literal("ACCOUNT") }).transform((v) => ({ type: v.type }))
        ),
        WalletSubject$.outboundSchema.and(
            z.object({ type: z.literal("WALLET") }).transform((v) => ({ type: v.type }))
        ),
    ]);
}
