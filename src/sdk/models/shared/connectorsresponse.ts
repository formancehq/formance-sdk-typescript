/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connector, Connector$ } from "./connector";
import * as z from "zod";

export type ConnectorsResponseData = {
    connectorID: string;
    enabled?: boolean | undefined;
    name: string;
    provider: Connector;
};

export type ConnectorsResponse = {
    data: Array<ConnectorsResponseData>;
};

/** @internal */
export namespace ConnectorsResponseData$ {
    export const inboundSchema: z.ZodType<ConnectorsResponseData, z.ZodTypeDef, unknown> = z.object(
        {
            connectorID: z.string(),
            enabled: z.boolean().optional(),
            name: z.string(),
            provider: Connector$.inboundSchema,
        }
    );

    export type Outbound = {
        connectorID: string;
        enabled?: boolean | undefined;
        name: string;
        provider: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsResponseData> =
        z.object({
            connectorID: z.string(),
            enabled: z.boolean().optional(),
            name: z.string(),
            provider: Connector$.outboundSchema,
        });
}

/** @internal */
export namespace ConnectorsResponse$ {
    export const inboundSchema: z.ZodType<ConnectorsResponse, z.ZodTypeDef, unknown> = z.object({
        data: z.array(z.lazy(() => ConnectorsResponseData$.inboundSchema)),
    });

    export type Outbound = {
        data: Array<ConnectorsResponseData$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsResponse> = z.object({
        data: z.array(z.lazy(() => ConnectorsResponseData$.outboundSchema)),
    });
}
