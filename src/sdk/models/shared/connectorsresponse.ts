/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connector, Connector$ } from "./connector";
import * as z from "zod";

export type ConnectorsResponseData = {
    connectorID: string;
    enabled?: boolean | undefined;
    name: string;
    provider: Connector;
};

export type ConnectorsResponse = {
    data: Array<ConnectorsResponseData>;
};

/** @internal */
export namespace ConnectorsResponseData$ {
    export type Inbound = {
        connectorID: string;
        enabled?: boolean | undefined;
        name: string;
        provider: Connector;
    };

    export const inboundSchema: z.ZodType<ConnectorsResponseData, z.ZodTypeDef, Inbound> = z
        .object({
            connectorID: z.string(),
            enabled: z.boolean().optional(),
            name: z.string(),
            provider: Connector$,
        })
        .transform((v) => {
            return {
                connectorID: v.connectorID,
                ...(v.enabled === undefined ? null : { enabled: v.enabled }),
                name: v.name,
                provider: v.provider,
            };
        });

    export type Outbound = {
        connectorID: string;
        enabled?: boolean | undefined;
        name: string;
        provider: Connector;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsResponseData> = z
        .object({
            connectorID: z.string(),
            enabled: z.boolean().optional(),
            name: z.string(),
            provider: Connector$,
        })
        .transform((v) => {
            return {
                connectorID: v.connectorID,
                ...(v.enabled === undefined ? null : { enabled: v.enabled }),
                name: v.name,
                provider: v.provider,
            };
        });
}

/** @internal */
export namespace ConnectorsResponse$ {
    export type Inbound = {
        data: Array<ConnectorsResponseData$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ConnectorsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(z.lazy(() => ConnectorsResponseData$.inboundSchema)),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: Array<ConnectorsResponseData$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsResponse> = z
        .object({
            data: z.array(z.lazy(() => ConnectorsResponseData$.outboundSchema)),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
