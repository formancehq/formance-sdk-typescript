/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Policy,
  Policy$inboundSchema,
  Policy$Outbound,
  Policy$outboundSchema,
} from "./policy.js";

export type PoliciesCursorResponseCursor = {
  data: Array<Policy>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/**
 * OK
 */
export type PoliciesCursorResponse = {
  cursor: PoliciesCursorResponseCursor;
};

/** @internal */
export const PoliciesCursorResponseCursor$inboundSchema: z.ZodType<
  PoliciesCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Policy$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type PoliciesCursorResponseCursor$Outbound = {
  data: Array<Policy$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const PoliciesCursorResponseCursor$outboundSchema: z.ZodType<
  PoliciesCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  PoliciesCursorResponseCursor
> = z.object({
  data: z.array(Policy$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PoliciesCursorResponseCursor$ {
  /** @deprecated use `PoliciesCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = PoliciesCursorResponseCursor$inboundSchema;
  /** @deprecated use `PoliciesCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema = PoliciesCursorResponseCursor$outboundSchema;
  /** @deprecated use `PoliciesCursorResponseCursor$Outbound` instead. */
  export type Outbound = PoliciesCursorResponseCursor$Outbound;
}

export function policiesCursorResponseCursorToJSON(
  policiesCursorResponseCursor: PoliciesCursorResponseCursor,
): string {
  return JSON.stringify(
    PoliciesCursorResponseCursor$outboundSchema.parse(
      policiesCursorResponseCursor,
    ),
  );
}

export function policiesCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<PoliciesCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PoliciesCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PoliciesCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const PoliciesCursorResponse$inboundSchema: z.ZodType<
  PoliciesCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => PoliciesCursorResponseCursor$inboundSchema),
});

/** @internal */
export type PoliciesCursorResponse$Outbound = {
  cursor: PoliciesCursorResponseCursor$Outbound;
};

/** @internal */
export const PoliciesCursorResponse$outboundSchema: z.ZodType<
  PoliciesCursorResponse$Outbound,
  z.ZodTypeDef,
  PoliciesCursorResponse
> = z.object({
  cursor: z.lazy(() => PoliciesCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PoliciesCursorResponse$ {
  /** @deprecated use `PoliciesCursorResponse$inboundSchema` instead. */
  export const inboundSchema = PoliciesCursorResponse$inboundSchema;
  /** @deprecated use `PoliciesCursorResponse$outboundSchema` instead. */
  export const outboundSchema = PoliciesCursorResponse$outboundSchema;
  /** @deprecated use `PoliciesCursorResponse$Outbound` instead. */
  export type Outbound = PoliciesCursorResponse$Outbound;
}

export function policiesCursorResponseToJSON(
  policiesCursorResponse: PoliciesCursorResponse,
): string {
  return JSON.stringify(
    PoliciesCursorResponse$outboundSchema.parse(policiesCursorResponse),
  );
}

export function policiesCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<PoliciesCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PoliciesCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PoliciesCursorResponse' from JSON`,
  );
}
