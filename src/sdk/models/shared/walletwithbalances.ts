/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AssetHolder,
  AssetHolder$inboundSchema,
  AssetHolder$Outbound,
  AssetHolder$outboundSchema,
} from "./assetholder.js";

export type WalletWithBalancesBalances = {
  main: AssetHolder;
};

export type WalletWithBalances = {
  balances: WalletWithBalancesBalances;
  createdAt: Date;
  /**
   * The unique ID of the wallet.
   */
  id: string;
  ledger: string;
  /**
   * Metadata associated with the wallet.
   */
  metadata: { [k: string]: string };
  name: string;
};

/** @internal */
export const WalletWithBalancesBalances$inboundSchema: z.ZodType<
  WalletWithBalancesBalances,
  z.ZodTypeDef,
  unknown
> = z.object({
  main: AssetHolder$inboundSchema,
});

/** @internal */
export type WalletWithBalancesBalances$Outbound = {
  main: AssetHolder$Outbound;
};

/** @internal */
export const WalletWithBalancesBalances$outboundSchema: z.ZodType<
  WalletWithBalancesBalances$Outbound,
  z.ZodTypeDef,
  WalletWithBalancesBalances
> = z.object({
  main: AssetHolder$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletWithBalancesBalances$ {
  /** @deprecated use `WalletWithBalancesBalances$inboundSchema` instead. */
  export const inboundSchema = WalletWithBalancesBalances$inboundSchema;
  /** @deprecated use `WalletWithBalancesBalances$outboundSchema` instead. */
  export const outboundSchema = WalletWithBalancesBalances$outboundSchema;
  /** @deprecated use `WalletWithBalancesBalances$Outbound` instead. */
  export type Outbound = WalletWithBalancesBalances$Outbound;
}

/** @internal */
export const WalletWithBalances$inboundSchema: z.ZodType<
  WalletWithBalances,
  z.ZodTypeDef,
  unknown
> = z.object({
  balances: z.lazy(() => WalletWithBalancesBalances$inboundSchema),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  id: z.string(),
  ledger: z.string(),
  metadata: z.record(z.string()),
  name: z.string(),
});

/** @internal */
export type WalletWithBalances$Outbound = {
  balances: WalletWithBalancesBalances$Outbound;
  createdAt: string;
  id: string;
  ledger: string;
  metadata: { [k: string]: string };
  name: string;
};

/** @internal */
export const WalletWithBalances$outboundSchema: z.ZodType<
  WalletWithBalances$Outbound,
  z.ZodTypeDef,
  WalletWithBalances
> = z.object({
  balances: z.lazy(() => WalletWithBalancesBalances$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  ledger: z.string(),
  metadata: z.record(z.string()),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletWithBalances$ {
  /** @deprecated use `WalletWithBalances$inboundSchema` instead. */
  export const inboundSchema = WalletWithBalances$inboundSchema;
  /** @deprecated use `WalletWithBalances$outboundSchema` instead. */
  export const outboundSchema = WalletWithBalances$outboundSchema;
  /** @deprecated use `WalletWithBalances$Outbound` instead. */
  export type Outbound = WalletWithBalances$Outbound;
}
