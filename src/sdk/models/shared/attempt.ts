/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WebhooksConfig, WebhooksConfig$ } from "./webhooksconfig";
import { z } from "zod";

export type Attempt = {
    config: WebhooksConfig;
    createdAt: Date;
    id: string;
    nextRetryAfter?: Date | undefined;
    payload: string;
    retryAttempt: number;
    status: string;
    statusCode: number;
    updatedAt: Date;
    webhookID: string;
};

/** @internal */
export namespace Attempt$ {
    export type Inbound = {
        config: WebhooksConfig$.Inbound;
        createdAt: string;
        id: string;
        nextRetryAfter?: string | undefined;
        payload: string;
        retryAttempt: number;
        status: string;
        statusCode: number;
        updatedAt: string;
        webhookID: string;
    };

    export const inboundSchema: z.ZodType<Attempt, z.ZodTypeDef, Inbound> = z
        .object({
            config: WebhooksConfig$.inboundSchema,
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            nextRetryAfter: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            payload: z.string(),
            retryAttempt: z.number().int(),
            status: z.string(),
            statusCode: z.number().int(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            webhookID: z.string(),
        })
        .transform((v) => {
            return {
                config: v.config,
                createdAt: v.createdAt,
                id: v.id,
                ...(v.nextRetryAfter === undefined ? null : { nextRetryAfter: v.nextRetryAfter }),
                payload: v.payload,
                retryAttempt: v.retryAttempt,
                status: v.status,
                statusCode: v.statusCode,
                updatedAt: v.updatedAt,
                webhookID: v.webhookID,
            };
        });

    export type Outbound = {
        config: WebhooksConfig$.Outbound;
        createdAt: string;
        id: string;
        nextRetryAfter?: string | undefined;
        payload: string;
        retryAttempt: number;
        status: string;
        statusCode: number;
        updatedAt: string;
        webhookID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attempt> = z
        .object({
            config: WebhooksConfig$.outboundSchema,
            createdAt: z.date().transform((v) => v.toISOString()),
            id: z.string(),
            nextRetryAfter: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            payload: z.string(),
            retryAttempt: z.number().int(),
            status: z.string(),
            statusCode: z.number().int(),
            updatedAt: z.date().transform((v) => v.toISOString()),
            webhookID: z.string(),
        })
        .transform((v) => {
            return {
                config: v.config,
                createdAt: v.createdAt,
                id: v.id,
                ...(v.nextRetryAfter === undefined ? null : { nextRetryAfter: v.nextRetryAfter }),
                payload: v.payload,
                retryAttempt: v.retryAttempt,
                status: v.status,
                statusCode: v.statusCode,
                updatedAt: v.updatedAt,
                webhookID: v.webhookID,
            };
        });
}
