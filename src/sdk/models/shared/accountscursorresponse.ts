/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Account, Account$ } from "./account";
import * as z from "zod";

export type AccountsCursorResponseCursor = {
    data: Array<Account>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type AccountsCursorResponse = {
    cursor: AccountsCursorResponseCursor;
};

/** @internal */
export namespace AccountsCursorResponseCursor$ {
    export const inboundSchema: z.ZodType<AccountsCursorResponseCursor, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(Account$.inboundSchema),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });

    export type Outbound = {
        data: Array<Account$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsCursorResponseCursor> =
        z.object({
            data: z.array(Account$.outboundSchema),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });
}

/** @internal */
export namespace AccountsCursorResponse$ {
    export const inboundSchema: z.ZodType<AccountsCursorResponse, z.ZodTypeDef, unknown> = z.object(
        {
            cursor: z.lazy(() => AccountsCursorResponseCursor$.inboundSchema),
        }
    );

    export type Outbound = {
        cursor: AccountsCursorResponseCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsCursorResponse> =
        z.object({
            cursor: z.lazy(() => AccountsCursorResponseCursor$.outboundSchema),
        });
}
