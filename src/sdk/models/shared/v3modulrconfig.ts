/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3ModulrConfig = {
  apiKey: string;
  apiSecret: string;
  endpoint: string;
  name: string;
  pageSize?: number | undefined;
  pollingPeriod?: string | undefined;
};

/** @internal */
export const V3ModulrConfig$inboundSchema: z.ZodType<
  V3ModulrConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
  apiSecret: z.string(),
  endpoint: z.string(),
  name: z.string(),
  pageSize: z.number().int().default(25),
  pollingPeriod: z.string().default("2m"),
});

/** @internal */
export type V3ModulrConfig$Outbound = {
  apiKey: string;
  apiSecret: string;
  endpoint: string;
  name: string;
  pageSize: number;
  pollingPeriod: string;
};

/** @internal */
export const V3ModulrConfig$outboundSchema: z.ZodType<
  V3ModulrConfig$Outbound,
  z.ZodTypeDef,
  V3ModulrConfig
> = z.object({
  apiKey: z.string(),
  apiSecret: z.string(),
  endpoint: z.string(),
  name: z.string(),
  pageSize: z.number().int().default(25),
  pollingPeriod: z.string().default("2m"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ModulrConfig$ {
  /** @deprecated use `V3ModulrConfig$inboundSchema` instead. */
  export const inboundSchema = V3ModulrConfig$inboundSchema;
  /** @deprecated use `V3ModulrConfig$outboundSchema` instead. */
  export const outboundSchema = V3ModulrConfig$outboundSchema;
  /** @deprecated use `V3ModulrConfig$Outbound` instead. */
  export type Outbound = V3ModulrConfig$Outbound;
}

export function v3ModulrConfigToJSON(v3ModulrConfig: V3ModulrConfig): string {
  return JSON.stringify(V3ModulrConfig$outboundSchema.parse(v3ModulrConfig));
}

export function v3ModulrConfigFromJSON(
  jsonString: string,
): SafeParseResult<V3ModulrConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ModulrConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ModulrConfig' from JSON`,
  );
}
