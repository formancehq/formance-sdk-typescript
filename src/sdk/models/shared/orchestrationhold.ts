/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Subject,
  Subject$inboundSchema,
  Subject$Outbound,
  Subject$outboundSchema,
} from "./subject.js";

export type OrchestrationHold = {
  description: string;
  destination?: Subject | undefined;
  /**
   * The unique ID of the hold.
   */
  id: string;
  /**
   * Metadata associated with the hold.
   */
  metadata: { [k: string]: string };
  /**
   * The ID of the wallet the hold is associated with.
   */
  walletID: string;
};

/** @internal */
export const OrchestrationHold$inboundSchema: z.ZodType<
  OrchestrationHold,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  destination: Subject$inboundSchema.optional(),
  id: z.string(),
  metadata: z.record(z.string()),
  walletID: z.string(),
});

/** @internal */
export type OrchestrationHold$Outbound = {
  description: string;
  destination?: Subject$Outbound | undefined;
  id: string;
  metadata: { [k: string]: string };
  walletID: string;
};

/** @internal */
export const OrchestrationHold$outboundSchema: z.ZodType<
  OrchestrationHold$Outbound,
  z.ZodTypeDef,
  OrchestrationHold
> = z.object({
  description: z.string(),
  destination: Subject$outboundSchema.optional(),
  id: z.string(),
  metadata: z.record(z.string()),
  walletID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationHold$ {
  /** @deprecated use `OrchestrationHold$inboundSchema` instead. */
  export const inboundSchema = OrchestrationHold$inboundSchema;
  /** @deprecated use `OrchestrationHold$outboundSchema` instead. */
  export const outboundSchema = OrchestrationHold$outboundSchema;
  /** @deprecated use `OrchestrationHold$Outbound` instead. */
  export type Outbound = OrchestrationHold$Outbound;
}

export function orchestrationHoldToJSON(
  orchestrationHold: OrchestrationHold,
): string {
  return JSON.stringify(
    OrchestrationHold$outboundSchema.parse(orchestrationHold),
  );
}

export function orchestrationHoldFromJSON(
  jsonString: string,
): SafeParseResult<OrchestrationHold, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrchestrationHold$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrchestrationHold' from JSON`,
  );
}
