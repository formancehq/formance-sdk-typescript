/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type BankAccountAdjustment = {
    accountID: string;
    connectorID: string;
    createdAt: Date;
    id: string;
    provider: string;
};

/** @internal */
export namespace BankAccountAdjustment$ {
    export type Inbound = {
        accountID: string;
        connectorID: string;
        createdAt: string;
        id: string;
        provider: string;
    };

    export const inboundSchema: z.ZodType<BankAccountAdjustment, z.ZodTypeDef, Inbound> = z
        .object({
            accountID: z.string(),
            connectorID: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            provider: z.string(),
        })
        .transform((v) => {
            return {
                accountID: v.accountID,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                id: v.id,
                provider: v.provider,
            };
        });

    export type Outbound = {
        accountID: string;
        connectorID: string;
        createdAt: string;
        id: string;
        provider: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankAccountAdjustment> = z
        .object({
            accountID: z.string(),
            connectorID: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            id: z.string(),
            provider: z.string(),
        })
        .transform((v) => {
            return {
                accountID: v.accountID,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                id: v.id,
                provider: v.provider,
            };
        });
}
