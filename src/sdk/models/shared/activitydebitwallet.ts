/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DebitWalletRequest,
  DebitWalletRequest$inboundSchema,
  DebitWalletRequest$Outbound,
  DebitWalletRequest$outboundSchema,
} from "./debitwalletrequest.js";

export type ActivityDebitWallet = {
  data?: DebitWalletRequest | undefined;
  id?: string | undefined;
};

/** @internal */
export const ActivityDebitWallet$inboundSchema: z.ZodType<
  ActivityDebitWallet,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: DebitWalletRequest$inboundSchema.optional(),
  id: z.string().optional(),
});

/** @internal */
export type ActivityDebitWallet$Outbound = {
  data?: DebitWalletRequest$Outbound | undefined;
  id?: string | undefined;
};

/** @internal */
export const ActivityDebitWallet$outboundSchema: z.ZodType<
  ActivityDebitWallet$Outbound,
  z.ZodTypeDef,
  ActivityDebitWallet
> = z.object({
  data: DebitWalletRequest$outboundSchema.optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityDebitWallet$ {
  /** @deprecated use `ActivityDebitWallet$inboundSchema` instead. */
  export const inboundSchema = ActivityDebitWallet$inboundSchema;
  /** @deprecated use `ActivityDebitWallet$outboundSchema` instead. */
  export const outboundSchema = ActivityDebitWallet$outboundSchema;
  /** @deprecated use `ActivityDebitWallet$Outbound` instead. */
  export type Outbound = ActivityDebitWallet$Outbound;
}

export function activityDebitWalletToJSON(
  activityDebitWallet: ActivityDebitWallet,
): string {
  return JSON.stringify(
    ActivityDebitWallet$outboundSchema.parse(activityDebitWallet),
  );
}

export function activityDebitWalletFromJSON(
  jsonString: string,
): SafeParseResult<ActivityDebitWallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityDebitWallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityDebitWallet' from JSON`,
  );
}
