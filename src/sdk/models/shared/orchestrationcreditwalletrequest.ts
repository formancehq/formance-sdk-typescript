/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Monetary,
  Monetary$inboundSchema,
  Monetary$Outbound,
  Monetary$outboundSchema,
} from "./monetary.js";
import {
  Subject,
  Subject$inboundSchema,
  Subject$Outbound,
  Subject$outboundSchema,
} from "./subject.js";

export type OrchestrationCreditWalletRequest = {
  amount: Monetary;
  /**
   * The balance to credit
   */
  balance?: string | undefined;
  /**
   * Metadata associated with the wallet.
   */
  metadata: { [k: string]: string };
  reference?: string | undefined;
  sources: Array<Subject>;
  timestamp?: Date | undefined;
};

/** @internal */
export const OrchestrationCreditWalletRequest$inboundSchema: z.ZodType<
  OrchestrationCreditWalletRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: Monetary$inboundSchema,
  balance: z.string().optional(),
  metadata: z.record(z.string()),
  reference: z.string().optional(),
  sources: z.array(Subject$inboundSchema),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type OrchestrationCreditWalletRequest$Outbound = {
  amount: Monetary$Outbound;
  balance?: string | undefined;
  metadata: { [k: string]: string };
  reference?: string | undefined;
  sources: Array<Subject$Outbound>;
  timestamp?: string | undefined;
};

/** @internal */
export const OrchestrationCreditWalletRequest$outboundSchema: z.ZodType<
  OrchestrationCreditWalletRequest$Outbound,
  z.ZodTypeDef,
  OrchestrationCreditWalletRequest
> = z.object({
  amount: Monetary$outboundSchema,
  balance: z.string().optional(),
  metadata: z.record(z.string()),
  reference: z.string().optional(),
  sources: z.array(Subject$outboundSchema),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestrationCreditWalletRequest$ {
  /** @deprecated use `OrchestrationCreditWalletRequest$inboundSchema` instead. */
  export const inboundSchema = OrchestrationCreditWalletRequest$inboundSchema;
  /** @deprecated use `OrchestrationCreditWalletRequest$outboundSchema` instead. */
  export const outboundSchema = OrchestrationCreditWalletRequest$outboundSchema;
  /** @deprecated use `OrchestrationCreditWalletRequest$Outbound` instead. */
  export type Outbound = OrchestrationCreditWalletRequest$Outbound;
}

export function orchestrationCreditWalletRequestToJSON(
  orchestrationCreditWalletRequest: OrchestrationCreditWalletRequest,
): string {
  return JSON.stringify(
    OrchestrationCreditWalletRequest$outboundSchema.parse(
      orchestrationCreditWalletRequest,
    ),
  );
}

export function orchestrationCreditWalletRequestFromJSON(
  jsonString: string,
): SafeParseResult<OrchestrationCreditWalletRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrchestrationCreditWalletRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrchestrationCreditWalletRequest' from JSON`,
  );
}
