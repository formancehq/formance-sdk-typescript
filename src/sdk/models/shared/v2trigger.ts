/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2Trigger = {
  createdAt: Date;
  event: string;
  filter?: string | undefined;
  id: string;
  name?: string | undefined;
  vars?: { [k: string]: any } | undefined;
  version?: string | undefined;
  workflowID: string;
};

/** @internal */
export const V2Trigger$inboundSchema: z.ZodType<
  V2Trigger,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  event: z.string(),
  filter: z.string().optional(),
  id: z.string(),
  name: z.string().optional(),
  vars: z.record(z.any()).optional(),
  version: z.string().optional(),
  workflowID: z.string(),
});

/** @internal */
export type V2Trigger$Outbound = {
  createdAt: string;
  event: string;
  filter?: string | undefined;
  id: string;
  name?: string | undefined;
  vars?: { [k: string]: any } | undefined;
  version?: string | undefined;
  workflowID: string;
};

/** @internal */
export const V2Trigger$outboundSchema: z.ZodType<
  V2Trigger$Outbound,
  z.ZodTypeDef,
  V2Trigger
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  event: z.string(),
  filter: z.string().optional(),
  id: z.string(),
  name: z.string().optional(),
  vars: z.record(z.any()).optional(),
  version: z.string().optional(),
  workflowID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2Trigger$ {
  /** @deprecated use `V2Trigger$inboundSchema` instead. */
  export const inboundSchema = V2Trigger$inboundSchema;
  /** @deprecated use `V2Trigger$outboundSchema` instead. */
  export const outboundSchema = V2Trigger$outboundSchema;
  /** @deprecated use `V2Trigger$Outbound` instead. */
  export type Outbound = V2Trigger$Outbound;
}

export function v2TriggerToJSON(v2Trigger: V2Trigger): string {
  return JSON.stringify(V2Trigger$outboundSchema.parse(v2Trigger));
}

export function v2TriggerFromJSON(
  jsonString: string,
): SafeParseResult<V2Trigger, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2Trigger$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2Trigger' from JSON`,
  );
}
