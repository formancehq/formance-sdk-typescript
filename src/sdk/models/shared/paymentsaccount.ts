/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PaymentsAccountRaw = {};

export type PaymentsAccount = {
    accountName: string;
    connectorID: string;
    createdAt: Date;
    defaultAsset: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    defaultCurrency: string;
    id: string;
    metadata: Record<string, string> | null;
    pools?: Array<string> | undefined;
    raw: PaymentsAccountRaw | null;
    reference: string;
    type: string;
};

/** @internal */
export namespace PaymentsAccountRaw$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PaymentsAccountRaw, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsAccountRaw> = z.object(
        {}
    );
}

/** @internal */
export namespace PaymentsAccount$ {
    export type Inbound = {
        accountName: string;
        connectorID: string;
        createdAt: string;
        defaultAsset: string;
        defaultCurrency: string;
        id: string;
        metadata: Record<string, string> | null;
        pools?: Array<string> | undefined;
        raw: PaymentsAccountRaw$.Inbound | null;
        reference: string;
        type: string;
    };

    export const inboundSchema: z.ZodType<PaymentsAccount, z.ZodTypeDef, Inbound> = z
        .object({
            accountName: z.string(),
            connectorID: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            defaultAsset: z.string(),
            defaultCurrency: z.string(),
            id: z.string(),
            metadata: z.nullable(z.record(z.string())),
            pools: z.array(z.string()).optional(),
            raw: z.nullable(z.lazy(() => PaymentsAccountRaw$.inboundSchema)),
            reference: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                accountName: v.accountName,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                defaultAsset: v.defaultAsset,
                defaultCurrency: v.defaultCurrency,
                id: v.id,
                metadata: v.metadata,
                ...(v.pools === undefined ? null : { pools: v.pools }),
                raw: v.raw,
                reference: v.reference,
                type: v.type,
            };
        });

    export type Outbound = {
        accountName: string;
        connectorID: string;
        createdAt: string;
        defaultAsset: string;
        defaultCurrency: string;
        id: string;
        metadata: Record<string, string> | null;
        pools?: Array<string> | undefined;
        raw: PaymentsAccountRaw$.Outbound | null;
        reference: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsAccount> = z
        .object({
            accountName: z.string(),
            connectorID: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            defaultAsset: z.string(),
            defaultCurrency: z.string(),
            id: z.string(),
            metadata: z.nullable(z.record(z.string())),
            pools: z.array(z.string()).optional(),
            raw: z.nullable(z.lazy(() => PaymentsAccountRaw$.outboundSchema)),
            reference: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                accountName: v.accountName,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                defaultAsset: v.defaultAsset,
                defaultCurrency: v.defaultCurrency,
                id: v.id,
                metadata: v.metadata,
                ...(v.pools === undefined ? null : { pools: v.pools }),
                raw: v.raw,
                reference: v.reference,
                type: v.type,
            };
        });
}
