/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountType, AccountType$ } from "./accounttype";
import * as z from "zod";

export type PaymentsAccountRaw = {};

export type PaymentsAccount = {
    accountName: string;
    connectorID: string;
    createdAt: Date;
    defaultAsset: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    defaultCurrency: string;
    id: string;
    metadata: { [k: string]: string } | null;
    pools?: Array<string> | undefined;
    provider?: string | undefined;
    raw: PaymentsAccountRaw | null;
    reference: string;
    type: AccountType;
};

/** @internal */
export namespace PaymentsAccountRaw$ {
    export const inboundSchema: z.ZodType<PaymentsAccountRaw, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsAccountRaw> = z.object(
        {}
    );
}

/** @internal */
export namespace PaymentsAccount$ {
    export const inboundSchema: z.ZodType<PaymentsAccount, z.ZodTypeDef, unknown> = z.object({
        accountName: z.string(),
        connectorID: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        defaultAsset: z.string(),
        defaultCurrency: z.string(),
        id: z.string(),
        metadata: z.nullable(z.record(z.string())),
        pools: z.array(z.string()).optional(),
        provider: z.string().optional(),
        raw: z.nullable(z.lazy(() => PaymentsAccountRaw$.inboundSchema)),
        reference: z.string(),
        type: AccountType$.inboundSchema,
    });

    export type Outbound = {
        accountName: string;
        connectorID: string;
        createdAt: string;
        defaultAsset: string;
        defaultCurrency: string;
        id: string;
        metadata: { [k: string]: string } | null;
        pools?: Array<string> | undefined;
        provider?: string | undefined;
        raw: PaymentsAccountRaw$.Outbound | null;
        reference: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsAccount> = z.object({
        accountName: z.string(),
        connectorID: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        defaultAsset: z.string(),
        defaultCurrency: z.string(),
        id: z.string(),
        metadata: z.nullable(z.record(z.string())),
        pools: z.array(z.string()).optional(),
        provider: z.string().optional(),
        raw: z.nullable(z.lazy(() => PaymentsAccountRaw$.outboundSchema)),
        reference: z.string(),
        type: AccountType$.outboundSchema,
    });
}
