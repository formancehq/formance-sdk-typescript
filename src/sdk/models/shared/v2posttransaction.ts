/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2Posting,
  V2Posting$inboundSchema,
  V2Posting$Outbound,
  V2Posting$outboundSchema,
} from "./v2posting.js";

export type V2PostTransactionScript = {
  plain: string;
  vars?: { [k: string]: string } | undefined;
};

export type V2PostTransaction = {
  metadata: { [k: string]: string };
  postings?: Array<V2Posting> | undefined;
  reference?: string | undefined;
  script?: V2PostTransactionScript | undefined;
  timestamp?: Date | undefined;
};

/** @internal */
export const V2PostTransactionScript$inboundSchema: z.ZodType<
  V2PostTransactionScript,
  z.ZodTypeDef,
  unknown
> = z.object({
  plain: z.string(),
  vars: z.record(z.string()).optional(),
});

/** @internal */
export type V2PostTransactionScript$Outbound = {
  plain: string;
  vars?: { [k: string]: string } | undefined;
};

/** @internal */
export const V2PostTransactionScript$outboundSchema: z.ZodType<
  V2PostTransactionScript$Outbound,
  z.ZodTypeDef,
  V2PostTransactionScript
> = z.object({
  plain: z.string(),
  vars: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PostTransactionScript$ {
  /** @deprecated use `V2PostTransactionScript$inboundSchema` instead. */
  export const inboundSchema = V2PostTransactionScript$inboundSchema;
  /** @deprecated use `V2PostTransactionScript$outboundSchema` instead. */
  export const outboundSchema = V2PostTransactionScript$outboundSchema;
  /** @deprecated use `V2PostTransactionScript$Outbound` instead. */
  export type Outbound = V2PostTransactionScript$Outbound;
}

export function v2PostTransactionScriptToJSON(
  v2PostTransactionScript: V2PostTransactionScript,
): string {
  return JSON.stringify(
    V2PostTransactionScript$outboundSchema.parse(v2PostTransactionScript),
  );
}

export function v2PostTransactionScriptFromJSON(
  jsonString: string,
): SafeParseResult<V2PostTransactionScript, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2PostTransactionScript$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PostTransactionScript' from JSON`,
  );
}

/** @internal */
export const V2PostTransaction$inboundSchema: z.ZodType<
  V2PostTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.string()),
  postings: z.array(V2Posting$inboundSchema).optional(),
  reference: z.string().optional(),
  script: z.lazy(() => V2PostTransactionScript$inboundSchema).optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type V2PostTransaction$Outbound = {
  metadata: { [k: string]: string };
  postings?: Array<V2Posting$Outbound> | undefined;
  reference?: string | undefined;
  script?: V2PostTransactionScript$Outbound | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const V2PostTransaction$outboundSchema: z.ZodType<
  V2PostTransaction$Outbound,
  z.ZodTypeDef,
  V2PostTransaction
> = z.object({
  metadata: z.record(z.string()),
  postings: z.array(V2Posting$outboundSchema).optional(),
  reference: z.string().optional(),
  script: z.lazy(() => V2PostTransactionScript$outboundSchema).optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PostTransaction$ {
  /** @deprecated use `V2PostTransaction$inboundSchema` instead. */
  export const inboundSchema = V2PostTransaction$inboundSchema;
  /** @deprecated use `V2PostTransaction$outboundSchema` instead. */
  export const outboundSchema = V2PostTransaction$outboundSchema;
  /** @deprecated use `V2PostTransaction$Outbound` instead. */
  export type Outbound = V2PostTransaction$Outbound;
}

export function v2PostTransactionToJSON(
  v2PostTransaction: V2PostTransaction,
): string {
  return JSON.stringify(
    V2PostTransaction$outboundSchema.parse(v2PostTransaction),
  );
}

export function v2PostTransactionFromJSON(
  jsonString: string,
): SafeParseResult<V2PostTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2PostTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2PostTransaction' from JSON`,
  );
}
