/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    V2Posting,
    V2Posting$inboundSchema,
    V2Posting$Outbound,
    V2Posting$outboundSchema,
} from "./v2posting.js";
import * as z from "zod";

export type V2PostTransactionScript = {
    plain: string;
    vars?: { [k: string]: any } | undefined;
};

export type V2PostTransaction = {
    metadata: { [k: string]: string };
    postings?: Array<V2Posting> | undefined;
    reference?: string | undefined;
    script?: V2PostTransactionScript | undefined;
    timestamp?: Date | undefined;
};

/** @internal */
export const V2PostTransactionScript$inboundSchema: z.ZodType<
    V2PostTransactionScript,
    z.ZodTypeDef,
    unknown
> = z.object({
    plain: z.string(),
    vars: z.record(z.any()).optional(),
});

/** @internal */
export type V2PostTransactionScript$Outbound = {
    plain: string;
    vars?: { [k: string]: any } | undefined;
};

/** @internal */
export const V2PostTransactionScript$outboundSchema: z.ZodType<
    V2PostTransactionScript$Outbound,
    z.ZodTypeDef,
    V2PostTransactionScript
> = z.object({
    plain: z.string(),
    vars: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PostTransactionScript$ {
    /** @deprecated use `V2PostTransactionScript$inboundSchema` instead. */
    export const inboundSchema = V2PostTransactionScript$inboundSchema;
    /** @deprecated use `V2PostTransactionScript$outboundSchema` instead. */
    export const outboundSchema = V2PostTransactionScript$outboundSchema;
    /** @deprecated use `V2PostTransactionScript$Outbound` instead. */
    export type Outbound = V2PostTransactionScript$Outbound;
}

/** @internal */
export const V2PostTransaction$inboundSchema: z.ZodType<V2PostTransaction, z.ZodTypeDef, unknown> =
    z.object({
        metadata: z.record(z.string()),
        postings: z.array(V2Posting$inboundSchema).optional(),
        reference: z.string().optional(),
        script: z.lazy(() => V2PostTransactionScript$inboundSchema).optional(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

/** @internal */
export type V2PostTransaction$Outbound = {
    metadata: { [k: string]: string };
    postings?: Array<V2Posting$Outbound> | undefined;
    reference?: string | undefined;
    script?: V2PostTransactionScript$Outbound | undefined;
    timestamp?: string | undefined;
};

/** @internal */
export const V2PostTransaction$outboundSchema: z.ZodType<
    V2PostTransaction$Outbound,
    z.ZodTypeDef,
    V2PostTransaction
> = z.object({
    metadata: z.record(z.string()),
    postings: z.array(V2Posting$outboundSchema).optional(),
    reference: z.string().optional(),
    script: z.lazy(() => V2PostTransactionScript$outboundSchema).optional(),
    timestamp: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2PostTransaction$ {
    /** @deprecated use `V2PostTransaction$inboundSchema` instead. */
    export const inboundSchema = V2PostTransaction$inboundSchema;
    /** @deprecated use `V2PostTransaction$outboundSchema` instead. */
    export const outboundSchema = V2PostTransaction$outboundSchema;
    /** @deprecated use `V2PostTransaction$Outbound` instead. */
    export type Outbound = V2PostTransaction$Outbound;
}
