/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2Posting, V2Posting$ } from "./v2posting";
import * as z from "zod";

export type V2Transaction = {
    id: bigint;
    metadata: { [k: string]: string };
    postings: Array<V2Posting>;
    reference?: string | undefined;
    reverted: boolean;
    timestamp: Date;
};

/** @internal */
export namespace V2Transaction$ {
    export const inboundSchema: z.ZodType<V2Transaction, z.ZodTypeDef, unknown> = z.object({
        id: z.number().transform((v) => BigInt(v)),
        metadata: z.record(z.string()),
        postings: z.array(V2Posting$.inboundSchema),
        reference: z.string().optional(),
        reverted: z.boolean(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        id: number;
        metadata: { [k: string]: string };
        postings: Array<V2Posting$.Outbound>;
        reference?: string | undefined;
        reverted: boolean;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2Transaction> = z.object({
        id: z.bigint().transform((v) => Number(v)),
        metadata: z.record(z.string()),
        postings: z.array(V2Posting$.outboundSchema),
        reference: z.string().optional(),
        reverted: z.boolean(),
        timestamp: z.date().transform((v) => v.toISOString()),
    });
}
