/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3Connector,
  V3Connector$inboundSchema,
  V3Connector$Outbound,
  V3Connector$outboundSchema,
} from "./v3connector.js";

export type V3ConnectorsCursorResponseCursor = {
  data: Array<V3Connector>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V3ConnectorsCursorResponse = {
  cursor: V3ConnectorsCursorResponseCursor;
};

/** @internal */
export const V3ConnectorsCursorResponseCursor$inboundSchema: z.ZodType<
  V3ConnectorsCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V3Connector$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V3ConnectorsCursorResponseCursor$Outbound = {
  data: Array<V3Connector$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V3ConnectorsCursorResponseCursor$outboundSchema: z.ZodType<
  V3ConnectorsCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  V3ConnectorsCursorResponseCursor
> = z.object({
  data: z.array(V3Connector$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ConnectorsCursorResponseCursor$ {
  /** @deprecated use `V3ConnectorsCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = V3ConnectorsCursorResponseCursor$inboundSchema;
  /** @deprecated use `V3ConnectorsCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema = V3ConnectorsCursorResponseCursor$outboundSchema;
  /** @deprecated use `V3ConnectorsCursorResponseCursor$Outbound` instead. */
  export type Outbound = V3ConnectorsCursorResponseCursor$Outbound;
}

export function v3ConnectorsCursorResponseCursorToJSON(
  v3ConnectorsCursorResponseCursor: V3ConnectorsCursorResponseCursor,
): string {
  return JSON.stringify(
    V3ConnectorsCursorResponseCursor$outboundSchema.parse(
      v3ConnectorsCursorResponseCursor,
    ),
  );
}

export function v3ConnectorsCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<V3ConnectorsCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ConnectorsCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ConnectorsCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const V3ConnectorsCursorResponse$inboundSchema: z.ZodType<
  V3ConnectorsCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V3ConnectorsCursorResponseCursor$inboundSchema),
});

/** @internal */
export type V3ConnectorsCursorResponse$Outbound = {
  cursor: V3ConnectorsCursorResponseCursor$Outbound;
};

/** @internal */
export const V3ConnectorsCursorResponse$outboundSchema: z.ZodType<
  V3ConnectorsCursorResponse$Outbound,
  z.ZodTypeDef,
  V3ConnectorsCursorResponse
> = z.object({
  cursor: z.lazy(() => V3ConnectorsCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ConnectorsCursorResponse$ {
  /** @deprecated use `V3ConnectorsCursorResponse$inboundSchema` instead. */
  export const inboundSchema = V3ConnectorsCursorResponse$inboundSchema;
  /** @deprecated use `V3ConnectorsCursorResponse$outboundSchema` instead. */
  export const outboundSchema = V3ConnectorsCursorResponse$outboundSchema;
  /** @deprecated use `V3ConnectorsCursorResponse$Outbound` instead. */
  export type Outbound = V3ConnectorsCursorResponse$Outbound;
}

export function v3ConnectorsCursorResponseToJSON(
  v3ConnectorsCursorResponse: V3ConnectorsCursorResponse,
): string {
  return JSON.stringify(
    V3ConnectorsCursorResponse$outboundSchema.parse(v3ConnectorsCursorResponse),
  );
}

export function v3ConnectorsCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ConnectorsCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ConnectorsCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ConnectorsCursorResponse' from JSON`,
  );
}
