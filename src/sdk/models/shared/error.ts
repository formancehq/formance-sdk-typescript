/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum ErrorCode {
    Validation = "VALIDATION",
    NotFound = "NOT_FOUND",
    Internal = "INTERNAL",
}

export type ErrorT = {
    errorCode: ErrorCode;
    errorMessage: string;
};

/** @internal */
export const ErrorCode$ = z.nativeEnum(ErrorCode);

/** @internal */
export namespace ErrorT$ {
    export type Inbound = {
        errorCode: ErrorCode;
        errorMessage: string;
    };

    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, Inbound> = z
        .object({
            errorCode: ErrorCode$,
            errorMessage: z.string(),
        })
        .transform((v) => {
            return {
                errorCode: v.errorCode,
                errorMessage: v.errorMessage,
            };
        });

    export type Outbound = {
        errorCode: ErrorCode;
        errorMessage: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .object({
            errorCode: ErrorCode$,
            errorMessage: z.string(),
        })
        .transform((v) => {
            return {
                errorCode: v.errorCode,
                errorMessage: v.errorMessage,
            };
        });
}
