/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2ExporterConfiguration = {
  config: { [k: string]: any };
  driver: string;
};

/** @internal */
export const V2ExporterConfiguration$inboundSchema: z.ZodType<
  V2ExporterConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.record(z.any()),
  driver: z.string(),
});

/** @internal */
export type V2ExporterConfiguration$Outbound = {
  config: { [k: string]: any };
  driver: string;
};

/** @internal */
export const V2ExporterConfiguration$outboundSchema: z.ZodType<
  V2ExporterConfiguration$Outbound,
  z.ZodTypeDef,
  V2ExporterConfiguration
> = z.object({
  config: z.record(z.any()),
  driver: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ExporterConfiguration$ {
  /** @deprecated use `V2ExporterConfiguration$inboundSchema` instead. */
  export const inboundSchema = V2ExporterConfiguration$inboundSchema;
  /** @deprecated use `V2ExporterConfiguration$outboundSchema` instead. */
  export const outboundSchema = V2ExporterConfiguration$outboundSchema;
  /** @deprecated use `V2ExporterConfiguration$Outbound` instead. */
  export type Outbound = V2ExporterConfiguration$Outbound;
}

export function v2ExporterConfigurationToJSON(
  v2ExporterConfiguration: V2ExporterConfiguration,
): string {
  return JSON.stringify(
    V2ExporterConfiguration$outboundSchema.parse(v2ExporterConfiguration),
  );
}

export function v2ExporterConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<V2ExporterConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ExporterConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ExporterConfiguration' from JSON`,
  );
}
