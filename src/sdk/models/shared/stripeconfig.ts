/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StripeConfig = {
  apiKey: string;
  name: string;
  /**
   * Number of BalanceTransaction to fetch at each polling interval.
   *
   * @remarks
   */
  pageSize?: number | undefined;
  /**
   * The frequency at which the connector will try to fetch new BalanceTransaction objects from Stripe API.
   *
   * @remarks
   */
  pollingPeriod?: string | undefined;
  provider?: string | undefined;
};

/** @internal */
export const StripeConfig$inboundSchema: z.ZodType<
  StripeConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
  name: z.string(),
  pageSize: z.number().int().default(10),
  pollingPeriod: z.string().default("120s"),
  provider: z.string().default("Stripe"),
});

/** @internal */
export type StripeConfig$Outbound = {
  apiKey: string;
  name: string;
  pageSize: number;
  pollingPeriod: string;
  provider: string;
};

/** @internal */
export const StripeConfig$outboundSchema: z.ZodType<
  StripeConfig$Outbound,
  z.ZodTypeDef,
  StripeConfig
> = z.object({
  apiKey: z.string(),
  name: z.string(),
  pageSize: z.number().int().default(10),
  pollingPeriod: z.string().default("120s"),
  provider: z.string().default("Stripe"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StripeConfig$ {
  /** @deprecated use `StripeConfig$inboundSchema` instead. */
  export const inboundSchema = StripeConfig$inboundSchema;
  /** @deprecated use `StripeConfig$outboundSchema` instead. */
  export const outboundSchema = StripeConfig$outboundSchema;
  /** @deprecated use `StripeConfig$Outbound` instead. */
  export type Outbound = StripeConfig$Outbound;
}

export function stripeConfigToJSON(stripeConfig: StripeConfig): string {
  return JSON.stringify(StripeConfig$outboundSchema.parse(stripeConfig));
}

export function stripeConfigFromJSON(
  jsonString: string,
): SafeParseResult<StripeConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StripeConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StripeConfig' from JSON`,
  );
}
