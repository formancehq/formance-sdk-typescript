/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type StripeConfig = {
    apiKey: string;
    name: string;
    /**
     * Number of BalanceTransaction to fetch at each polling interval.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * The frequency at which the connector will try to fetch new BalanceTransaction objects from Stripe API.
     *
     * @remarks
     *
     */
    pollingPeriod?: string | undefined;
};

/** @internal */
export namespace StripeConfig$ {
    export type Inbound = {
        apiKey: string;
        name: string;
        pageSize?: number | undefined;
        pollingPeriod?: string | undefined;
    };

    export const inboundSchema: z.ZodType<StripeConfig, z.ZodTypeDef, Inbound> = z
        .object({
            apiKey: z.string(),
            name: z.string(),
            pageSize: z.number().int().default(10),
            pollingPeriod: z.string().default("120s"),
        })
        .transform((v) => {
            return {
                apiKey: v.apiKey,
                name: v.name,
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.pollingPeriod === undefined ? null : { pollingPeriod: v.pollingPeriod }),
            };
        });

    export type Outbound = {
        apiKey: string;
        name: string;
        pageSize: number;
        pollingPeriod: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StripeConfig> = z
        .object({
            apiKey: z.string(),
            name: z.string(),
            pageSize: z.number().int().default(10),
            pollingPeriod: z.string().default("120s"),
        })
        .transform((v) => {
            return {
                apiKey: v.apiKey,
                name: v.name,
                pageSize: v.pageSize,
                pollingPeriod: v.pollingPeriod,
            };
        });
}
