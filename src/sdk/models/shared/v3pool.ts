/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3Pool = {
  createdAt: Date;
  id: string;
  name: string;
  poolAccounts: Array<string>;
};

/** @internal */
export const V3Pool$inboundSchema: z.ZodType<V3Pool, z.ZodTypeDef, unknown> = z
  .object({
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    id: z.string(),
    name: z.string(),
    poolAccounts: z.array(z.string()),
  });

/** @internal */
export type V3Pool$Outbound = {
  createdAt: string;
  id: string;
  name: string;
  poolAccounts: Array<string>;
};

/** @internal */
export const V3Pool$outboundSchema: z.ZodType<
  V3Pool$Outbound,
  z.ZodTypeDef,
  V3Pool
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  name: z.string(),
  poolAccounts: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3Pool$ {
  /** @deprecated use `V3Pool$inboundSchema` instead. */
  export const inboundSchema = V3Pool$inboundSchema;
  /** @deprecated use `V3Pool$outboundSchema` instead. */
  export const outboundSchema = V3Pool$outboundSchema;
  /** @deprecated use `V3Pool$Outbound` instead. */
  export type Outbound = V3Pool$Outbound;
}

export function v3PoolToJSON(v3Pool: V3Pool): string {
  return JSON.stringify(V3Pool$outboundSchema.parse(v3Pool));
}

export function v3PoolFromJSON(
  jsonString: string,
): SafeParseResult<V3Pool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3Pool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3Pool' from JSON`,
  );
}
