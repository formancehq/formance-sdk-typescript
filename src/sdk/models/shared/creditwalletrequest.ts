/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Monetary, Monetary$ } from "./monetary";
import { Subject, Subject$ } from "./subject";
import * as z from "zod";

export type CreditWalletRequest = {
    amount: Monetary;
    /**
     * The balance to credit
     */
    balance?: string | undefined;
    /**
     * Metadata associated with the wallet.
     */
    metadata: Record<string, string>;
    reference?: string | undefined;
    sources: Array<Subject>;
};

/** @internal */
export namespace CreditWalletRequest$ {
    export type Inbound = {
        amount: Monetary$.Inbound;
        balance?: string | undefined;
        metadata: Record<string, string>;
        reference?: string | undefined;
        sources: Array<Subject$.Inbound>;
    };

    export const inboundSchema: z.ZodType<CreditWalletRequest, z.ZodTypeDef, Inbound> = z
        .object({
            amount: Monetary$.inboundSchema,
            balance: z.string().optional(),
            metadata: z.record(z.string()),
            reference: z.string().optional(),
            sources: z.array(Subject$.inboundSchema),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.balance === undefined ? null : { balance: v.balance }),
                metadata: v.metadata,
                ...(v.reference === undefined ? null : { reference: v.reference }),
                sources: v.sources,
            };
        });

    export type Outbound = {
        amount: Monetary$.Outbound;
        balance?: string | undefined;
        metadata: Record<string, string>;
        reference?: string | undefined;
        sources: Array<Subject$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreditWalletRequest> = z
        .object({
            amount: Monetary$.outboundSchema,
            balance: z.string().optional(),
            metadata: z.record(z.string()),
            reference: z.string().optional(),
            sources: z.array(Subject$.outboundSchema),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.balance === undefined ? null : { balance: v.balance }),
                metadata: v.metadata,
                ...(v.reference === undefined ? null : { reference: v.reference }),
                sources: v.sources,
            };
        });
}
