/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3AtlarConfig = {
  accessKey: string;
  baseURL: string;
  name: string;
  pageSize?: number | undefined;
  pollingPeriod?: string | undefined;
  secret: string;
};

/** @internal */
export const V3AtlarConfig$inboundSchema: z.ZodType<
  V3AtlarConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessKey: z.string(),
  baseURL: z.string(),
  name: z.string(),
  pageSize: z.number().int().default(25),
  pollingPeriod: z.string().default("2m"),
  secret: z.string(),
});

/** @internal */
export type V3AtlarConfig$Outbound = {
  accessKey: string;
  baseURL: string;
  name: string;
  pageSize: number;
  pollingPeriod: string;
  secret: string;
};

/** @internal */
export const V3AtlarConfig$outboundSchema: z.ZodType<
  V3AtlarConfig$Outbound,
  z.ZodTypeDef,
  V3AtlarConfig
> = z.object({
  accessKey: z.string(),
  baseURL: z.string(),
  name: z.string(),
  pageSize: z.number().int().default(25),
  pollingPeriod: z.string().default("2m"),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3AtlarConfig$ {
  /** @deprecated use `V3AtlarConfig$inboundSchema` instead. */
  export const inboundSchema = V3AtlarConfig$inboundSchema;
  /** @deprecated use `V3AtlarConfig$outboundSchema` instead. */
  export const outboundSchema = V3AtlarConfig$outboundSchema;
  /** @deprecated use `V3AtlarConfig$Outbound` instead. */
  export type Outbound = V3AtlarConfig$Outbound;
}

export function v3AtlarConfigToJSON(v3AtlarConfig: V3AtlarConfig): string {
  return JSON.stringify(V3AtlarConfig$outboundSchema.parse(v3AtlarConfig));
}

export function v3AtlarConfigFromJSON(
  jsonString: string,
): SafeParseResult<V3AtlarConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3AtlarConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3AtlarConfig' from JSON`,
  );
}
