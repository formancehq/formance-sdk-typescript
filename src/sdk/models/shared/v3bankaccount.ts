/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3BankAccountRelatedAccount,
  V3BankAccountRelatedAccount$inboundSchema,
  V3BankAccountRelatedAccount$Outbound,
  V3BankAccountRelatedAccount$outboundSchema,
} from "./v3bankaccountrelatedaccount.js";

export type V3BankAccount = {
  accountNumber?: string | null | undefined;
  createdAt: Date;
  iban?: string | null | undefined;
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
  relatedAccounts?: Array<V3BankAccountRelatedAccount> | undefined;
  swiftBicCode?: string | null | undefined;
};

/** @internal */
export const V3BankAccount$inboundSchema: z.ZodType<
  V3BankAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountNumber: z.nullable(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  iban: z.nullable(z.string()).optional(),
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
  relatedAccounts: z.array(V3BankAccountRelatedAccount$inboundSchema)
    .optional(),
  swiftBicCode: z.nullable(z.string()).optional(),
});

/** @internal */
export type V3BankAccount$Outbound = {
  accountNumber?: string | null | undefined;
  createdAt: string;
  iban?: string | null | undefined;
  id: string;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
  relatedAccounts?: Array<V3BankAccountRelatedAccount$Outbound> | undefined;
  swiftBicCode?: string | null | undefined;
};

/** @internal */
export const V3BankAccount$outboundSchema: z.ZodType<
  V3BankAccount$Outbound,
  z.ZodTypeDef,
  V3BankAccount
> = z.object({
  accountNumber: z.nullable(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  iban: z.nullable(z.string()).optional(),
  id: z.string(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
  relatedAccounts: z.array(V3BankAccountRelatedAccount$outboundSchema)
    .optional(),
  swiftBicCode: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3BankAccount$ {
  /** @deprecated use `V3BankAccount$inboundSchema` instead. */
  export const inboundSchema = V3BankAccount$inboundSchema;
  /** @deprecated use `V3BankAccount$outboundSchema` instead. */
  export const outboundSchema = V3BankAccount$outboundSchema;
  /** @deprecated use `V3BankAccount$Outbound` instead. */
  export type Outbound = V3BankAccount$Outbound;
}

export function v3BankAccountToJSON(v3BankAccount: V3BankAccount): string {
  return JSON.stringify(V3BankAccount$outboundSchema.parse(v3BankAccount));
}

export function v3BankAccountFromJSON(
  jsonString: string,
): SafeParseResult<V3BankAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3BankAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3BankAccount' from JSON`,
  );
}
