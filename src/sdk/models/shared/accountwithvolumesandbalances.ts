/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Volume, Volume$ } from "./volume";
import * as z from "zod";

export type AccountWithVolumesAndBalances = {
    address: string;
    balances?: { [k: string]: bigint } | undefined;
    metadata?: { [k: string]: any } | undefined;
    type?: string | undefined;
    volumes?: { [k: string]: Volume } | undefined;
};

/** @internal */
export namespace AccountWithVolumesAndBalances$ {
    export const inboundSchema: z.ZodType<AccountWithVolumesAndBalances, z.ZodTypeDef, unknown> =
        z.object({
            address: z.string(),
            balances: z.record(z.number().transform((v) => BigInt(v))).optional(),
            metadata: z.record(z.any()).optional(),
            type: z.string().optional(),
            volumes: z.record(Volume$.inboundSchema).optional(),
        });

    export type Outbound = {
        address: string;
        balances?: { [k: string]: number } | undefined;
        metadata?: { [k: string]: any } | undefined;
        type?: string | undefined;
        volumes?: { [k: string]: Volume$.Outbound } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountWithVolumesAndBalances> =
        z.object({
            address: z.string(),
            balances: z.record(z.bigint().transform((v) => Number(v))).optional(),
            metadata: z.record(z.any()).optional(),
            type: z.string().optional(),
            volumes: z.record(Volume$.outboundSchema).optional(),
        });
}
