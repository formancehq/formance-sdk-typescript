/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Volume, Volume$ } from "./volume";
import * as z from "zod";

export type AccountWithVolumesAndBalances = {
    address: string;
    balances?: Record<string, bigint> | undefined;
    metadata?: Record<string, any> | undefined;
    type?: string | undefined;
    volumes?: Record<string, Volume> | undefined;
};

/** @internal */
export namespace AccountWithVolumesAndBalances$ {
    export const inboundSchema: z.ZodType<AccountWithVolumesAndBalances, z.ZodTypeDef, unknown> = z
        .object({
            address: z.string(),
            balances: z.record(z.number().transform((v) => BigInt(v))).optional(),
            metadata: z.record(z.any()).optional(),
            type: z.string().optional(),
            volumes: z.record(Volume$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                address: v.address,
                ...(v.balances === undefined ? null : { balances: v.balances }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.volumes === undefined ? null : { volumes: v.volumes }),
            };
        });

    export type Outbound = {
        address: string;
        balances?: Record<string, number> | undefined;
        metadata?: Record<string, any> | undefined;
        type?: string | undefined;
        volumes?: Record<string, Volume$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountWithVolumesAndBalances> =
        z
            .object({
                address: z.string(),
                balances: z.record(z.bigint().transform((v) => Number(v))).optional(),
                metadata: z.record(z.any()).optional(),
                type: z.string().optional(),
                volumes: z.record(Volume$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    address: v.address,
                    ...(v.balances === undefined ? null : { balances: v.balances }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.volumes === undefined ? null : { volumes: v.volumes }),
                };
            });
}
