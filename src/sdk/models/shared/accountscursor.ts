/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentsAccount,
  PaymentsAccount$inboundSchema,
  PaymentsAccount$Outbound,
  PaymentsAccount$outboundSchema,
} from "./paymentsaccount.js";

export type AccountsCursorCursor = {
  data: Array<PaymentsAccount>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/**
 * OK
 */
export type AccountsCursor = {
  cursor: AccountsCursorCursor;
};

/** @internal */
export const AccountsCursorCursor$inboundSchema: z.ZodType<
  AccountsCursorCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(PaymentsAccount$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type AccountsCursorCursor$Outbound = {
  data: Array<PaymentsAccount$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const AccountsCursorCursor$outboundSchema: z.ZodType<
  AccountsCursorCursor$Outbound,
  z.ZodTypeDef,
  AccountsCursorCursor
> = z.object({
  data: z.array(PaymentsAccount$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsCursorCursor$ {
  /** @deprecated use `AccountsCursorCursor$inboundSchema` instead. */
  export const inboundSchema = AccountsCursorCursor$inboundSchema;
  /** @deprecated use `AccountsCursorCursor$outboundSchema` instead. */
  export const outboundSchema = AccountsCursorCursor$outboundSchema;
  /** @deprecated use `AccountsCursorCursor$Outbound` instead. */
  export type Outbound = AccountsCursorCursor$Outbound;
}

export function accountsCursorCursorToJSON(
  accountsCursorCursor: AccountsCursorCursor,
): string {
  return JSON.stringify(
    AccountsCursorCursor$outboundSchema.parse(accountsCursorCursor),
  );
}

export function accountsCursorCursorFromJSON(
  jsonString: string,
): SafeParseResult<AccountsCursorCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsCursorCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsCursorCursor' from JSON`,
  );
}

/** @internal */
export const AccountsCursor$inboundSchema: z.ZodType<
  AccountsCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => AccountsCursorCursor$inboundSchema),
});

/** @internal */
export type AccountsCursor$Outbound = {
  cursor: AccountsCursorCursor$Outbound;
};

/** @internal */
export const AccountsCursor$outboundSchema: z.ZodType<
  AccountsCursor$Outbound,
  z.ZodTypeDef,
  AccountsCursor
> = z.object({
  cursor: z.lazy(() => AccountsCursorCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsCursor$ {
  /** @deprecated use `AccountsCursor$inboundSchema` instead. */
  export const inboundSchema = AccountsCursor$inboundSchema;
  /** @deprecated use `AccountsCursor$outboundSchema` instead. */
  export const outboundSchema = AccountsCursor$outboundSchema;
  /** @deprecated use `AccountsCursor$Outbound` instead. */
  export type Outbound = AccountsCursor$Outbound;
}

export function accountsCursorToJSON(accountsCursor: AccountsCursor): string {
  return JSON.stringify(AccountsCursor$outboundSchema.parse(accountsCursor));
}

export function accountsCursorFromJSON(
  jsonString: string,
): SafeParseResult<AccountsCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsCursor' from JSON`,
  );
}
