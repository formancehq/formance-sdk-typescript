/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivityVoidHold = {
  id: string;
};

/** @internal */
export const ActivityVoidHold$inboundSchema: z.ZodType<
  ActivityVoidHold,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ActivityVoidHold$Outbound = {
  id: string;
};

/** @internal */
export const ActivityVoidHold$outboundSchema: z.ZodType<
  ActivityVoidHold$Outbound,
  z.ZodTypeDef,
  ActivityVoidHold
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityVoidHold$ {
  /** @deprecated use `ActivityVoidHold$inboundSchema` instead. */
  export const inboundSchema = ActivityVoidHold$inboundSchema;
  /** @deprecated use `ActivityVoidHold$outboundSchema` instead. */
  export const outboundSchema = ActivityVoidHold$outboundSchema;
  /** @deprecated use `ActivityVoidHold$Outbound` instead. */
  export type Outbound = ActivityVoidHold$Outbound;
}

export function activityVoidHoldToJSON(
  activityVoidHold: ActivityVoidHold,
): string {
  return JSON.stringify(
    ActivityVoidHold$outboundSchema.parse(activityVoidHold),
  );
}

export function activityVoidHoldFromJSON(
  jsonString: string,
): SafeParseResult<ActivityVoidHold, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityVoidHold$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityVoidHold' from JSON`,
  );
}
