/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModulrConfig = {
  apiKey: string;
  apiSecret: string;
  endpoint?: string | undefined;
  name: string;
  /**
   * The frequency at which the connector will try to fetch new BalanceTransaction objects from Modulr API.
   *
   * @remarks
   */
  pollingPeriod?: string | undefined;
  provider?: string | undefined;
};

/** @internal */
export const ModulrConfig$inboundSchema: z.ZodType<
  ModulrConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
  apiSecret: z.string(),
  endpoint: z.string().optional(),
  name: z.string(),
  pollingPeriod: z.string().default("120s"),
  provider: z.string().default("Modulr"),
});

/** @internal */
export type ModulrConfig$Outbound = {
  apiKey: string;
  apiSecret: string;
  endpoint?: string | undefined;
  name: string;
  pollingPeriod: string;
  provider: string;
};

/** @internal */
export const ModulrConfig$outboundSchema: z.ZodType<
  ModulrConfig$Outbound,
  z.ZodTypeDef,
  ModulrConfig
> = z.object({
  apiKey: z.string(),
  apiSecret: z.string(),
  endpoint: z.string().optional(),
  name: z.string(),
  pollingPeriod: z.string().default("120s"),
  provider: z.string().default("Modulr"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModulrConfig$ {
  /** @deprecated use `ModulrConfig$inboundSchema` instead. */
  export const inboundSchema = ModulrConfig$inboundSchema;
  /** @deprecated use `ModulrConfig$outboundSchema` instead. */
  export const outboundSchema = ModulrConfig$outboundSchema;
  /** @deprecated use `ModulrConfig$Outbound` instead. */
  export type Outbound = ModulrConfig$Outbound;
}

export function modulrConfigToJSON(modulrConfig: ModulrConfig): string {
  return JSON.stringify(ModulrConfig$outboundSchema.parse(modulrConfig));
}

export function modulrConfigFromJSON(
  jsonString: string,
): SafeParseResult<ModulrConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModulrConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModulrConfig' from JSON`,
  );
}
