/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2StageDelay = {
    duration?: string | undefined;
    until?: Date | undefined;
};

/** @internal */
export namespace V2StageDelay$ {
    export type Inbound = {
        duration?: string | undefined;
        until?: string | undefined;
    };

    export const inboundSchema: z.ZodType<V2StageDelay, z.ZodTypeDef, Inbound> = z
        .object({
            duration: z.string().optional(),
            until: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.until === undefined ? null : { until: v.until }),
            };
        });

    export type Outbound = {
        duration?: string | undefined;
        until?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2StageDelay> = z
        .object({
            duration: z.string().optional(),
            until: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.duration === undefined ? null : { duration: v.duration }),
                ...(v.until === undefined ? null : { until: v.until }),
            };
        });
}
