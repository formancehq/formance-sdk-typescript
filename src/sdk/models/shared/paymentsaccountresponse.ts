/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentsAccount,
  PaymentsAccount$inboundSchema,
  PaymentsAccount$Outbound,
  PaymentsAccount$outboundSchema,
} from "./paymentsaccount.js";

/**
 * OK
 */
export type PaymentsAccountResponse = {
  data: PaymentsAccount;
};

/** @internal */
export const PaymentsAccountResponse$inboundSchema: z.ZodType<
  PaymentsAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: PaymentsAccount$inboundSchema,
});

/** @internal */
export type PaymentsAccountResponse$Outbound = {
  data: PaymentsAccount$Outbound;
};

/** @internal */
export const PaymentsAccountResponse$outboundSchema: z.ZodType<
  PaymentsAccountResponse$Outbound,
  z.ZodTypeDef,
  PaymentsAccountResponse
> = z.object({
  data: PaymentsAccount$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsAccountResponse$ {
  /** @deprecated use `PaymentsAccountResponse$inboundSchema` instead. */
  export const inboundSchema = PaymentsAccountResponse$inboundSchema;
  /** @deprecated use `PaymentsAccountResponse$outboundSchema` instead. */
  export const outboundSchema = PaymentsAccountResponse$outboundSchema;
  /** @deprecated use `PaymentsAccountResponse$Outbound` instead. */
  export type Outbound = PaymentsAccountResponse$Outbound;
}

export function paymentsAccountResponseToJSON(
  paymentsAccountResponse: PaymentsAccountResponse,
): string {
  return JSON.stringify(
    PaymentsAccountResponse$outboundSchema.parse(paymentsAccountResponse),
  );
}

export function paymentsAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsAccountResponse' from JSON`,
  );
}
