/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum TypeT {
    NewTransaction = "NEW_TRANSACTION",
    SetMetadata = "SET_METADATA",
}

export type Log = {
    data: Record<string, any>;
    date: Date;
    hash: string;
    id: number;
    type: TypeT;
};

/** @internal */
export const TypeT$ = z.nativeEnum(TypeT);

/** @internal */
export namespace Log$ {
    export type Inbound = {
        data: Record<string, any>;
        date: string;
        hash: string;
        id: number;
        type: TypeT;
    };

    export const inboundSchema: z.ZodType<Log, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.record(z.any()),
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            hash: z.string(),
            id: z.number().int(),
            type: TypeT$,
        })
        .transform((v) => {
            return {
                data: v.data,
                date: v.date,
                hash: v.hash,
                id: v.id,
                type: v.type,
            };
        });

    export type Outbound = {
        data: Record<string, any>;
        date: string;
        hash: string;
        id: number;
        type: TypeT;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Log> = z
        .object({
            data: z.record(z.any()),
            date: z.date().transform((v) => v.toISOString()),
            hash: z.string(),
            id: z.number().int(),
            type: TypeT$,
        })
        .transform((v) => {
            return {
                data: v.data,
                date: v.date,
                hash: v.hash,
                id: v.id,
                type: v.type,
            };
        });
}
