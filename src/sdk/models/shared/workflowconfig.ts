/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowConfig = {
  name?: string | undefined;
  stages: Array<{ [k: string]: any }>;
};

/** @internal */
export const WorkflowConfig$inboundSchema: z.ZodType<
  WorkflowConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  stages: z.array(z.record(z.any())),
});

/** @internal */
export type WorkflowConfig$Outbound = {
  name?: string | undefined;
  stages: Array<{ [k: string]: any }>;
};

/** @internal */
export const WorkflowConfig$outboundSchema: z.ZodType<
  WorkflowConfig$Outbound,
  z.ZodTypeDef,
  WorkflowConfig
> = z.object({
  name: z.string().optional(),
  stages: z.array(z.record(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowConfig$ {
  /** @deprecated use `WorkflowConfig$inboundSchema` instead. */
  export const inboundSchema = WorkflowConfig$inboundSchema;
  /** @deprecated use `WorkflowConfig$outboundSchema` instead. */
  export const outboundSchema = WorkflowConfig$outboundSchema;
  /** @deprecated use `WorkflowConfig$Outbound` instead. */
  export type Outbound = WorkflowConfig$Outbound;
}

export function workflowConfigToJSON(workflowConfig: WorkflowConfig): string {
  return JSON.stringify(WorkflowConfig$outboundSchema.parse(workflowConfig));
}

export function workflowConfigFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowConfig' from JSON`,
  );
}
