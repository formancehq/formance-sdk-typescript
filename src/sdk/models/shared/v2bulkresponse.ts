/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2BulkElementResult,
  V2BulkElementResult$inboundSchema,
  V2BulkElementResult$Outbound,
  V2BulkElementResult$outboundSchema,
} from "./v2bulkelementresult.js";
import {
  V2ErrorsEnum,
  V2ErrorsEnum$inboundSchema,
  V2ErrorsEnum$outboundSchema,
} from "./v2errorsenum.js";

export type V2BulkResponse = {
  data: Array<V2BulkElementResult>;
  details?: string | undefined;
  errorCode: V2ErrorsEnum;
  errorMessage: string;
};

/** @internal */
export const V2BulkResponse$inboundSchema: z.ZodType<
  V2BulkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V2BulkElementResult$inboundSchema),
  details: z.string().optional(),
  errorCode: V2ErrorsEnum$inboundSchema,
  errorMessage: z.string(),
});

/** @internal */
export type V2BulkResponse$Outbound = {
  data: Array<V2BulkElementResult$Outbound>;
  details?: string | undefined;
  errorCode: string;
  errorMessage: string;
};

/** @internal */
export const V2BulkResponse$outboundSchema: z.ZodType<
  V2BulkResponse$Outbound,
  z.ZodTypeDef,
  V2BulkResponse
> = z.object({
  data: z.array(V2BulkElementResult$outboundSchema),
  details: z.string().optional(),
  errorCode: V2ErrorsEnum$outboundSchema,
  errorMessage: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkResponse$ {
  /** @deprecated use `V2BulkResponse$inboundSchema` instead. */
  export const inboundSchema = V2BulkResponse$inboundSchema;
  /** @deprecated use `V2BulkResponse$outboundSchema` instead. */
  export const outboundSchema = V2BulkResponse$outboundSchema;
  /** @deprecated use `V2BulkResponse$Outbound` instead. */
  export type Outbound = V2BulkResponse$Outbound;
}

export function v2BulkResponseToJSON(v2BulkResponse: V2BulkResponse): string {
  return JSON.stringify(V2BulkResponse$outboundSchema.parse(v2BulkResponse));
}

export function v2BulkResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2BulkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkResponse' from JSON`,
  );
}
