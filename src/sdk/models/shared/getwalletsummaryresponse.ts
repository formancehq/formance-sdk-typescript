/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BalanceWithAssets, BalanceWithAssets$ } from "./balancewithassets";
import { z } from "zod";

export type GetWalletSummaryResponse = {
    availableFunds: Record<string, number>;
    balances: Array<BalanceWithAssets>;
    expirableFunds: Record<string, number>;
    expiredFunds: Record<string, number>;
    holdFunds: Record<string, number>;
};

/** @internal */
export namespace GetWalletSummaryResponse$ {
    export type Inbound = {
        availableFunds: Record<string, number>;
        balances: Array<BalanceWithAssets$.Inbound>;
        expirableFunds: Record<string, number>;
        expiredFunds: Record<string, number>;
        holdFunds: Record<string, number>;
    };

    export const inboundSchema: z.ZodType<GetWalletSummaryResponse, z.ZodTypeDef, Inbound> = z
        .object({
            availableFunds: z.record(z.number().int()),
            balances: z.array(BalanceWithAssets$.inboundSchema),
            expirableFunds: z.record(z.number().int()),
            expiredFunds: z.record(z.number().int()),
            holdFunds: z.record(z.number().int()),
        })
        .transform((v) => {
            return {
                availableFunds: v.availableFunds,
                balances: v.balances,
                expirableFunds: v.expirableFunds,
                expiredFunds: v.expiredFunds,
                holdFunds: v.holdFunds,
            };
        });

    export type Outbound = {
        availableFunds: Record<string, number>;
        balances: Array<BalanceWithAssets$.Outbound>;
        expirableFunds: Record<string, number>;
        expiredFunds: Record<string, number>;
        holdFunds: Record<string, number>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWalletSummaryResponse> = z
        .object({
            availableFunds: z.record(z.number().int()),
            balances: z.array(BalanceWithAssets$.outboundSchema),
            expirableFunds: z.record(z.number().int()),
            expiredFunds: z.record(z.number().int()),
            holdFunds: z.record(z.number().int()),
        })
        .transform((v) => {
            return {
                availableFunds: v.availableFunds,
                balances: v.balances,
                expirableFunds: v.expirableFunds,
                expiredFunds: v.expiredFunds,
                holdFunds: v.holdFunds,
            };
        });
}
