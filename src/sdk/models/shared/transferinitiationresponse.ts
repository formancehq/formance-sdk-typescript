/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransferInitiation,
  TransferInitiation$inboundSchema,
  TransferInitiation$Outbound,
  TransferInitiation$outboundSchema,
} from "./transferinitiation.js";

/**
 * OK
 */
export type TransferInitiationResponse = {
  data: TransferInitiation;
};

/** @internal */
export const TransferInitiationResponse$inboundSchema: z.ZodType<
  TransferInitiationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: TransferInitiation$inboundSchema,
});

/** @internal */
export type TransferInitiationResponse$Outbound = {
  data: TransferInitiation$Outbound;
};

/** @internal */
export const TransferInitiationResponse$outboundSchema: z.ZodType<
  TransferInitiationResponse$Outbound,
  z.ZodTypeDef,
  TransferInitiationResponse
> = z.object({
  data: TransferInitiation$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInitiationResponse$ {
  /** @deprecated use `TransferInitiationResponse$inboundSchema` instead. */
  export const inboundSchema = TransferInitiationResponse$inboundSchema;
  /** @deprecated use `TransferInitiationResponse$outboundSchema` instead. */
  export const outboundSchema = TransferInitiationResponse$outboundSchema;
  /** @deprecated use `TransferInitiationResponse$Outbound` instead. */
  export type Outbound = TransferInitiationResponse$Outbound;
}

export function transferInitiationResponseToJSON(
  transferInitiationResponse: TransferInitiationResponse,
): string {
  return JSON.stringify(
    TransferInitiationResponse$outboundSchema.parse(transferInitiationResponse),
  );
}

export function transferInitiationResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransferInitiationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferInitiationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferInitiationResponse' from JSON`,
  );
}
