/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BalanceWithAssets,
  BalanceWithAssets$inboundSchema,
  BalanceWithAssets$Outbound,
  BalanceWithAssets$outboundSchema,
} from "./balancewithassets.js";

export type WalletSummary = {
  availableFunds: { [k: string]: bigint };
  balances: Array<BalanceWithAssets>;
  expirableFunds: { [k: string]: bigint };
  expiredFunds: { [k: string]: bigint };
  holdFunds: { [k: string]: bigint };
};

/** @internal */
export const WalletSummary$inboundSchema: z.ZodType<
  WalletSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  availableFunds: z.record(z.number().transform(v => BigInt(v))),
  balances: z.array(BalanceWithAssets$inboundSchema),
  expirableFunds: z.record(z.number().transform(v => BigInt(v))),
  expiredFunds: z.record(z.number().transform(v => BigInt(v))),
  holdFunds: z.record(z.number().transform(v => BigInt(v))),
});

/** @internal */
export type WalletSummary$Outbound = {
  availableFunds: { [k: string]: number };
  balances: Array<BalanceWithAssets$Outbound>;
  expirableFunds: { [k: string]: number };
  expiredFunds: { [k: string]: number };
  holdFunds: { [k: string]: number };
};

/** @internal */
export const WalletSummary$outboundSchema: z.ZodType<
  WalletSummary$Outbound,
  z.ZodTypeDef,
  WalletSummary
> = z.object({
  availableFunds: z.record(z.bigint().transform(v => Number(v))),
  balances: z.array(BalanceWithAssets$outboundSchema),
  expirableFunds: z.record(z.bigint().transform(v => Number(v))),
  expiredFunds: z.record(z.bigint().transform(v => Number(v))),
  holdFunds: z.record(z.bigint().transform(v => Number(v))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletSummary$ {
  /** @deprecated use `WalletSummary$inboundSchema` instead. */
  export const inboundSchema = WalletSummary$inboundSchema;
  /** @deprecated use `WalletSummary$outboundSchema` instead. */
  export const outboundSchema = WalletSummary$outboundSchema;
  /** @deprecated use `WalletSummary$Outbound` instead. */
  export type Outbound = WalletSummary$Outbound;
}

export function walletSummaryToJSON(walletSummary: WalletSummary): string {
  return JSON.stringify(WalletSummary$outboundSchema.parse(walletSummary));
}

export function walletSummaryFromJSON(
  jsonString: string,
): SafeParseResult<WalletSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WalletSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WalletSummary' from JSON`,
  );
}
