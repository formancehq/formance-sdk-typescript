/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2Exporter = {
  config: { [k: string]: any };
  createdAt: Date;
  driver: string;
  id: string;
};

/** @internal */
export const V2Exporter$inboundSchema: z.ZodType<
  V2Exporter,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.record(z.any()),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  driver: z.string(),
  id: z.string(),
});

/** @internal */
export type V2Exporter$Outbound = {
  config: { [k: string]: any };
  createdAt: string;
  driver: string;
  id: string;
};

/** @internal */
export const V2Exporter$outboundSchema: z.ZodType<
  V2Exporter$Outbound,
  z.ZodTypeDef,
  V2Exporter
> = z.object({
  config: z.record(z.any()),
  createdAt: z.date().transform(v => v.toISOString()),
  driver: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2Exporter$ {
  /** @deprecated use `V2Exporter$inboundSchema` instead. */
  export const inboundSchema = V2Exporter$inboundSchema;
  /** @deprecated use `V2Exporter$outboundSchema` instead. */
  export const outboundSchema = V2Exporter$outboundSchema;
  /** @deprecated use `V2Exporter$Outbound` instead. */
  export type Outbound = V2Exporter$Outbound;
}

export function v2ExporterToJSON(v2Exporter: V2Exporter): string {
  return JSON.stringify(V2Exporter$outboundSchema.parse(v2Exporter));
}

export function v2ExporterFromJSON(
  jsonString: string,
): SafeParseResult<V2Exporter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2Exporter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2Exporter' from JSON`,
  );
}
