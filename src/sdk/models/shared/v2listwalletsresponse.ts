/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2Wallet,
  V2Wallet$inboundSchema,
  V2Wallet$Outbound,
  V2Wallet$outboundSchema,
} from "./v2wallet.js";

export type V2ListWalletsResponseCursor = {
  data: Array<V2Wallet>;
  hasMore?: boolean | undefined;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V2ListWalletsResponse = {
  cursor: V2ListWalletsResponseCursor;
};

/** @internal */
export const V2ListWalletsResponseCursor$inboundSchema: z.ZodType<
  V2ListWalletsResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V2Wallet$inboundSchema),
  hasMore: z.boolean().optional(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V2ListWalletsResponseCursor$Outbound = {
  data: Array<V2Wallet$Outbound>;
  hasMore?: boolean | undefined;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V2ListWalletsResponseCursor$outboundSchema: z.ZodType<
  V2ListWalletsResponseCursor$Outbound,
  z.ZodTypeDef,
  V2ListWalletsResponseCursor
> = z.object({
  data: z.array(V2Wallet$outboundSchema),
  hasMore: z.boolean().optional(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListWalletsResponseCursor$ {
  /** @deprecated use `V2ListWalletsResponseCursor$inboundSchema` instead. */
  export const inboundSchema = V2ListWalletsResponseCursor$inboundSchema;
  /** @deprecated use `V2ListWalletsResponseCursor$outboundSchema` instead. */
  export const outboundSchema = V2ListWalletsResponseCursor$outboundSchema;
  /** @deprecated use `V2ListWalletsResponseCursor$Outbound` instead. */
  export type Outbound = V2ListWalletsResponseCursor$Outbound;
}

export function v2ListWalletsResponseCursorToJSON(
  v2ListWalletsResponseCursor: V2ListWalletsResponseCursor,
): string {
  return JSON.stringify(
    V2ListWalletsResponseCursor$outboundSchema.parse(
      v2ListWalletsResponseCursor,
    ),
  );
}

export function v2ListWalletsResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<V2ListWalletsResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListWalletsResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListWalletsResponseCursor' from JSON`,
  );
}

/** @internal */
export const V2ListWalletsResponse$inboundSchema: z.ZodType<
  V2ListWalletsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V2ListWalletsResponseCursor$inboundSchema),
});

/** @internal */
export type V2ListWalletsResponse$Outbound = {
  cursor: V2ListWalletsResponseCursor$Outbound;
};

/** @internal */
export const V2ListWalletsResponse$outboundSchema: z.ZodType<
  V2ListWalletsResponse$Outbound,
  z.ZodTypeDef,
  V2ListWalletsResponse
> = z.object({
  cursor: z.lazy(() => V2ListWalletsResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListWalletsResponse$ {
  /** @deprecated use `V2ListWalletsResponse$inboundSchema` instead. */
  export const inboundSchema = V2ListWalletsResponse$inboundSchema;
  /** @deprecated use `V2ListWalletsResponse$outboundSchema` instead. */
  export const outboundSchema = V2ListWalletsResponse$outboundSchema;
  /** @deprecated use `V2ListWalletsResponse$Outbound` instead. */
  export type Outbound = V2ListWalletsResponse$Outbound;
}

export function v2ListWalletsResponseToJSON(
  v2ListWalletsResponse: V2ListWalletsResponse,
): string {
  return JSON.stringify(
    V2ListWalletsResponse$outboundSchema.parse(v2ListWalletsResponse),
  );
}

export function v2ListWalletsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2ListWalletsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListWalletsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListWalletsResponse' from JSON`,
  );
}
