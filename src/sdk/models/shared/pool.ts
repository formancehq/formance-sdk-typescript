/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Pool = {
  accounts: Array<string>;
  id: string;
  name: string;
};

/** @internal */
export const Pool$inboundSchema: z.ZodType<Pool, z.ZodTypeDef, unknown> = z
  .object({
    accounts: z.array(z.string()),
    id: z.string(),
    name: z.string(),
  });

/** @internal */
export type Pool$Outbound = {
  accounts: Array<string>;
  id: string;
  name: string;
};

/** @internal */
export const Pool$outboundSchema: z.ZodType<Pool$Outbound, z.ZodTypeDef, Pool> =
  z.object({
    accounts: z.array(z.string()),
    id: z.string(),
    name: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pool$ {
  /** @deprecated use `Pool$inboundSchema` instead. */
  export const inboundSchema = Pool$inboundSchema;
  /** @deprecated use `Pool$outboundSchema` instead. */
  export const outboundSchema = Pool$outboundSchema;
  /** @deprecated use `Pool$Outbound` instead. */
  export type Outbound = Pool$Outbound;
}

export function poolToJSON(pool: Pool): string {
  return JSON.stringify(Pool$outboundSchema.parse(pool));
}

export function poolFromJSON(
  jsonString: string,
): SafeParseResult<Pool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pool' from JSON`,
  );
}
