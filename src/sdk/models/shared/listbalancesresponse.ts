/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Balance, Balance$ } from "./balance";
import * as z from "zod";

export type ListBalancesResponseCursor = {
    data: Array<Balance>;
    hasMore?: boolean | undefined;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type ListBalancesResponse = {
    cursor: ListBalancesResponseCursor;
};

/** @internal */
export namespace ListBalancesResponseCursor$ {
    export const inboundSchema: z.ZodType<ListBalancesResponseCursor, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(Balance$.inboundSchema),
            hasMore: z.boolean().optional(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });

    export type Outbound = {
        data: Array<Balance$.Outbound>;
        hasMore?: boolean | undefined;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListBalancesResponseCursor> =
        z.object({
            data: z.array(Balance$.outboundSchema),
            hasMore: z.boolean().optional(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });
}

/** @internal */
export namespace ListBalancesResponse$ {
    export const inboundSchema: z.ZodType<ListBalancesResponse, z.ZodTypeDef, unknown> = z.object({
        cursor: z.lazy(() => ListBalancesResponseCursor$.inboundSchema),
    });

    export type Outbound = {
        cursor: ListBalancesResponseCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListBalancesResponse> = z.object(
        {
            cursor: z.lazy(() => ListBalancesResponseCursor$.outboundSchema),
        }
    );
}
