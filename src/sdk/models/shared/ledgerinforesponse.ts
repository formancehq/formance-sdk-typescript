/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LedgerInfo,
  LedgerInfo$inboundSchema,
  LedgerInfo$Outbound,
  LedgerInfo$outboundSchema,
} from "./ledgerinfo.js";

export type LedgerInfoResponse = {
  data?: LedgerInfo | undefined;
};

/** @internal */
export const LedgerInfoResponse$inboundSchema: z.ZodType<
  LedgerInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: LedgerInfo$inboundSchema.optional(),
});

/** @internal */
export type LedgerInfoResponse$Outbound = {
  data?: LedgerInfo$Outbound | undefined;
};

/** @internal */
export const LedgerInfoResponse$outboundSchema: z.ZodType<
  LedgerInfoResponse$Outbound,
  z.ZodTypeDef,
  LedgerInfoResponse
> = z.object({
  data: LedgerInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LedgerInfoResponse$ {
  /** @deprecated use `LedgerInfoResponse$inboundSchema` instead. */
  export const inboundSchema = LedgerInfoResponse$inboundSchema;
  /** @deprecated use `LedgerInfoResponse$outboundSchema` instead. */
  export const outboundSchema = LedgerInfoResponse$outboundSchema;
  /** @deprecated use `LedgerInfoResponse$Outbound` instead. */
  export type Outbound = LedgerInfoResponse$Outbound;
}

export function ledgerInfoResponseToJSON(
  ledgerInfoResponse: LedgerInfoResponse,
): string {
  return JSON.stringify(
    LedgerInfoResponse$outboundSchema.parse(ledgerInfoResponse),
  );
}

export function ledgerInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<LedgerInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LedgerInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LedgerInfoResponse' from JSON`,
  );
}
