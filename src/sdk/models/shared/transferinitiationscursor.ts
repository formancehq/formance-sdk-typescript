/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TransferInitiation, TransferInitiation$ } from "./transferinitiation";
import * as z from "zod";

export type TransferInitiationsCursorCursor = {
    data: Array<TransferInitiation>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type TransferInitiationsCursor = {
    cursor: TransferInitiationsCursorCursor;
};

/** @internal */
export namespace TransferInitiationsCursorCursor$ {
    export type Inbound = {
        data: Array<TransferInitiation$.Inbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TransferInitiationsCursorCursor, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z.array(TransferInitiation$.inboundSchema),
                hasMore: z.boolean(),
                next: z.string().optional(),
                pageSize: z.number().int(),
                previous: z.string().optional(),
            })
            .transform((v) => {
                return {
                    data: v.data,
                    hasMore: v.hasMore,
                    ...(v.next === undefined ? null : { next: v.next }),
                    pageSize: v.pageSize,
                    ...(v.previous === undefined ? null : { previous: v.previous }),
                };
            });

    export type Outbound = {
        data: Array<TransferInitiation$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransferInitiationsCursorCursor
    > = z
        .object({
            data: z.array(TransferInitiation$.outboundSchema),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        })
        .transform((v) => {
            return {
                data: v.data,
                hasMore: v.hasMore,
                ...(v.next === undefined ? null : { next: v.next }),
                pageSize: v.pageSize,
                ...(v.previous === undefined ? null : { previous: v.previous }),
            };
        });
}

/** @internal */
export namespace TransferInitiationsCursor$ {
    export type Inbound = {
        cursor: TransferInitiationsCursorCursor$.Inbound;
    };

    export const inboundSchema: z.ZodType<TransferInitiationsCursor, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.lazy(() => TransferInitiationsCursorCursor$.inboundSchema),
        })
        .transform((v) => {
            return {
                cursor: v.cursor,
            };
        });

    export type Outbound = {
        cursor: TransferInitiationsCursorCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiationsCursor> = z
        .object({
            cursor: z.lazy(() => TransferInitiationsCursorCursor$.outboundSchema),
        })
        .transform((v) => {
            return {
                cursor: v.cursor,
            };
        });
}
