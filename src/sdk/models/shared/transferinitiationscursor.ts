/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TransferInitiation, TransferInitiation$ } from "./transferinitiation";
import * as z from "zod";

export type TransferInitiationsCursorCursor = {
    data: Array<TransferInitiation>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type TransferInitiationsCursor = {
    cursor: TransferInitiationsCursorCursor;
};

/** @internal */
export namespace TransferInitiationsCursorCursor$ {
    export const inboundSchema: z.ZodType<TransferInitiationsCursorCursor, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(TransferInitiation$.inboundSchema),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        });

    export type Outbound = {
        data: Array<TransferInitiation$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransferInitiationsCursorCursor
    > = z.object({
        data: z.array(TransferInitiation$.outboundSchema),
        hasMore: z.boolean(),
        next: z.string().optional(),
        pageSize: z.number().int(),
        previous: z.string().optional(),
    });
}

/** @internal */
export namespace TransferInitiationsCursor$ {
    export const inboundSchema: z.ZodType<TransferInitiationsCursor, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => TransferInitiationsCursorCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: TransferInitiationsCursorCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiationsCursor> =
        z.object({
            cursor: z.lazy(() => TransferInitiationsCursorCursor$.outboundSchema),
        });
}
