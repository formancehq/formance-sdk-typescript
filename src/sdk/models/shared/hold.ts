/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Subject, Subject$ } from "./subject";
import * as z from "zod";

export type Hold = {
    description: string;
    destination?: Subject | undefined;
    /**
     * The unique ID of the hold.
     */
    id: string;
    /**
     * Metadata associated with the hold.
     */
    metadata: { [k: string]: string };
    /**
     * The ID of the wallet the hold is associated with.
     */
    walletID: string;
};

/** @internal */
export namespace Hold$ {
    export const inboundSchema: z.ZodType<Hold, z.ZodTypeDef, unknown> = z.object({
        description: z.string(),
        destination: Subject$.inboundSchema.optional(),
        id: z.string(),
        metadata: z.record(z.string()),
        walletID: z.string(),
    });

    export type Outbound = {
        description: string;
        destination?: Subject$.Outbound | undefined;
        id: string;
        metadata: { [k: string]: string };
        walletID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Hold> = z.object({
        description: z.string(),
        destination: Subject$.outboundSchema.optional(),
        id: z.string(),
        metadata: z.record(z.string()),
        walletID: z.string(),
    });
}
