/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3Schedule,
  V3Schedule$inboundSchema,
  V3Schedule$Outbound,
  V3Schedule$outboundSchema,
} from "./v3schedule.js";

export type V3ConnectorSchedulesCursorResponseCursor = {
  data: Array<V3Schedule>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V3ConnectorSchedulesCursorResponse = {
  cursor: V3ConnectorSchedulesCursorResponseCursor;
};

/** @internal */
export const V3ConnectorSchedulesCursorResponseCursor$inboundSchema: z.ZodType<
  V3ConnectorSchedulesCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V3Schedule$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V3ConnectorSchedulesCursorResponseCursor$Outbound = {
  data: Array<V3Schedule$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V3ConnectorSchedulesCursorResponseCursor$outboundSchema: z.ZodType<
  V3ConnectorSchedulesCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  V3ConnectorSchedulesCursorResponseCursor
> = z.object({
  data: z.array(V3Schedule$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ConnectorSchedulesCursorResponseCursor$ {
  /** @deprecated use `V3ConnectorSchedulesCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema =
    V3ConnectorSchedulesCursorResponseCursor$inboundSchema;
  /** @deprecated use `V3ConnectorSchedulesCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema =
    V3ConnectorSchedulesCursorResponseCursor$outboundSchema;
  /** @deprecated use `V3ConnectorSchedulesCursorResponseCursor$Outbound` instead. */
  export type Outbound = V3ConnectorSchedulesCursorResponseCursor$Outbound;
}

export function v3ConnectorSchedulesCursorResponseCursorToJSON(
  v3ConnectorSchedulesCursorResponseCursor:
    V3ConnectorSchedulesCursorResponseCursor,
): string {
  return JSON.stringify(
    V3ConnectorSchedulesCursorResponseCursor$outboundSchema.parse(
      v3ConnectorSchedulesCursorResponseCursor,
    ),
  );
}

export function v3ConnectorSchedulesCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ConnectorSchedulesCursorResponseCursor,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ConnectorSchedulesCursorResponseCursor$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ConnectorSchedulesCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const V3ConnectorSchedulesCursorResponse$inboundSchema: z.ZodType<
  V3ConnectorSchedulesCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V3ConnectorSchedulesCursorResponseCursor$inboundSchema),
});

/** @internal */
export type V3ConnectorSchedulesCursorResponse$Outbound = {
  cursor: V3ConnectorSchedulesCursorResponseCursor$Outbound;
};

/** @internal */
export const V3ConnectorSchedulesCursorResponse$outboundSchema: z.ZodType<
  V3ConnectorSchedulesCursorResponse$Outbound,
  z.ZodTypeDef,
  V3ConnectorSchedulesCursorResponse
> = z.object({
  cursor: z.lazy(() => V3ConnectorSchedulesCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ConnectorSchedulesCursorResponse$ {
  /** @deprecated use `V3ConnectorSchedulesCursorResponse$inboundSchema` instead. */
  export const inboundSchema = V3ConnectorSchedulesCursorResponse$inboundSchema;
  /** @deprecated use `V3ConnectorSchedulesCursorResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ConnectorSchedulesCursorResponse$outboundSchema;
  /** @deprecated use `V3ConnectorSchedulesCursorResponse$Outbound` instead. */
  export type Outbound = V3ConnectorSchedulesCursorResponse$Outbound;
}

export function v3ConnectorSchedulesCursorResponseToJSON(
  v3ConnectorSchedulesCursorResponse: V3ConnectorSchedulesCursorResponse,
): string {
  return JSON.stringify(
    V3ConnectorSchedulesCursorResponse$outboundSchema.parse(
      v3ConnectorSchedulesCursorResponse,
    ),
  );
}

export function v3ConnectorSchedulesCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ConnectorSchedulesCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3ConnectorSchedulesCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ConnectorSchedulesCursorResponse' from JSON`,
  );
}
