/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Monetary, Monetary$ } from "./monetary";
import { StageSendDestination, StageSendDestination$ } from "./stagesenddestination";
import { StageSendSource, StageSendSource$ } from "./stagesendsource";
import * as z from "zod";

export type StageSend = {
    amount?: Monetary | undefined;
    destination?: StageSendDestination | undefined;
    metadata?: { [k: string]: string } | undefined;
    source?: StageSendSource | undefined;
    timestamp?: Date | undefined;
};

/** @internal */
export namespace StageSend$ {
    export const inboundSchema: z.ZodType<StageSend, z.ZodTypeDef, unknown> = z.object({
        amount: Monetary$.inboundSchema.optional(),
        destination: StageSendDestination$.inboundSchema.optional(),
        metadata: z.record(z.string()).optional(),
        source: StageSendSource$.inboundSchema.optional(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

    export type Outbound = {
        amount?: Monetary$.Outbound | undefined;
        destination?: StageSendDestination$.Outbound | undefined;
        metadata?: { [k: string]: string } | undefined;
        source?: StageSendSource$.Outbound | undefined;
        timestamp?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StageSend> = z.object({
        amount: Monetary$.outboundSchema.optional(),
        destination: StageSendDestination$.outboundSchema.optional(),
        metadata: z.record(z.string()).optional(),
        source: StageSendSource$.outboundSchema.optional(),
        timestamp: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    });
}
