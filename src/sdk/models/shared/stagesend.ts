/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Monetary, Monetary$ } from "./monetary";
import { StageSendDestination, StageSendDestination$ } from "./stagesenddestination";
import { StageSendSource, StageSendSource$ } from "./stagesendsource";
import * as z from "zod";

export type StageSend = {
    amount?: Monetary | undefined;
    destination?: StageSendDestination | undefined;
    metadata?: Record<string, string> | undefined;
    source?: StageSendSource | undefined;
    timestamp?: Date | undefined;
};

/** @internal */
export namespace StageSend$ {
    export type Inbound = {
        amount?: Monetary$.Inbound | undefined;
        destination?: StageSendDestination$.Inbound | undefined;
        metadata?: Record<string, string> | undefined;
        source?: StageSendSource$.Inbound | undefined;
        timestamp?: string | undefined;
    };

    export const inboundSchema: z.ZodType<StageSend, z.ZodTypeDef, Inbound> = z
        .object({
            amount: Monetary$.inboundSchema.optional(),
            destination: StageSendDestination$.inboundSchema.optional(),
            metadata: z.record(z.string()).optional(),
            source: StageSendSource$.inboundSchema.optional(),
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        amount?: Monetary$.Outbound | undefined;
        destination?: StageSendDestination$.Outbound | undefined;
        metadata?: Record<string, string> | undefined;
        source?: StageSendSource$.Outbound | undefined;
        timestamp?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StageSend> = z
        .object({
            amount: Monetary$.outboundSchema.optional(),
            destination: StageSendDestination$.outboundSchema.optional(),
            metadata: z.record(z.string()).optional(),
            source: StageSendSource$.outboundSchema.optional(),
            timestamp: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}
