/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WebhooksConfig,
  WebhooksConfig$inboundSchema,
  WebhooksConfig$Outbound,
  WebhooksConfig$outboundSchema,
} from "./webhooksconfig.js";

export type ConfigsResponseCursor = {
  data: Array<WebhooksConfig>;
  hasMore: boolean;
};

export type ConfigsResponse = {
  cursor: ConfigsResponseCursor;
};

/** @internal */
export const ConfigsResponseCursor$inboundSchema: z.ZodType<
  ConfigsResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(WebhooksConfig$inboundSchema),
  hasMore: z.boolean(),
});

/** @internal */
export type ConfigsResponseCursor$Outbound = {
  data: Array<WebhooksConfig$Outbound>;
  hasMore: boolean;
};

/** @internal */
export const ConfigsResponseCursor$outboundSchema: z.ZodType<
  ConfigsResponseCursor$Outbound,
  z.ZodTypeDef,
  ConfigsResponseCursor
> = z.object({
  data: z.array(WebhooksConfig$outboundSchema),
  hasMore: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigsResponseCursor$ {
  /** @deprecated use `ConfigsResponseCursor$inboundSchema` instead. */
  export const inboundSchema = ConfigsResponseCursor$inboundSchema;
  /** @deprecated use `ConfigsResponseCursor$outboundSchema` instead. */
  export const outboundSchema = ConfigsResponseCursor$outboundSchema;
  /** @deprecated use `ConfigsResponseCursor$Outbound` instead. */
  export type Outbound = ConfigsResponseCursor$Outbound;
}

export function configsResponseCursorToJSON(
  configsResponseCursor: ConfigsResponseCursor,
): string {
  return JSON.stringify(
    ConfigsResponseCursor$outboundSchema.parse(configsResponseCursor),
  );
}

export function configsResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<ConfigsResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigsResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigsResponseCursor' from JSON`,
  );
}

/** @internal */
export const ConfigsResponse$inboundSchema: z.ZodType<
  ConfigsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => ConfigsResponseCursor$inboundSchema),
});

/** @internal */
export type ConfigsResponse$Outbound = {
  cursor: ConfigsResponseCursor$Outbound;
};

/** @internal */
export const ConfigsResponse$outboundSchema: z.ZodType<
  ConfigsResponse$Outbound,
  z.ZodTypeDef,
  ConfigsResponse
> = z.object({
  cursor: z.lazy(() => ConfigsResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigsResponse$ {
  /** @deprecated use `ConfigsResponse$inboundSchema` instead. */
  export const inboundSchema = ConfigsResponse$inboundSchema;
  /** @deprecated use `ConfigsResponse$outboundSchema` instead. */
  export const outboundSchema = ConfigsResponse$outboundSchema;
  /** @deprecated use `ConfigsResponse$Outbound` instead. */
  export type Outbound = ConfigsResponse$Outbound;
}

export function configsResponseToJSON(
  configsResponse: ConfigsResponse,
): string {
  return JSON.stringify(ConfigsResponse$outboundSchema.parse(configsResponse));
}

export function configsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConfigsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigsResponse' from JSON`,
  );
}
