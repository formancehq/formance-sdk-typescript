/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WebhooksConfig, WebhooksConfig$ } from "./webhooksconfig";
import * as z from "zod";

export type ConfigsResponseCursor = {
    data: Array<WebhooksConfig>;
    hasMore: boolean;
};

export type ConfigsResponse = {
    cursor: ConfigsResponseCursor;
};

/** @internal */
export namespace ConfigsResponseCursor$ {
    export const inboundSchema: z.ZodType<ConfigsResponseCursor, z.ZodTypeDef, unknown> = z.object({
        data: z.array(WebhooksConfig$.inboundSchema),
        hasMore: z.boolean(),
    });

    export type Outbound = {
        data: Array<WebhooksConfig$.Outbound>;
        hasMore: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfigsResponseCursor> =
        z.object({
            data: z.array(WebhooksConfig$.outboundSchema),
            hasMore: z.boolean(),
        });
}

/** @internal */
export namespace ConfigsResponse$ {
    export const inboundSchema: z.ZodType<ConfigsResponse, z.ZodTypeDef, unknown> = z.object({
        cursor: z.lazy(() => ConfigsResponseCursor$.inboundSchema),
    });

    export type Outbound = {
        cursor: ConfigsResponseCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfigsResponse> = z.object({
        cursor: z.lazy(() => ConfigsResponseCursor$.outboundSchema),
    });
}
