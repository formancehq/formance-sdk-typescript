/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    PaymentStatus,
    PaymentStatus$inboundSchema,
    PaymentStatus$outboundSchema,
} from "./paymentstatus.js";
import * as z from "zod";

export type TaskStripeDescriptor = {
    account: string;
    main?: boolean | undefined;
    name: string;
};

export type TaskStripeState = {};

export type TaskStripe = {
    connectorID: string;
    createdAt: Date;
    descriptor: TaskStripeDescriptor;
    error?: string | undefined;
    id: string;
    state: TaskStripeState;
    status: PaymentStatus;
    updatedAt: Date;
};

/** @internal */
export const TaskStripeDescriptor$inboundSchema: z.ZodType<
    TaskStripeDescriptor,
    z.ZodTypeDef,
    unknown
> = z.object({
    account: z.string(),
    main: z.boolean().optional(),
    name: z.string(),
});

/** @internal */
export type TaskStripeDescriptor$Outbound = {
    account: string;
    main?: boolean | undefined;
    name: string;
};

/** @internal */
export const TaskStripeDescriptor$outboundSchema: z.ZodType<
    TaskStripeDescriptor$Outbound,
    z.ZodTypeDef,
    TaskStripeDescriptor
> = z.object({
    account: z.string(),
    main: z.boolean().optional(),
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskStripeDescriptor$ {
    /** @deprecated use `TaskStripeDescriptor$inboundSchema` instead. */
    export const inboundSchema = TaskStripeDescriptor$inboundSchema;
    /** @deprecated use `TaskStripeDescriptor$outboundSchema` instead. */
    export const outboundSchema = TaskStripeDescriptor$outboundSchema;
    /** @deprecated use `TaskStripeDescriptor$Outbound` instead. */
    export type Outbound = TaskStripeDescriptor$Outbound;
}

/** @internal */
export const TaskStripeState$inboundSchema: z.ZodType<TaskStripeState, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type TaskStripeState$Outbound = {};

/** @internal */
export const TaskStripeState$outboundSchema: z.ZodType<
    TaskStripeState$Outbound,
    z.ZodTypeDef,
    TaskStripeState
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskStripeState$ {
    /** @deprecated use `TaskStripeState$inboundSchema` instead. */
    export const inboundSchema = TaskStripeState$inboundSchema;
    /** @deprecated use `TaskStripeState$outboundSchema` instead. */
    export const outboundSchema = TaskStripeState$outboundSchema;
    /** @deprecated use `TaskStripeState$Outbound` instead. */
    export type Outbound = TaskStripeState$Outbound;
}

/** @internal */
export const TaskStripe$inboundSchema: z.ZodType<TaskStripe, z.ZodTypeDef, unknown> = z.object({
    connectorID: z.string(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    descriptor: z.lazy(() => TaskStripeDescriptor$inboundSchema),
    error: z.string().optional(),
    id: z.string(),
    state: z.lazy(() => TaskStripeState$inboundSchema),
    status: PaymentStatus$inboundSchema,
    updatedAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
});

/** @internal */
export type TaskStripe$Outbound = {
    connectorID: string;
    createdAt: string;
    descriptor: TaskStripeDescriptor$Outbound;
    error?: string | undefined;
    id: string;
    state: TaskStripeState$Outbound;
    status: string;
    updatedAt: string;
};

/** @internal */
export const TaskStripe$outboundSchema: z.ZodType<TaskStripe$Outbound, z.ZodTypeDef, TaskStripe> =
    z.object({
        connectorID: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        descriptor: z.lazy(() => TaskStripeDescriptor$outboundSchema),
        error: z.string().optional(),
        id: z.string(),
        state: z.lazy(() => TaskStripeState$outboundSchema),
        status: PaymentStatus$outboundSchema,
        updatedAt: z.date().transform((v) => v.toISOString()),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskStripe$ {
    /** @deprecated use `TaskStripe$inboundSchema` instead. */
    export const inboundSchema = TaskStripe$inboundSchema;
    /** @deprecated use `TaskStripe$outboundSchema` instead. */
    export const outboundSchema = TaskStripe$outboundSchema;
    /** @deprecated use `TaskStripe$Outbound` instead. */
    export type Outbound = TaskStripe$Outbound;
}
