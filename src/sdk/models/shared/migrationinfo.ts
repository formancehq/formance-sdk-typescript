/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

export const State = {
    ToDo: "TO DO",
    Done: "DONE",
} as const;
export type State = ClosedEnum<typeof State>;

export type MigrationInfo = {
    date?: Date | undefined;
    name?: string | undefined;
    state?: State | undefined;
    version?: number | undefined;
};

/** @internal */
export namespace State$ {
    export const inboundSchema = z.nativeEnum(State);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MigrationInfo$ {
    export const inboundSchema: z.ZodType<MigrationInfo, z.ZodTypeDef, unknown> = z
        .object({
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            name: z.string().optional(),
            state: State$.inboundSchema.optional(),
            version: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });

    export type Outbound = {
        date?: string | undefined;
        name?: string | undefined;
        state?: string | undefined;
        version?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MigrationInfo> = z
        .object({
            date: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            name: z.string().optional(),
            state: State$.outboundSchema.optional(),
            version: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.version === undefined ? null : { version: v.version }),
            };
        });
}
