/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum State {
  ToDo = "TO DO",
  Done = "DONE",
}

export type MigrationInfo = {
  date?: Date | undefined;
  name?: string | undefined;
  state?: State | undefined;
  version?: number | undefined;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const MigrationInfo$inboundSchema: z.ZodType<
  MigrationInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  name: z.string().optional(),
  state: State$inboundSchema.optional(),
  version: z.number().int().optional(),
});

/** @internal */
export type MigrationInfo$Outbound = {
  date?: string | undefined;
  name?: string | undefined;
  state?: string | undefined;
  version?: number | undefined;
};

/** @internal */
export const MigrationInfo$outboundSchema: z.ZodType<
  MigrationInfo$Outbound,
  z.ZodTypeDef,
  MigrationInfo
> = z.object({
  date: z.date().transform(v => v.toISOString()).optional(),
  name: z.string().optional(),
  state: State$outboundSchema.optional(),
  version: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MigrationInfo$ {
  /** @deprecated use `MigrationInfo$inboundSchema` instead. */
  export const inboundSchema = MigrationInfo$inboundSchema;
  /** @deprecated use `MigrationInfo$outboundSchema` instead. */
  export const outboundSchema = MigrationInfo$outboundSchema;
  /** @deprecated use `MigrationInfo$Outbound` instead. */
  export type Outbound = MigrationInfo$Outbound;
}

export function migrationInfoToJSON(migrationInfo: MigrationInfo): string {
  return JSON.stringify(MigrationInfo$outboundSchema.parse(migrationInfo));
}

export function migrationInfoFromJSON(
  jsonString: string,
): SafeParseResult<MigrationInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MigrationInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MigrationInfo' from JSON`,
  );
}
