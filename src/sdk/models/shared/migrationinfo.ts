/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum State {
    ToDo = "TO DO",
    Done = "DONE",
}

export type MigrationInfo = {
    date?: Date | undefined;
    name?: string | undefined;
    state?: State | undefined;
    version?: number | undefined;
};

/** @internal */
export namespace State$ {
    export const inboundSchema = z.nativeEnum(State);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MigrationInfo$ {
    export const inboundSchema: z.ZodType<MigrationInfo, z.ZodTypeDef, unknown> = z.object({
        date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        name: z.string().optional(),
        state: State$.inboundSchema.optional(),
        version: z.number().int().optional(),
    });

    export type Outbound = {
        date?: string | undefined;
        name?: string | undefined;
        state?: string | undefined;
        version?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MigrationInfo> = z.object({
        date: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        name: z.string().optional(),
        state: State$.outboundSchema.optional(),
        version: z.number().int().optional(),
    });
}
