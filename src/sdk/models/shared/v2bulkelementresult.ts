/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2Transaction,
  V2Transaction$inboundSchema,
  V2Transaction$Outbound,
  V2Transaction$outboundSchema,
} from "./v2transaction.js";

export type V2BulkElementResultErrorSchemas = {
  errorCode: string;
  errorDescription: string;
  errorDetails?: string | undefined;
  logID: number;
  responseType: string;
};

export type V2BulkElementResultDeleteMetadataSchemas = {
  logID: number;
  responseType: string;
};

export type V2BulkElementResultRevertTransactionSchemas = {
  data: V2Transaction;
  logID: number;
  responseType: string;
};

export type Schemas = {
  logID: number;
  responseType: string;
};

export type V2BulkElementResultCreateTransactionSchemas = {
  data: V2Transaction;
  logID: number;
  responseType: string;
};

export type V2BulkElementResult =
  | (Schemas & { responseType: "ADD_METADATA" })
  | (V2BulkElementResultDeleteMetadataSchemas & {
    responseType: "DELETE_METADATA";
  })
  | (V2BulkElementResultCreateTransactionSchemas & {
    responseType: "CREATE_TRANSACTION";
  })
  | (V2BulkElementResultRevertTransactionSchemas & {
    responseType: "REVERT_TRANSACTION";
  })
  | (V2BulkElementResultErrorSchemas & { responseType: "ERROR" });

/** @internal */
export const V2BulkElementResultErrorSchemas$inboundSchema: z.ZodType<
  V2BulkElementResultErrorSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: z.string(),
  errorDescription: z.string(),
  errorDetails: z.string().optional(),
  logID: z.number().int(),
  responseType: z.string(),
});

/** @internal */
export type V2BulkElementResultErrorSchemas$Outbound = {
  errorCode: string;
  errorDescription: string;
  errorDetails?: string | undefined;
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultErrorSchemas$outboundSchema: z.ZodType<
  V2BulkElementResultErrorSchemas$Outbound,
  z.ZodTypeDef,
  V2BulkElementResultErrorSchemas
> = z.object({
  errorCode: z.string(),
  errorDescription: z.string(),
  errorDetails: z.string().optional(),
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultErrorSchemas$ {
  /** @deprecated use `V2BulkElementResultErrorSchemas$inboundSchema` instead. */
  export const inboundSchema = V2BulkElementResultErrorSchemas$inboundSchema;
  /** @deprecated use `V2BulkElementResultErrorSchemas$outboundSchema` instead. */
  export const outboundSchema = V2BulkElementResultErrorSchemas$outboundSchema;
  /** @deprecated use `V2BulkElementResultErrorSchemas$Outbound` instead. */
  export type Outbound = V2BulkElementResultErrorSchemas$Outbound;
}

export function v2BulkElementResultErrorSchemasToJSON(
  v2BulkElementResultErrorSchemas: V2BulkElementResultErrorSchemas,
): string {
  return JSON.stringify(
    V2BulkElementResultErrorSchemas$outboundSchema.parse(
      v2BulkElementResultErrorSchemas,
    ),
  );
}

export function v2BulkElementResultErrorSchemasFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResultErrorSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2BulkElementResultErrorSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResultErrorSchemas' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResultDeleteMetadataSchemas$inboundSchema: z.ZodType<
  V2BulkElementResultDeleteMetadataSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  logID: z.number().int(),
  responseType: z.string(),
});

/** @internal */
export type V2BulkElementResultDeleteMetadataSchemas$Outbound = {
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultDeleteMetadataSchemas$outboundSchema: z.ZodType<
  V2BulkElementResultDeleteMetadataSchemas$Outbound,
  z.ZodTypeDef,
  V2BulkElementResultDeleteMetadataSchemas
> = z.object({
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultDeleteMetadataSchemas$ {
  /** @deprecated use `V2BulkElementResultDeleteMetadataSchemas$inboundSchema` instead. */
  export const inboundSchema =
    V2BulkElementResultDeleteMetadataSchemas$inboundSchema;
  /** @deprecated use `V2BulkElementResultDeleteMetadataSchemas$outboundSchema` instead. */
  export const outboundSchema =
    V2BulkElementResultDeleteMetadataSchemas$outboundSchema;
  /** @deprecated use `V2BulkElementResultDeleteMetadataSchemas$Outbound` instead. */
  export type Outbound = V2BulkElementResultDeleteMetadataSchemas$Outbound;
}

export function v2BulkElementResultDeleteMetadataSchemasToJSON(
  v2BulkElementResultDeleteMetadataSchemas:
    V2BulkElementResultDeleteMetadataSchemas,
): string {
  return JSON.stringify(
    V2BulkElementResultDeleteMetadataSchemas$outboundSchema.parse(
      v2BulkElementResultDeleteMetadataSchemas,
    ),
  );
}

export function v2BulkElementResultDeleteMetadataSchemasFromJSON(
  jsonString: string,
): SafeParseResult<
  V2BulkElementResultDeleteMetadataSchemas,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V2BulkElementResultDeleteMetadataSchemas$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V2BulkElementResultDeleteMetadataSchemas' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResultRevertTransactionSchemas$inboundSchema:
  z.ZodType<
    V2BulkElementResultRevertTransactionSchemas,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: V2Transaction$inboundSchema,
    logID: z.number().int(),
    responseType: z.string(),
  });

/** @internal */
export type V2BulkElementResultRevertTransactionSchemas$Outbound = {
  data: V2Transaction$Outbound;
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultRevertTransactionSchemas$outboundSchema:
  z.ZodType<
    V2BulkElementResultRevertTransactionSchemas$Outbound,
    z.ZodTypeDef,
    V2BulkElementResultRevertTransactionSchemas
  > = z.object({
    data: V2Transaction$outboundSchema,
    logID: z.number().int(),
    responseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultRevertTransactionSchemas$ {
  /** @deprecated use `V2BulkElementResultRevertTransactionSchemas$inboundSchema` instead. */
  export const inboundSchema =
    V2BulkElementResultRevertTransactionSchemas$inboundSchema;
  /** @deprecated use `V2BulkElementResultRevertTransactionSchemas$outboundSchema` instead. */
  export const outboundSchema =
    V2BulkElementResultRevertTransactionSchemas$outboundSchema;
  /** @deprecated use `V2BulkElementResultRevertTransactionSchemas$Outbound` instead. */
  export type Outbound = V2BulkElementResultRevertTransactionSchemas$Outbound;
}

export function v2BulkElementResultRevertTransactionSchemasToJSON(
  v2BulkElementResultRevertTransactionSchemas:
    V2BulkElementResultRevertTransactionSchemas,
): string {
  return JSON.stringify(
    V2BulkElementResultRevertTransactionSchemas$outboundSchema.parse(
      v2BulkElementResultRevertTransactionSchemas,
    ),
  );
}

export function v2BulkElementResultRevertTransactionSchemasFromJSON(
  jsonString: string,
): SafeParseResult<
  V2BulkElementResultRevertTransactionSchemas,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V2BulkElementResultRevertTransactionSchemas$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V2BulkElementResultRevertTransactionSchemas' from JSON`,
  );
}

/** @internal */
export const Schemas$inboundSchema: z.ZodType<Schemas, z.ZodTypeDef, unknown> =
  z.object({
    logID: z.number().int(),
    responseType: z.string(),
  });

/** @internal */
export type Schemas$Outbound = {
  logID: number;
  responseType: string;
};

/** @internal */
export const Schemas$outboundSchema: z.ZodType<
  Schemas$Outbound,
  z.ZodTypeDef,
  Schemas
> = z.object({
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schemas$ {
  /** @deprecated use `Schemas$inboundSchema` instead. */
  export const inboundSchema = Schemas$inboundSchema;
  /** @deprecated use `Schemas$outboundSchema` instead. */
  export const outboundSchema = Schemas$outboundSchema;
  /** @deprecated use `Schemas$Outbound` instead. */
  export type Outbound = Schemas$Outbound;
}

export function schemasToJSON(schemas: Schemas): string {
  return JSON.stringify(Schemas$outboundSchema.parse(schemas));
}

export function schemasFromJSON(
  jsonString: string,
): SafeParseResult<Schemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Schemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Schemas' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResultCreateTransactionSchemas$inboundSchema:
  z.ZodType<
    V2BulkElementResultCreateTransactionSchemas,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: V2Transaction$inboundSchema,
    logID: z.number().int(),
    responseType: z.string(),
  });

/** @internal */
export type V2BulkElementResultCreateTransactionSchemas$Outbound = {
  data: V2Transaction$Outbound;
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultCreateTransactionSchemas$outboundSchema:
  z.ZodType<
    V2BulkElementResultCreateTransactionSchemas$Outbound,
    z.ZodTypeDef,
    V2BulkElementResultCreateTransactionSchemas
  > = z.object({
    data: V2Transaction$outboundSchema,
    logID: z.number().int(),
    responseType: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultCreateTransactionSchemas$ {
  /** @deprecated use `V2BulkElementResultCreateTransactionSchemas$inboundSchema` instead. */
  export const inboundSchema =
    V2BulkElementResultCreateTransactionSchemas$inboundSchema;
  /** @deprecated use `V2BulkElementResultCreateTransactionSchemas$outboundSchema` instead. */
  export const outboundSchema =
    V2BulkElementResultCreateTransactionSchemas$outboundSchema;
  /** @deprecated use `V2BulkElementResultCreateTransactionSchemas$Outbound` instead. */
  export type Outbound = V2BulkElementResultCreateTransactionSchemas$Outbound;
}

export function v2BulkElementResultCreateTransactionSchemasToJSON(
  v2BulkElementResultCreateTransactionSchemas:
    V2BulkElementResultCreateTransactionSchemas,
): string {
  return JSON.stringify(
    V2BulkElementResultCreateTransactionSchemas$outboundSchema.parse(
      v2BulkElementResultCreateTransactionSchemas,
    ),
  );
}

export function v2BulkElementResultCreateTransactionSchemasFromJSON(
  jsonString: string,
): SafeParseResult<
  V2BulkElementResultCreateTransactionSchemas,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V2BulkElementResultCreateTransactionSchemas$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V2BulkElementResultCreateTransactionSchemas' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResult$inboundSchema: z.ZodType<
  V2BulkElementResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Schemas$inboundSchema).and(
    z.object({ responseType: z.literal("ADD_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultDeleteMetadataSchemas$inboundSchema).and(
    z.object({ responseType: z.literal("DELETE_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultCreateTransactionSchemas$inboundSchema).and(
    z.object({ responseType: z.literal("CREATE_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultRevertTransactionSchemas$inboundSchema).and(
    z.object({ responseType: z.literal("REVERT_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultErrorSchemas$inboundSchema).and(
    z.object({ responseType: z.literal("ERROR") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
]);

/** @internal */
export type V2BulkElementResult$Outbound =
  | (Schemas$Outbound & { responseType: "ADD_METADATA" })
  | (V2BulkElementResultDeleteMetadataSchemas$Outbound & {
    responseType: "DELETE_METADATA";
  })
  | (V2BulkElementResultCreateTransactionSchemas$Outbound & {
    responseType: "CREATE_TRANSACTION";
  })
  | (V2BulkElementResultRevertTransactionSchemas$Outbound & {
    responseType: "REVERT_TRANSACTION";
  })
  | (V2BulkElementResultErrorSchemas$Outbound & { responseType: "ERROR" });

/** @internal */
export const V2BulkElementResult$outboundSchema: z.ZodType<
  V2BulkElementResult$Outbound,
  z.ZodTypeDef,
  V2BulkElementResult
> = z.union([
  z.lazy(() => Schemas$outboundSchema).and(
    z.object({ responseType: z.literal("ADD_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultDeleteMetadataSchemas$outboundSchema).and(
    z.object({ responseType: z.literal("DELETE_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultCreateTransactionSchemas$outboundSchema).and(
    z.object({ responseType: z.literal("CREATE_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultRevertTransactionSchemas$outboundSchema).and(
    z.object({ responseType: z.literal("REVERT_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultErrorSchemas$outboundSchema).and(
    z.object({ responseType: z.literal("ERROR") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResult$ {
  /** @deprecated use `V2BulkElementResult$inboundSchema` instead. */
  export const inboundSchema = V2BulkElementResult$inboundSchema;
  /** @deprecated use `V2BulkElementResult$outboundSchema` instead. */
  export const outboundSchema = V2BulkElementResult$outboundSchema;
  /** @deprecated use `V2BulkElementResult$Outbound` instead. */
  export type Outbound = V2BulkElementResult$Outbound;
}

export function v2BulkElementResultToJSON(
  v2BulkElementResult: V2BulkElementResult,
): string {
  return JSON.stringify(
    V2BulkElementResult$outboundSchema.parse(v2BulkElementResult),
  );
}

export function v2BulkElementResultFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2BulkElementResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResult' from JSON`,
  );
}
