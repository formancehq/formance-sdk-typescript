/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2Transaction, V2Transaction$ } from "./v2transaction";
import * as z from "zod";

export type V2BulkElementResultError = {
    errorCode: string;
    errorDescription: string;
    errorDetails?: string | undefined;
    responseType: string;
};

export type V2BulkElementResultDeleteMetadata = {
    responseType: string;
};

export type V2BulkElementResultRevertTransaction = {
    data: V2Transaction;
    responseType: string;
};

export type V2BulkElementResultAddMetadata = {
    responseType: string;
};

export type V2BulkElementResultCreateTransaction = {
    data: V2Transaction;
    responseType: string;
};

export type V2BulkElementResult =
    | (V2BulkElementResultAddMetadata & { responseType: "ADD_METADATA" })
    | (V2BulkElementResultDeleteMetadata & { responseType: "DELETE_METADATA" })
    | (V2BulkElementResultCreateTransaction & { responseType: "CREATE_TRANSACTION" })
    | (V2BulkElementResultRevertTransaction & { responseType: "REVERT_TRANSACTION" })
    | (V2BulkElementResultError & { responseType: "ERROR" });

/** @internal */
export namespace V2BulkElementResultError$ {
    export const inboundSchema: z.ZodType<V2BulkElementResultError, z.ZodTypeDef, unknown> = z
        .object({
            errorCode: z.string(),
            errorDescription: z.string(),
            errorDetails: z.string().optional(),
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                errorCode: v.errorCode,
                errorDescription: v.errorDescription,
                ...(v.errorDetails === undefined ? null : { errorDetails: v.errorDetails }),
                responseType: v.responseType,
            };
        });

    export type Outbound = {
        errorCode: string;
        errorDescription: string;
        errorDetails?: string | undefined;
        responseType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2BulkElementResultError> = z
        .object({
            errorCode: z.string(),
            errorDescription: z.string(),
            errorDetails: z.string().optional(),
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                errorCode: v.errorCode,
                errorDescription: v.errorDescription,
                ...(v.errorDetails === undefined ? null : { errorDetails: v.errorDetails }),
                responseType: v.responseType,
            };
        });
}

/** @internal */
export namespace V2BulkElementResultDeleteMetadata$ {
    export const inboundSchema: z.ZodType<
        V2BulkElementResultDeleteMetadata,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                responseType: v.responseType,
            };
        });

    export type Outbound = {
        responseType: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2BulkElementResultDeleteMetadata
    > = z
        .object({
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                responseType: v.responseType,
            };
        });
}

/** @internal */
export namespace V2BulkElementResultRevertTransaction$ {
    export const inboundSchema: z.ZodType<
        V2BulkElementResultRevertTransaction,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            data: V2Transaction$.inboundSchema,
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                responseType: v.responseType,
            };
        });

    export type Outbound = {
        data: V2Transaction$.Outbound;
        responseType: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2BulkElementResultRevertTransaction
    > = z
        .object({
            data: V2Transaction$.outboundSchema,
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                responseType: v.responseType,
            };
        });
}

/** @internal */
export namespace V2BulkElementResultAddMetadata$ {
    export const inboundSchema: z.ZodType<V2BulkElementResultAddMetadata, z.ZodTypeDef, unknown> = z
        .object({
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                responseType: v.responseType,
            };
        });

    export type Outbound = {
        responseType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2BulkElementResultAddMetadata> =
        z
            .object({
                responseType: z.string(),
            })
            .transform((v) => {
                return {
                    responseType: v.responseType,
                };
            });
}

/** @internal */
export namespace V2BulkElementResultCreateTransaction$ {
    export const inboundSchema: z.ZodType<
        V2BulkElementResultCreateTransaction,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            data: V2Transaction$.inboundSchema,
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                responseType: v.responseType,
            };
        });

    export type Outbound = {
        data: V2Transaction$.Outbound;
        responseType: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2BulkElementResultCreateTransaction
    > = z
        .object({
            data: V2Transaction$.outboundSchema,
            responseType: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                responseType: v.responseType,
            };
        });
}

/** @internal */
export namespace V2BulkElementResult$ {
    export const inboundSchema: z.ZodType<V2BulkElementResult, z.ZodTypeDef, unknown> = z.union([
        z
            .lazy(() => V2BulkElementResultAddMetadata$.inboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("ADD_METADATA") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultDeleteMetadata$.inboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("DELETE_METADATA") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultCreateTransaction$.inboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("CREATE_TRANSACTION") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultRevertTransaction$.inboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("REVERT_TRANSACTION") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultError$.inboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("ERROR") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
    ]);

    export type Outbound =
        | (V2BulkElementResultAddMetadata$.Outbound & { responseType: "ADD_METADATA" })
        | (V2BulkElementResultDeleteMetadata$.Outbound & { responseType: "DELETE_METADATA" })
        | (V2BulkElementResultCreateTransaction$.Outbound & { responseType: "CREATE_TRANSACTION" })
        | (V2BulkElementResultRevertTransaction$.Outbound & { responseType: "REVERT_TRANSACTION" })
        | (V2BulkElementResultError$.Outbound & { responseType: "ERROR" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2BulkElementResult> = z.union([
        z
            .lazy(() => V2BulkElementResultAddMetadata$.outboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("ADD_METADATA") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultDeleteMetadata$.outboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("DELETE_METADATA") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultCreateTransaction$.outboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("CREATE_TRANSACTION") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultRevertTransaction$.outboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("REVERT_TRANSACTION") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
        z
            .lazy(() => V2BulkElementResultError$.outboundSchema)
            .and(
                z
                    .object({ responseType: z.literal("ERROR") })
                    .transform((v) => ({ responseType: v.responseType }))
            ),
    ]);
}
