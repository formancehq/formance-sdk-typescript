/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2Transaction,
  V2Transaction$inboundSchema,
  V2Transaction$Outbound,
  V2Transaction$outboundSchema,
} from "./v2transaction.js";

export type V2BulkElementResultError = {
  errorCode: string;
  errorDescription: string;
  errorDetails?: string | undefined;
  logID: number;
  responseType: string;
};

export type V2BulkElementResultDeleteMetadata = {
  logID: number;
  responseType: string;
};

export type V2BulkElementResultRevertTransaction = {
  data: V2Transaction;
  logID: number;
  responseType: string;
};

export type V2BulkElementResultAddMetadata = {
  logID: number;
  responseType: string;
};

export type V2BulkElementResultCreateTransaction = {
  data: V2Transaction;
  logID: number;
  responseType: string;
};

export type V2BulkElementResult =
  | (V2BulkElementResultError & { responseType: "ERROR" })
  | (V2BulkElementResultCreateTransaction & {
    responseType: "CREATE_TRANSACTION";
  })
  | (V2BulkElementResultRevertTransaction & {
    responseType: "REVERT_TRANSACTION";
  })
  | (V2BulkElementResultAddMetadata & { responseType: "ADD_METADATA" })
  | (V2BulkElementResultDeleteMetadata & { responseType: "DELETE_METADATA" });

/** @internal */
export const V2BulkElementResultError$inboundSchema: z.ZodType<
  V2BulkElementResultError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: z.string(),
  errorDescription: z.string(),
  errorDetails: z.string().optional(),
  logID: z.number().int(),
  responseType: z.string(),
});

/** @internal */
export type V2BulkElementResultError$Outbound = {
  errorCode: string;
  errorDescription: string;
  errorDetails?: string | undefined;
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultError$outboundSchema: z.ZodType<
  V2BulkElementResultError$Outbound,
  z.ZodTypeDef,
  V2BulkElementResultError
> = z.object({
  errorCode: z.string(),
  errorDescription: z.string(),
  errorDetails: z.string().optional(),
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultError$ {
  /** @deprecated use `V2BulkElementResultError$inboundSchema` instead. */
  export const inboundSchema = V2BulkElementResultError$inboundSchema;
  /** @deprecated use `V2BulkElementResultError$outboundSchema` instead. */
  export const outboundSchema = V2BulkElementResultError$outboundSchema;
  /** @deprecated use `V2BulkElementResultError$Outbound` instead. */
  export type Outbound = V2BulkElementResultError$Outbound;
}

export function v2BulkElementResultErrorToJSON(
  v2BulkElementResultError: V2BulkElementResultError,
): string {
  return JSON.stringify(
    V2BulkElementResultError$outboundSchema.parse(v2BulkElementResultError),
  );
}

export function v2BulkElementResultErrorFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResultError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2BulkElementResultError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResultError' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResultDeleteMetadata$inboundSchema: z.ZodType<
  V2BulkElementResultDeleteMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  logID: z.number().int(),
  responseType: z.string(),
});

/** @internal */
export type V2BulkElementResultDeleteMetadata$Outbound = {
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultDeleteMetadata$outboundSchema: z.ZodType<
  V2BulkElementResultDeleteMetadata$Outbound,
  z.ZodTypeDef,
  V2BulkElementResultDeleteMetadata
> = z.object({
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultDeleteMetadata$ {
  /** @deprecated use `V2BulkElementResultDeleteMetadata$inboundSchema` instead. */
  export const inboundSchema = V2BulkElementResultDeleteMetadata$inboundSchema;
  /** @deprecated use `V2BulkElementResultDeleteMetadata$outboundSchema` instead. */
  export const outboundSchema =
    V2BulkElementResultDeleteMetadata$outboundSchema;
  /** @deprecated use `V2BulkElementResultDeleteMetadata$Outbound` instead. */
  export type Outbound = V2BulkElementResultDeleteMetadata$Outbound;
}

export function v2BulkElementResultDeleteMetadataToJSON(
  v2BulkElementResultDeleteMetadata: V2BulkElementResultDeleteMetadata,
): string {
  return JSON.stringify(
    V2BulkElementResultDeleteMetadata$outboundSchema.parse(
      v2BulkElementResultDeleteMetadata,
    ),
  );
}

export function v2BulkElementResultDeleteMetadataFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResultDeleteMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2BulkElementResultDeleteMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResultDeleteMetadata' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResultRevertTransaction$inboundSchema: z.ZodType<
  V2BulkElementResultRevertTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: V2Transaction$inboundSchema,
  logID: z.number().int(),
  responseType: z.string(),
});

/** @internal */
export type V2BulkElementResultRevertTransaction$Outbound = {
  data: V2Transaction$Outbound;
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultRevertTransaction$outboundSchema: z.ZodType<
  V2BulkElementResultRevertTransaction$Outbound,
  z.ZodTypeDef,
  V2BulkElementResultRevertTransaction
> = z.object({
  data: V2Transaction$outboundSchema,
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultRevertTransaction$ {
  /** @deprecated use `V2BulkElementResultRevertTransaction$inboundSchema` instead. */
  export const inboundSchema =
    V2BulkElementResultRevertTransaction$inboundSchema;
  /** @deprecated use `V2BulkElementResultRevertTransaction$outboundSchema` instead. */
  export const outboundSchema =
    V2BulkElementResultRevertTransaction$outboundSchema;
  /** @deprecated use `V2BulkElementResultRevertTransaction$Outbound` instead. */
  export type Outbound = V2BulkElementResultRevertTransaction$Outbound;
}

export function v2BulkElementResultRevertTransactionToJSON(
  v2BulkElementResultRevertTransaction: V2BulkElementResultRevertTransaction,
): string {
  return JSON.stringify(
    V2BulkElementResultRevertTransaction$outboundSchema.parse(
      v2BulkElementResultRevertTransaction,
    ),
  );
}

export function v2BulkElementResultRevertTransactionFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResultRevertTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2BulkElementResultRevertTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResultRevertTransaction' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResultAddMetadata$inboundSchema: z.ZodType<
  V2BulkElementResultAddMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  logID: z.number().int(),
  responseType: z.string(),
});

/** @internal */
export type V2BulkElementResultAddMetadata$Outbound = {
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultAddMetadata$outboundSchema: z.ZodType<
  V2BulkElementResultAddMetadata$Outbound,
  z.ZodTypeDef,
  V2BulkElementResultAddMetadata
> = z.object({
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultAddMetadata$ {
  /** @deprecated use `V2BulkElementResultAddMetadata$inboundSchema` instead. */
  export const inboundSchema = V2BulkElementResultAddMetadata$inboundSchema;
  /** @deprecated use `V2BulkElementResultAddMetadata$outboundSchema` instead. */
  export const outboundSchema = V2BulkElementResultAddMetadata$outboundSchema;
  /** @deprecated use `V2BulkElementResultAddMetadata$Outbound` instead. */
  export type Outbound = V2BulkElementResultAddMetadata$Outbound;
}

export function v2BulkElementResultAddMetadataToJSON(
  v2BulkElementResultAddMetadata: V2BulkElementResultAddMetadata,
): string {
  return JSON.stringify(
    V2BulkElementResultAddMetadata$outboundSchema.parse(
      v2BulkElementResultAddMetadata,
    ),
  );
}

export function v2BulkElementResultAddMetadataFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResultAddMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2BulkElementResultAddMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResultAddMetadata' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResultCreateTransaction$inboundSchema: z.ZodType<
  V2BulkElementResultCreateTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: V2Transaction$inboundSchema,
  logID: z.number().int(),
  responseType: z.string(),
});

/** @internal */
export type V2BulkElementResultCreateTransaction$Outbound = {
  data: V2Transaction$Outbound;
  logID: number;
  responseType: string;
};

/** @internal */
export const V2BulkElementResultCreateTransaction$outboundSchema: z.ZodType<
  V2BulkElementResultCreateTransaction$Outbound,
  z.ZodTypeDef,
  V2BulkElementResultCreateTransaction
> = z.object({
  data: V2Transaction$outboundSchema,
  logID: z.number().int(),
  responseType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResultCreateTransaction$ {
  /** @deprecated use `V2BulkElementResultCreateTransaction$inboundSchema` instead. */
  export const inboundSchema =
    V2BulkElementResultCreateTransaction$inboundSchema;
  /** @deprecated use `V2BulkElementResultCreateTransaction$outboundSchema` instead. */
  export const outboundSchema =
    V2BulkElementResultCreateTransaction$outboundSchema;
  /** @deprecated use `V2BulkElementResultCreateTransaction$Outbound` instead. */
  export type Outbound = V2BulkElementResultCreateTransaction$Outbound;
}

export function v2BulkElementResultCreateTransactionToJSON(
  v2BulkElementResultCreateTransaction: V2BulkElementResultCreateTransaction,
): string {
  return JSON.stringify(
    V2BulkElementResultCreateTransaction$outboundSchema.parse(
      v2BulkElementResultCreateTransaction,
    ),
  );
}

export function v2BulkElementResultCreateTransactionFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResultCreateTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2BulkElementResultCreateTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResultCreateTransaction' from JSON`,
  );
}

/** @internal */
export const V2BulkElementResult$inboundSchema: z.ZodType<
  V2BulkElementResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => V2BulkElementResultError$inboundSchema).and(
    z.object({ responseType: z.literal("ERROR") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultCreateTransaction$inboundSchema).and(
    z.object({ responseType: z.literal("CREATE_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultRevertTransaction$inboundSchema).and(
    z.object({ responseType: z.literal("REVERT_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultAddMetadata$inboundSchema).and(
    z.object({ responseType: z.literal("ADD_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultDeleteMetadata$inboundSchema).and(
    z.object({ responseType: z.literal("DELETE_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
]);

/** @internal */
export type V2BulkElementResult$Outbound =
  | (V2BulkElementResultError$Outbound & { responseType: "ERROR" })
  | (V2BulkElementResultCreateTransaction$Outbound & {
    responseType: "CREATE_TRANSACTION";
  })
  | (V2BulkElementResultRevertTransaction$Outbound & {
    responseType: "REVERT_TRANSACTION";
  })
  | (V2BulkElementResultAddMetadata$Outbound & { responseType: "ADD_METADATA" })
  | (V2BulkElementResultDeleteMetadata$Outbound & {
    responseType: "DELETE_METADATA";
  });

/** @internal */
export const V2BulkElementResult$outboundSchema: z.ZodType<
  V2BulkElementResult$Outbound,
  z.ZodTypeDef,
  V2BulkElementResult
> = z.union([
  z.lazy(() => V2BulkElementResultError$outboundSchema).and(
    z.object({ responseType: z.literal("ERROR") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultCreateTransaction$outboundSchema).and(
    z.object({ responseType: z.literal("CREATE_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultRevertTransaction$outboundSchema).and(
    z.object({ responseType: z.literal("REVERT_TRANSACTION") }).transform((
      v,
    ) => ({ responseType: v.responseType })),
  ),
  z.lazy(() => V2BulkElementResultAddMetadata$outboundSchema).and(
    z.object({ responseType: z.literal("ADD_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
  z.lazy(() => V2BulkElementResultDeleteMetadata$outboundSchema).and(
    z.object({ responseType: z.literal("DELETE_METADATA") }).transform((v) => ({
      responseType: v.responseType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2BulkElementResult$ {
  /** @deprecated use `V2BulkElementResult$inboundSchema` instead. */
  export const inboundSchema = V2BulkElementResult$inboundSchema;
  /** @deprecated use `V2BulkElementResult$outboundSchema` instead. */
  export const outboundSchema = V2BulkElementResult$outboundSchema;
  /** @deprecated use `V2BulkElementResult$Outbound` instead. */
  export type Outbound = V2BulkElementResult$Outbound;
}

export function v2BulkElementResultToJSON(
  v2BulkElementResult: V2BulkElementResult,
): string {
  return JSON.stringify(
    V2BulkElementResult$outboundSchema.parse(v2BulkElementResult),
  );
}

export function v2BulkElementResultFromJSON(
  jsonString: string,
): SafeParseResult<V2BulkElementResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2BulkElementResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2BulkElementResult' from JSON`,
  );
}
