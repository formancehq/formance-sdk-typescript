/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Server information
 */
export type PaymentsServerInfo = {
  debug?: boolean | undefined;
  version?: string | undefined;
};

/** @internal */
export const PaymentsServerInfo$inboundSchema: z.ZodType<
  PaymentsServerInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  debug: z.boolean().optional(),
  version: z.string().optional(),
});

/** @internal */
export type PaymentsServerInfo$Outbound = {
  debug?: boolean | undefined;
  version?: string | undefined;
};

/** @internal */
export const PaymentsServerInfo$outboundSchema: z.ZodType<
  PaymentsServerInfo$Outbound,
  z.ZodTypeDef,
  PaymentsServerInfo
> = z.object({
  debug: z.boolean().optional(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsServerInfo$ {
  /** @deprecated use `PaymentsServerInfo$inboundSchema` instead. */
  export const inboundSchema = PaymentsServerInfo$inboundSchema;
  /** @deprecated use `PaymentsServerInfo$outboundSchema` instead. */
  export const outboundSchema = PaymentsServerInfo$outboundSchema;
  /** @deprecated use `PaymentsServerInfo$Outbound` instead. */
  export type Outbound = PaymentsServerInfo$Outbound;
}

export function paymentsServerInfoToJSON(
  paymentsServerInfo: PaymentsServerInfo,
): string {
  return JSON.stringify(
    PaymentsServerInfo$outboundSchema.parse(paymentsServerInfo),
  );
}

export function paymentsServerInfoFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsServerInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsServerInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsServerInfo' from JSON`,
  );
}
