/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PoolBalance = {
  amount: bigint;
  asset: string;
};

/** @internal */
export const PoolBalance$inboundSchema: z.ZodType<
  PoolBalance,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().transform(v => BigInt(v)),
  asset: z.string(),
});

/** @internal */
export type PoolBalance$Outbound = {
  amount: number;
  asset: string;
};

/** @internal */
export const PoolBalance$outboundSchema: z.ZodType<
  PoolBalance$Outbound,
  z.ZodTypeDef,
  PoolBalance
> = z.object({
  amount: z.bigint().transform(v => Number(v)),
  asset: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PoolBalance$ {
  /** @deprecated use `PoolBalance$inboundSchema` instead. */
  export const inboundSchema = PoolBalance$inboundSchema;
  /** @deprecated use `PoolBalance$outboundSchema` instead. */
  export const outboundSchema = PoolBalance$outboundSchema;
  /** @deprecated use `PoolBalance$Outbound` instead. */
  export type Outbound = PoolBalance$Outbound;
}

export function poolBalanceToJSON(poolBalance: PoolBalance): string {
  return JSON.stringify(PoolBalance$outboundSchema.parse(poolBalance));
}

export function poolBalanceFromJSON(
  jsonString: string,
): SafeParseResult<PoolBalance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PoolBalance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PoolBalance' from JSON`,
  );
}
