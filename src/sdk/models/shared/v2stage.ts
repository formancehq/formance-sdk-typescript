/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2StageDelay,
  V2StageDelay$inboundSchema,
  V2StageDelay$Outbound,
  V2StageDelay$outboundSchema,
} from "./v2stagedelay.js";
import {
  V2StageSend,
  V2StageSend$inboundSchema,
  V2StageSend$Outbound,
  V2StageSend$outboundSchema,
} from "./v2stagesend.js";
import {
  V2StageWaitEvent,
  V2StageWaitEvent$inboundSchema,
  V2StageWaitEvent$Outbound,
  V2StageWaitEvent$outboundSchema,
} from "./v2stagewaitevent.js";
import {
  V2Update,
  V2Update$inboundSchema,
  V2Update$Outbound,
  V2Update$outboundSchema,
} from "./v2update.js";

export type V2Stage = V2StageWaitEvent | V2StageSend | V2StageDelay | V2Update;

/** @internal */
export const V2Stage$inboundSchema: z.ZodType<V2Stage, z.ZodTypeDef, unknown> =
  z.union([
    V2StageWaitEvent$inboundSchema,
    V2StageSend$inboundSchema,
    V2StageDelay$inboundSchema,
    V2Update$inboundSchema,
  ]);

/** @internal */
export type V2Stage$Outbound =
  | V2StageWaitEvent$Outbound
  | V2StageSend$Outbound
  | V2StageDelay$Outbound
  | V2Update$Outbound;

/** @internal */
export const V2Stage$outboundSchema: z.ZodType<
  V2Stage$Outbound,
  z.ZodTypeDef,
  V2Stage
> = z.union([
  V2StageWaitEvent$outboundSchema,
  V2StageSend$outboundSchema,
  V2StageDelay$outboundSchema,
  V2Update$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2Stage$ {
  /** @deprecated use `V2Stage$inboundSchema` instead. */
  export const inboundSchema = V2Stage$inboundSchema;
  /** @deprecated use `V2Stage$outboundSchema` instead. */
  export const outboundSchema = V2Stage$outboundSchema;
  /** @deprecated use `V2Stage$Outbound` instead. */
  export type Outbound = V2Stage$Outbound;
}

export function v2StageToJSON(v2Stage: V2Stage): string {
  return JSON.stringify(V2Stage$outboundSchema.parse(v2Stage));
}

export function v2StageFromJSON(
  jsonString: string,
): SafeParseResult<V2Stage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2Stage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2Stage' from JSON`,
  );
}
