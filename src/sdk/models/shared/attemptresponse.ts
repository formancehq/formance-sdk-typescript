/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Attempt,
  Attempt$inboundSchema,
  Attempt$Outbound,
  Attempt$outboundSchema,
} from "./attempt.js";

export type AttemptResponse = {
  data: Attempt;
};

/** @internal */
export const AttemptResponse$inboundSchema: z.ZodType<
  AttemptResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: Attempt$inboundSchema,
});

/** @internal */
export type AttemptResponse$Outbound = {
  data: Attempt$Outbound;
};

/** @internal */
export const AttemptResponse$outboundSchema: z.ZodType<
  AttemptResponse$Outbound,
  z.ZodTypeDef,
  AttemptResponse
> = z.object({
  data: Attempt$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptResponse$ {
  /** @deprecated use `AttemptResponse$inboundSchema` instead. */
  export const inboundSchema = AttemptResponse$inboundSchema;
  /** @deprecated use `AttemptResponse$outboundSchema` instead. */
  export const outboundSchema = AttemptResponse$outboundSchema;
  /** @deprecated use `AttemptResponse$Outbound` instead. */
  export type Outbound = AttemptResponse$Outbound;
}

export function attemptResponseToJSON(
  attemptResponse: AttemptResponse,
): string {
  return JSON.stringify(AttemptResponse$outboundSchema.parse(attemptResponse));
}

export function attemptResponseFromJSON(
  jsonString: string,
): SafeParseResult<AttemptResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptResponse' from JSON`,
  );
}
