/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Pool,
  Pool$inboundSchema,
  Pool$Outbound,
  Pool$outboundSchema,
} from "./pool.js";

/**
 * OK
 */
export type PoolResponse = {
  data: Pool;
};

/** @internal */
export const PoolResponse$inboundSchema: z.ZodType<
  PoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: Pool$inboundSchema,
});

/** @internal */
export type PoolResponse$Outbound = {
  data: Pool$Outbound;
};

/** @internal */
export const PoolResponse$outboundSchema: z.ZodType<
  PoolResponse$Outbound,
  z.ZodTypeDef,
  PoolResponse
> = z.object({
  data: Pool$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PoolResponse$ {
  /** @deprecated use `PoolResponse$inboundSchema` instead. */
  export const inboundSchema = PoolResponse$inboundSchema;
  /** @deprecated use `PoolResponse$outboundSchema` instead. */
  export const outboundSchema = PoolResponse$outboundSchema;
  /** @deprecated use `PoolResponse$Outbound` instead. */
  export type Outbound = PoolResponse$Outbound;
}

export function poolResponseToJSON(poolResponse: PoolResponse): string {
  return JSON.stringify(PoolResponse$outboundSchema.parse(poolResponse));
}

export function poolResponseFromJSON(
  jsonString: string,
): SafeParseResult<PoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PoolResponse' from JSON`,
  );
}
