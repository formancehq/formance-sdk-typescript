/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type WebhooksConfig = {
    active: boolean;
    createdAt: Date;
    endpoint: string;
    eventTypes: Array<string>;
    id: string;
    secret: string;
    updatedAt: Date;
};

/** @internal */
export namespace WebhooksConfig$ {
    export const inboundSchema: z.ZodType<WebhooksConfig, z.ZodTypeDef, unknown> = z.object({
        active: z.boolean(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        endpoint: z.string(),
        eventTypes: z.array(z.string()),
        id: z.string(),
        secret: z.string(),
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        active: boolean;
        createdAt: string;
        endpoint: string;
        eventTypes: Array<string>;
        id: string;
        secret: string;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhooksConfig> = z.object({
        active: z.boolean(),
        createdAt: z.date().transform((v) => v.toISOString()),
        endpoint: z.string(),
        eventTypes: z.array(z.string()),
        id: z.string(),
        secret: z.string(),
        updatedAt: z.date().transform((v) => v.toISOString()),
    });
}
