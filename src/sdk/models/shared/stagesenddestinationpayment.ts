/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StageSendDestinationPayment = {
  psp: string;
};

/** @internal */
export const StageSendDestinationPayment$inboundSchema: z.ZodType<
  StageSendDestinationPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  psp: z.string(),
});

/** @internal */
export type StageSendDestinationPayment$Outbound = {
  psp: string;
};

/** @internal */
export const StageSendDestinationPayment$outboundSchema: z.ZodType<
  StageSendDestinationPayment$Outbound,
  z.ZodTypeDef,
  StageSendDestinationPayment
> = z.object({
  psp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageSendDestinationPayment$ {
  /** @deprecated use `StageSendDestinationPayment$inboundSchema` instead. */
  export const inboundSchema = StageSendDestinationPayment$inboundSchema;
  /** @deprecated use `StageSendDestinationPayment$outboundSchema` instead. */
  export const outboundSchema = StageSendDestinationPayment$outboundSchema;
  /** @deprecated use `StageSendDestinationPayment$Outbound` instead. */
  export type Outbound = StageSendDestinationPayment$Outbound;
}

export function stageSendDestinationPaymentToJSON(
  stageSendDestinationPayment: StageSendDestinationPayment,
): string {
  return JSON.stringify(
    StageSendDestinationPayment$outboundSchema.parse(
      stageSendDestinationPayment,
    ),
  );
}

export function stageSendDestinationPaymentFromJSON(
  jsonString: string,
): SafeParseResult<StageSendDestinationPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageSendDestinationPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageSendDestinationPayment' from JSON`,
  );
}
