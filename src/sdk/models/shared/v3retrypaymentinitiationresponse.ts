/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3RetryPaymentInitiationResponseData = {
  /**
   * Since this call is asynchronous, the response will contain the ID of the task that was created to retry the payment initiation to the PSP. You can use the task API to check the status of the task and get the resulting payment ID.
   *
   * @remarks
   */
  taskID: string;
};

export type V3RetryPaymentInitiationResponse = {
  data: V3RetryPaymentInitiationResponseData;
};

/** @internal */
export const V3RetryPaymentInitiationResponseData$inboundSchema: z.ZodType<
  V3RetryPaymentInitiationResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  taskID: z.string(),
});

/** @internal */
export type V3RetryPaymentInitiationResponseData$Outbound = {
  taskID: string;
};

/** @internal */
export const V3RetryPaymentInitiationResponseData$outboundSchema: z.ZodType<
  V3RetryPaymentInitiationResponseData$Outbound,
  z.ZodTypeDef,
  V3RetryPaymentInitiationResponseData
> = z.object({
  taskID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3RetryPaymentInitiationResponseData$ {
  /** @deprecated use `V3RetryPaymentInitiationResponseData$inboundSchema` instead. */
  export const inboundSchema =
    V3RetryPaymentInitiationResponseData$inboundSchema;
  /** @deprecated use `V3RetryPaymentInitiationResponseData$outboundSchema` instead. */
  export const outboundSchema =
    V3RetryPaymentInitiationResponseData$outboundSchema;
  /** @deprecated use `V3RetryPaymentInitiationResponseData$Outbound` instead. */
  export type Outbound = V3RetryPaymentInitiationResponseData$Outbound;
}

export function v3RetryPaymentInitiationResponseDataToJSON(
  v3RetryPaymentInitiationResponseData: V3RetryPaymentInitiationResponseData,
): string {
  return JSON.stringify(
    V3RetryPaymentInitiationResponseData$outboundSchema.parse(
      v3RetryPaymentInitiationResponseData,
    ),
  );
}

export function v3RetryPaymentInitiationResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<V3RetryPaymentInitiationResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3RetryPaymentInitiationResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3RetryPaymentInitiationResponseData' from JSON`,
  );
}

/** @internal */
export const V3RetryPaymentInitiationResponse$inboundSchema: z.ZodType<
  V3RetryPaymentInitiationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => V3RetryPaymentInitiationResponseData$inboundSchema),
});

/** @internal */
export type V3RetryPaymentInitiationResponse$Outbound = {
  data: V3RetryPaymentInitiationResponseData$Outbound;
};

/** @internal */
export const V3RetryPaymentInitiationResponse$outboundSchema: z.ZodType<
  V3RetryPaymentInitiationResponse$Outbound,
  z.ZodTypeDef,
  V3RetryPaymentInitiationResponse
> = z.object({
  data: z.lazy(() => V3RetryPaymentInitiationResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3RetryPaymentInitiationResponse$ {
  /** @deprecated use `V3RetryPaymentInitiationResponse$inboundSchema` instead. */
  export const inboundSchema = V3RetryPaymentInitiationResponse$inboundSchema;
  /** @deprecated use `V3RetryPaymentInitiationResponse$outboundSchema` instead. */
  export const outboundSchema = V3RetryPaymentInitiationResponse$outboundSchema;
  /** @deprecated use `V3RetryPaymentInitiationResponse$Outbound` instead. */
  export type Outbound = V3RetryPaymentInitiationResponse$Outbound;
}

export function v3RetryPaymentInitiationResponseToJSON(
  v3RetryPaymentInitiationResponse: V3RetryPaymentInitiationResponse,
): string {
  return JSON.stringify(
    V3RetryPaymentInitiationResponse$outboundSchema.parse(
      v3RetryPaymentInitiationResponse,
    ),
  );
}

export function v3RetryPaymentInitiationResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3RetryPaymentInitiationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3RetryPaymentInitiationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3RetryPaymentInitiationResponse' from JSON`,
  );
}
