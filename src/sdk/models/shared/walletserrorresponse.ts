/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum WalletsErrorResponseErrorCode {
    Validation = "VALIDATION",
    InternalError = "INTERNAL_ERROR",
    InsufficientFund = "INSUFFICIENT_FUND",
    HoldClosed = "HOLD_CLOSED",
}

export type WalletsErrorResponse = {
    errorCode: WalletsErrorResponseErrorCode;
    errorMessage: string;
};

/** @internal */
export const WalletsErrorResponseErrorCode$ = z.nativeEnum(WalletsErrorResponseErrorCode);

/** @internal */
export namespace WalletsErrorResponse$ {
    export type Inbound = {
        errorCode: WalletsErrorResponseErrorCode;
        errorMessage: string;
    };

    export const inboundSchema: z.ZodType<WalletsErrorResponse, z.ZodTypeDef, Inbound> = z
        .object({
            errorCode: WalletsErrorResponseErrorCode$,
            errorMessage: z.string(),
        })
        .transform((v) => {
            return {
                errorCode: v.errorCode,
                errorMessage: v.errorMessage,
            };
        });

    export type Outbound = {
        errorCode: WalletsErrorResponseErrorCode;
        errorMessage: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WalletsErrorResponse> = z
        .object({
            errorCode: WalletsErrorResponseErrorCode$,
            errorMessage: z.string(),
        })
        .transform((v) => {
            return {
                errorCode: v.errorCode,
                errorMessage: v.errorMessage,
            };
        });
}
