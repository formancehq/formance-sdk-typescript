/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Transaction,
  Transaction$inboundSchema,
  Transaction$Outbound,
  Transaction$outboundSchema,
} from "./transaction.js";

export type TransactionResponse = {
  data: Transaction;
};

/** @internal */
export const TransactionResponse$inboundSchema: z.ZodType<
  TransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: Transaction$inboundSchema,
});

/** @internal */
export type TransactionResponse$Outbound = {
  data: Transaction$Outbound;
};

/** @internal */
export const TransactionResponse$outboundSchema: z.ZodType<
  TransactionResponse$Outbound,
  z.ZodTypeDef,
  TransactionResponse
> = z.object({
  data: Transaction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponse$ {
  /** @deprecated use `TransactionResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionResponse$inboundSchema;
  /** @deprecated use `TransactionResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionResponse$outboundSchema;
  /** @deprecated use `TransactionResponse$Outbound` instead. */
  export type Outbound = TransactionResponse$Outbound;
}

export function transactionResponseToJSON(
  transactionResponse: TransactionResponse,
): string {
  return JSON.stringify(
    TransactionResponse$outboundSchema.parse(transactionResponse),
  );
}

export function transactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponse' from JSON`,
  );
}
