/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ConfirmHoldRequest = {
    /**
     * Define the amount to transfer.
     */
    amount?: bigint | undefined;
    /**
     * Define a final confirmation. Remaining funds will be returned to the wallet.
     */
    final?: boolean | undefined;
};

/** @internal */
export namespace ConfirmHoldRequest$ {
    export type Inbound = {
        amount?: number | undefined;
        final?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<ConfirmHoldRequest, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            final: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.final === undefined ? null : { final: v.final }),
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        final?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfirmHoldRequest> = z
        .object({
            amount: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            final: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.final === undefined ? null : { final: v.final }),
            };
        });
}
