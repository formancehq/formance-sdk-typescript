/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3AdyenConfig,
  V3AdyenConfig$inboundSchema,
  V3AdyenConfig$Outbound,
  V3AdyenConfig$outboundSchema,
} from "./v3adyenconfig.js";
import {
  V3AtlarConfig,
  V3AtlarConfig$inboundSchema,
  V3AtlarConfig$Outbound,
  V3AtlarConfig$outboundSchema,
} from "./v3atlarconfig.js";
import {
  V3BankingcircleConfig,
  V3BankingcircleConfig$inboundSchema,
  V3BankingcircleConfig$Outbound,
  V3BankingcircleConfig$outboundSchema,
} from "./v3bankingcircleconfig.js";
import {
  V3CurrencycloudConfig,
  V3CurrencycloudConfig$inboundSchema,
  V3CurrencycloudConfig$Outbound,
  V3CurrencycloudConfig$outboundSchema,
} from "./v3currencycloudconfig.js";
import {
  V3DummypayConfig,
  V3DummypayConfig$inboundSchema,
  V3DummypayConfig$Outbound,
  V3DummypayConfig$outboundSchema,
} from "./v3dummypayconfig.js";
import {
  V3GenericConfig,
  V3GenericConfig$inboundSchema,
  V3GenericConfig$Outbound,
  V3GenericConfig$outboundSchema,
} from "./v3genericconfig.js";
import {
  V3MangopayConfig,
  V3MangopayConfig$inboundSchema,
  V3MangopayConfig$Outbound,
  V3MangopayConfig$outboundSchema,
} from "./v3mangopayconfig.js";
import {
  V3ModulrConfig,
  V3ModulrConfig$inboundSchema,
  V3ModulrConfig$Outbound,
  V3ModulrConfig$outboundSchema,
} from "./v3modulrconfig.js";
import {
  V3MoneycorpConfig,
  V3MoneycorpConfig$inboundSchema,
  V3MoneycorpConfig$Outbound,
  V3MoneycorpConfig$outboundSchema,
} from "./v3moneycorpconfig.js";
import {
  V3StripeConfig,
  V3StripeConfig$inboundSchema,
  V3StripeConfig$Outbound,
  V3StripeConfig$outboundSchema,
} from "./v3stripeconfig.js";
import {
  V3WiseConfig,
  V3WiseConfig$inboundSchema,
  V3WiseConfig$Outbound,
  V3WiseConfig$outboundSchema,
} from "./v3wiseconfig.js";

export type V3InstallConnectorRequest =
  | V3DummypayConfig
  | V3StripeConfig
  | V3GenericConfig
  | V3WiseConfig
  | V3AtlarConfig
  | V3CurrencycloudConfig
  | V3MangopayConfig
  | V3ModulrConfig
  | V3MoneycorpConfig
  | V3AdyenConfig
  | V3BankingcircleConfig;

/** @internal */
export const V3InstallConnectorRequest$inboundSchema: z.ZodType<
  V3InstallConnectorRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  V3DummypayConfig$inboundSchema,
  V3StripeConfig$inboundSchema,
  V3GenericConfig$inboundSchema,
  V3WiseConfig$inboundSchema,
  V3AtlarConfig$inboundSchema,
  V3CurrencycloudConfig$inboundSchema,
  V3MangopayConfig$inboundSchema,
  V3ModulrConfig$inboundSchema,
  V3MoneycorpConfig$inboundSchema,
  V3AdyenConfig$inboundSchema,
  V3BankingcircleConfig$inboundSchema,
]);

/** @internal */
export type V3InstallConnectorRequest$Outbound =
  | V3DummypayConfig$Outbound
  | V3StripeConfig$Outbound
  | V3GenericConfig$Outbound
  | V3WiseConfig$Outbound
  | V3AtlarConfig$Outbound
  | V3CurrencycloudConfig$Outbound
  | V3MangopayConfig$Outbound
  | V3ModulrConfig$Outbound
  | V3MoneycorpConfig$Outbound
  | V3AdyenConfig$Outbound
  | V3BankingcircleConfig$Outbound;

/** @internal */
export const V3InstallConnectorRequest$outboundSchema: z.ZodType<
  V3InstallConnectorRequest$Outbound,
  z.ZodTypeDef,
  V3InstallConnectorRequest
> = z.union([
  V3DummypayConfig$outboundSchema,
  V3StripeConfig$outboundSchema,
  V3GenericConfig$outboundSchema,
  V3WiseConfig$outboundSchema,
  V3AtlarConfig$outboundSchema,
  V3CurrencycloudConfig$outboundSchema,
  V3MangopayConfig$outboundSchema,
  V3ModulrConfig$outboundSchema,
  V3MoneycorpConfig$outboundSchema,
  V3AdyenConfig$outboundSchema,
  V3BankingcircleConfig$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3InstallConnectorRequest$ {
  /** @deprecated use `V3InstallConnectorRequest$inboundSchema` instead. */
  export const inboundSchema = V3InstallConnectorRequest$inboundSchema;
  /** @deprecated use `V3InstallConnectorRequest$outboundSchema` instead. */
  export const outboundSchema = V3InstallConnectorRequest$outboundSchema;
  /** @deprecated use `V3InstallConnectorRequest$Outbound` instead. */
  export type Outbound = V3InstallConnectorRequest$Outbound;
}

export function v3InstallConnectorRequestToJSON(
  v3InstallConnectorRequest: V3InstallConnectorRequest,
): string {
  return JSON.stringify(
    V3InstallConnectorRequest$outboundSchema.parse(v3InstallConnectorRequest),
  );
}

export function v3InstallConnectorRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3InstallConnectorRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3InstallConnectorRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3InstallConnectorRequest' from JSON`,
  );
}
