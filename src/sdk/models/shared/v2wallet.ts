/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type V2Wallet = {
    createdAt: Date;
    /**
     * The unique ID of the wallet.
     */
    id: string;
    ledger: string;
    /**
     * Metadata associated with the wallet.
     */
    metadata: Record<string, string>;
    name: string;
};

/** @internal */
export namespace V2Wallet$ {
    export type Inbound = {
        createdAt: string;
        id: string;
        ledger: string;
        metadata: Record<string, string>;
        name: string;
    };

    export const inboundSchema: z.ZodType<V2Wallet, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            ledger: z.string(),
            metadata: z.record(z.string()),
            name: z.string(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                id: v.id,
                ledger: v.ledger,
                metadata: v.metadata,
                name: v.name,
            };
        });

    export type Outbound = {
        createdAt: string;
        id: string;
        ledger: string;
        metadata: Record<string, string>;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2Wallet> = z
        .object({
            createdAt: z.date().transform((v) => v.toISOString()),
            id: z.string(),
            ledger: z.string(),
            metadata: z.record(z.string()),
            name: z.string(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                id: v.id,
                ledger: v.ledger,
                metadata: v.metadata,
                name: v.name,
            };
        });
}
