/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectorResponseData = {
  connectorID: string;
};

/**
 * OK
 */
export type ConnectorResponse = {
  data: ConnectorResponseData;
};

/** @internal */
export const ConnectorResponseData$inboundSchema: z.ZodType<
  ConnectorResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorID: z.string(),
});

/** @internal */
export type ConnectorResponseData$Outbound = {
  connectorID: string;
};

/** @internal */
export const ConnectorResponseData$outboundSchema: z.ZodType<
  ConnectorResponseData$Outbound,
  z.ZodTypeDef,
  ConnectorResponseData
> = z.object({
  connectorID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorResponseData$ {
  /** @deprecated use `ConnectorResponseData$inboundSchema` instead. */
  export const inboundSchema = ConnectorResponseData$inboundSchema;
  /** @deprecated use `ConnectorResponseData$outboundSchema` instead. */
  export const outboundSchema = ConnectorResponseData$outboundSchema;
  /** @deprecated use `ConnectorResponseData$Outbound` instead. */
  export type Outbound = ConnectorResponseData$Outbound;
}

export function connectorResponseDataToJSON(
  connectorResponseData: ConnectorResponseData,
): string {
  return JSON.stringify(
    ConnectorResponseData$outboundSchema.parse(connectorResponseData),
  );
}

export function connectorResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorResponseData' from JSON`,
  );
}

/** @internal */
export const ConnectorResponse$inboundSchema: z.ZodType<
  ConnectorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ConnectorResponseData$inboundSchema),
});

/** @internal */
export type ConnectorResponse$Outbound = {
  data: ConnectorResponseData$Outbound;
};

/** @internal */
export const ConnectorResponse$outboundSchema: z.ZodType<
  ConnectorResponse$Outbound,
  z.ZodTypeDef,
  ConnectorResponse
> = z.object({
  data: z.lazy(() => ConnectorResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorResponse$ {
  /** @deprecated use `ConnectorResponse$inboundSchema` instead. */
  export const inboundSchema = ConnectorResponse$inboundSchema;
  /** @deprecated use `ConnectorResponse$outboundSchema` instead. */
  export const outboundSchema = ConnectorResponse$outboundSchema;
  /** @deprecated use `ConnectorResponse$Outbound` instead. */
  export type Outbound = ConnectorResponse$Outbound;
}

export function connectorResponseToJSON(
  connectorResponse: ConnectorResponse,
): string {
  return JSON.stringify(
    ConnectorResponse$outboundSchema.parse(connectorResponse),
  );
}

export function connectorResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorResponse' from JSON`,
  );
}
