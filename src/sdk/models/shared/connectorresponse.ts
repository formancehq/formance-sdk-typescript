/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Data = {
    connectorID: string;
};

export type ConnectorResponse = {
    data: Data;
};

/** @internal */
export namespace Data$ {
    export type Inbound = {
        connectorID: string;
    };

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z
        .object({
            connectorID: z.string(),
        })
        .transform((v) => {
            return {
                connectorID: v.connectorID,
            };
        });

    export type Outbound = {
        connectorID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z
        .object({
            connectorID: z.string(),
        })
        .transform((v) => {
            return {
                connectorID: v.connectorID,
            };
        });
}

/** @internal */
export namespace ConnectorResponse$ {
    export type Inbound = {
        data: Data$.Inbound;
    };

    export const inboundSchema: z.ZodType<ConnectorResponse, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => Data$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: Data$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorResponse> = z
        .object({
            data: z.lazy(() => Data$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
