/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSecretRequest = {
  metadata?: { [k: string]: any } | undefined;
  name: string;
};

/** @internal */
export const CreateSecretRequest$inboundSchema: z.ZodType<
  CreateSecretRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.any()).optional(),
  name: z.string(),
});

/** @internal */
export type CreateSecretRequest$Outbound = {
  metadata?: { [k: string]: any } | undefined;
  name: string;
};

/** @internal */
export const CreateSecretRequest$outboundSchema: z.ZodType<
  CreateSecretRequest$Outbound,
  z.ZodTypeDef,
  CreateSecretRequest
> = z.object({
  metadata: z.record(z.any()).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretRequest$ {
  /** @deprecated use `CreateSecretRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSecretRequest$inboundSchema;
  /** @deprecated use `CreateSecretRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSecretRequest$outboundSchema;
  /** @deprecated use `CreateSecretRequest$Outbound` instead. */
  export type Outbound = CreateSecretRequest$Outbound;
}

export function createSecretRequestToJSON(
  createSecretRequest: CreateSecretRequest,
): string {
  return JSON.stringify(
    CreateSecretRequest$outboundSchema.parse(createSecretRequest),
  );
}

export function createSecretRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSecretRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSecretRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSecretRequest' from JSON`,
  );
}
