/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CreateSecretRequest = {
    metadata?: Record<string, any> | undefined;
    name: string;
};

/** @internal */
export namespace CreateSecretRequest$ {
    export type Inbound = {
        metadata?: Record<string, any> | undefined;
        name: string;
    };

    export const inboundSchema: z.ZodType<CreateSecretRequest, z.ZodTypeDef, Inbound> = z
        .object({
            metadata: z.record(z.any()).optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                name: v.name,
            };
        });

    export type Outbound = {
        metadata?: Record<string, any> | undefined;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSecretRequest> = z
        .object({
            metadata: z.record(z.any()).optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                name: v.name,
            };
        });
}
