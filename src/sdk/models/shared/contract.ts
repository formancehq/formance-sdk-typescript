/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Expr = {};

export type Contract = {
    account?: string | undefined;
    expr: Expr;
};

/** @internal */
export namespace Expr$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Expr, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Expr> = z.object({});
}

/** @internal */
export namespace Contract$ {
    export type Inbound = {
        account?: string | undefined;
        expr: Expr$.Inbound;
    };

    export const inboundSchema: z.ZodType<Contract, z.ZodTypeDef, Inbound> = z
        .object({
            account: z.string().optional(),
            expr: z.lazy(() => Expr$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.account === undefined ? null : { account: v.account }),
                expr: v.expr,
            };
        });

    export type Outbound = {
        account?: string | undefined;
        expr: Expr$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Contract> = z
        .object({
            account: z.string().optional(),
            expr: z.lazy(() => Expr$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.account === undefined ? null : { account: v.account }),
                expr: v.expr,
            };
        });
}
