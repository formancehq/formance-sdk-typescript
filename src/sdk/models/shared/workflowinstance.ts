/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    StageStatus,
    StageStatus$inboundSchema,
    StageStatus$Outbound,
    StageStatus$outboundSchema,
} from "./stagestatus.js";
import * as z from "zod";

export type WorkflowInstance = {
    createdAt: Date;
    error?: string | undefined;
    id: string;
    status?: Array<StageStatus> | undefined;
    terminated: boolean;
    terminatedAt?: Date | undefined;
    updatedAt: Date;
    workflowID: string;
};

/** @internal */
export const WorkflowInstance$inboundSchema: z.ZodType<WorkflowInstance, z.ZodTypeDef, unknown> =
    z.object({
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        error: z.string().optional(),
        id: z.string(),
        status: z.array(StageStatus$inboundSchema).optional(),
        terminated: z.boolean(),
        terminatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        workflowID: z.string(),
    });

/** @internal */
export type WorkflowInstance$Outbound = {
    createdAt: string;
    error?: string | undefined;
    id: string;
    status?: Array<StageStatus$Outbound> | undefined;
    terminated: boolean;
    terminatedAt?: string | undefined;
    updatedAt: string;
    workflowID: string;
};

/** @internal */
export const WorkflowInstance$outboundSchema: z.ZodType<
    WorkflowInstance$Outbound,
    z.ZodTypeDef,
    WorkflowInstance
> = z.object({
    createdAt: z.date().transform((v) => v.toISOString()),
    error: z.string().optional(),
    id: z.string(),
    status: z.array(StageStatus$outboundSchema).optional(),
    terminated: z.boolean(),
    terminatedAt: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
    updatedAt: z.date().transform((v) => v.toISOString()),
    workflowID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowInstance$ {
    /** @deprecated use `WorkflowInstance$inboundSchema` instead. */
    export const inboundSchema = WorkflowInstance$inboundSchema;
    /** @deprecated use `WorkflowInstance$outboundSchema` instead. */
    export const outboundSchema = WorkflowInstance$outboundSchema;
    /** @deprecated use `WorkflowInstance$Outbound` instead. */
    export type Outbound = WorkflowInstance$Outbound;
}
