/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2Transaction,
  V2Transaction$inboundSchema,
  V2Transaction$Outbound,
  V2Transaction$outboundSchema,
} from "./v2transaction.js";

export type V2TransactionsCursorResponseCursor = {
  data: Array<V2Transaction>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V2TransactionsCursorResponse = {
  cursor: V2TransactionsCursorResponseCursor;
};

/** @internal */
export const V2TransactionsCursorResponseCursor$inboundSchema: z.ZodType<
  V2TransactionsCursorResponseCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(V2Transaction$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V2TransactionsCursorResponseCursor$Outbound = {
  data: Array<V2Transaction$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V2TransactionsCursorResponseCursor$outboundSchema: z.ZodType<
  V2TransactionsCursorResponseCursor$Outbound,
  z.ZodTypeDef,
  V2TransactionsCursorResponseCursor
> = z.object({
  data: z.array(V2Transaction$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2TransactionsCursorResponseCursor$ {
  /** @deprecated use `V2TransactionsCursorResponseCursor$inboundSchema` instead. */
  export const inboundSchema = V2TransactionsCursorResponseCursor$inboundSchema;
  /** @deprecated use `V2TransactionsCursorResponseCursor$outboundSchema` instead. */
  export const outboundSchema =
    V2TransactionsCursorResponseCursor$outboundSchema;
  /** @deprecated use `V2TransactionsCursorResponseCursor$Outbound` instead. */
  export type Outbound = V2TransactionsCursorResponseCursor$Outbound;
}

export function v2TransactionsCursorResponseCursorToJSON(
  v2TransactionsCursorResponseCursor: V2TransactionsCursorResponseCursor,
): string {
  return JSON.stringify(
    V2TransactionsCursorResponseCursor$outboundSchema.parse(
      v2TransactionsCursorResponseCursor,
    ),
  );
}

export function v2TransactionsCursorResponseCursorFromJSON(
  jsonString: string,
): SafeParseResult<V2TransactionsCursorResponseCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V2TransactionsCursorResponseCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2TransactionsCursorResponseCursor' from JSON`,
  );
}

/** @internal */
export const V2TransactionsCursorResponse$inboundSchema: z.ZodType<
  V2TransactionsCursorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V2TransactionsCursorResponseCursor$inboundSchema),
});

/** @internal */
export type V2TransactionsCursorResponse$Outbound = {
  cursor: V2TransactionsCursorResponseCursor$Outbound;
};

/** @internal */
export const V2TransactionsCursorResponse$outboundSchema: z.ZodType<
  V2TransactionsCursorResponse$Outbound,
  z.ZodTypeDef,
  V2TransactionsCursorResponse
> = z.object({
  cursor: z.lazy(() => V2TransactionsCursorResponseCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2TransactionsCursorResponse$ {
  /** @deprecated use `V2TransactionsCursorResponse$inboundSchema` instead. */
  export const inboundSchema = V2TransactionsCursorResponse$inboundSchema;
  /** @deprecated use `V2TransactionsCursorResponse$outboundSchema` instead. */
  export const outboundSchema = V2TransactionsCursorResponse$outboundSchema;
  /** @deprecated use `V2TransactionsCursorResponse$Outbound` instead. */
  export type Outbound = V2TransactionsCursorResponse$Outbound;
}

export function v2TransactionsCursorResponseToJSON(
  v2TransactionsCursorResponse: V2TransactionsCursorResponse,
): string {
  return JSON.stringify(
    V2TransactionsCursorResponse$outboundSchema.parse(
      v2TransactionsCursorResponse,
    ),
  );
}

export function v2TransactionsCursorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2TransactionsCursorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2TransactionsCursorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2TransactionsCursorResponse' from JSON`,
  );
}
