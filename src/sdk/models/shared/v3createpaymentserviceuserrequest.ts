/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3AddressRequest,
  V3AddressRequest$inboundSchema,
  V3AddressRequest$Outbound,
  V3AddressRequest$outboundSchema,
} from "./v3addressrequest.js";
import {
  V3ContactDetailsRequest,
  V3ContactDetailsRequest$inboundSchema,
  V3ContactDetailsRequest$Outbound,
  V3ContactDetailsRequest$outboundSchema,
} from "./v3contactdetailsrequest.js";

export type V3CreatePaymentServiceUserRequest = {
  address?: V3AddressRequest | undefined;
  bankAccountIDs?: Array<string> | null | undefined;
  contactDetails?: V3ContactDetailsRequest | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
};

/** @internal */
export const V3CreatePaymentServiceUserRequest$inboundSchema: z.ZodType<
  V3CreatePaymentServiceUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: V3AddressRequest$inboundSchema.optional(),
  bankAccountIDs: z.nullable(z.array(z.string())).optional(),
  contactDetails: V3ContactDetailsRequest$inboundSchema.optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
});

/** @internal */
export type V3CreatePaymentServiceUserRequest$Outbound = {
  address?: V3AddressRequest$Outbound | undefined;
  bankAccountIDs?: Array<string> | null | undefined;
  contactDetails?: V3ContactDetailsRequest$Outbound | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  name: string;
};

/** @internal */
export const V3CreatePaymentServiceUserRequest$outboundSchema: z.ZodType<
  V3CreatePaymentServiceUserRequest$Outbound,
  z.ZodTypeDef,
  V3CreatePaymentServiceUserRequest
> = z.object({
  address: V3AddressRequest$outboundSchema.optional(),
  bankAccountIDs: z.nullable(z.array(z.string())).optional(),
  contactDetails: V3ContactDetailsRequest$outboundSchema.optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CreatePaymentServiceUserRequest$ {
  /** @deprecated use `V3CreatePaymentServiceUserRequest$inboundSchema` instead. */
  export const inboundSchema = V3CreatePaymentServiceUserRequest$inboundSchema;
  /** @deprecated use `V3CreatePaymentServiceUserRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3CreatePaymentServiceUserRequest$outboundSchema;
  /** @deprecated use `V3CreatePaymentServiceUserRequest$Outbound` instead. */
  export type Outbound = V3CreatePaymentServiceUserRequest$Outbound;
}

export function v3CreatePaymentServiceUserRequestToJSON(
  v3CreatePaymentServiceUserRequest: V3CreatePaymentServiceUserRequest,
): string {
  return JSON.stringify(
    V3CreatePaymentServiceUserRequest$outboundSchema.parse(
      v3CreatePaymentServiceUserRequest,
    ),
  );
}

export function v3CreatePaymentServiceUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3CreatePaymentServiceUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CreatePaymentServiceUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CreatePaymentServiceUserRequest' from JSON`,
  );
}
