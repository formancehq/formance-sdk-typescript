/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V2Volume,
  V2Volume$inboundSchema,
  V2Volume$Outbound,
  V2Volume$outboundSchema,
} from "./v2volume.js";

export type V2Account = {
  address: string;
  effectiveVolumes?: { [k: string]: V2Volume } | undefined;
  firstUsage?: Date | undefined;
  insertionDate?: Date | undefined;
  metadata: { [k: string]: string };
  updatedAt?: Date | undefined;
  volumes?: { [k: string]: V2Volume } | undefined;
};

/** @internal */
export const V2Account$inboundSchema: z.ZodType<
  V2Account,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  effectiveVolumes: z.record(V2Volume$inboundSchema).optional(),
  firstUsage: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  insertionDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.record(z.string()),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  volumes: z.record(V2Volume$inboundSchema).optional(),
});

/** @internal */
export type V2Account$Outbound = {
  address: string;
  effectiveVolumes?: { [k: string]: V2Volume$Outbound } | undefined;
  firstUsage?: string | undefined;
  insertionDate?: string | undefined;
  metadata: { [k: string]: string };
  updatedAt?: string | undefined;
  volumes?: { [k: string]: V2Volume$Outbound } | undefined;
};

/** @internal */
export const V2Account$outboundSchema: z.ZodType<
  V2Account$Outbound,
  z.ZodTypeDef,
  V2Account
> = z.object({
  address: z.string(),
  effectiveVolumes: z.record(V2Volume$outboundSchema).optional(),
  firstUsage: z.date().transform(v => v.toISOString()).optional(),
  insertionDate: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.record(z.string()),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  volumes: z.record(V2Volume$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2Account$ {
  /** @deprecated use `V2Account$inboundSchema` instead. */
  export const inboundSchema = V2Account$inboundSchema;
  /** @deprecated use `V2Account$outboundSchema` instead. */
  export const outboundSchema = V2Account$outboundSchema;
  /** @deprecated use `V2Account$Outbound` instead. */
  export type Outbound = V2Account$Outbound;
}

export function v2AccountToJSON(v2Account: V2Account): string {
  return JSON.stringify(V2Account$outboundSchema.parse(v2Account));
}

export function v2AccountFromJSON(
  jsonString: string,
): SafeParseResult<V2Account, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2Account$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2Account' from JSON`,
  );
}
