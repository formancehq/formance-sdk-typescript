/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LedgerStorage = {
  driver: string;
  ledgers: Array<string>;
};

/** @internal */
export const LedgerStorage$inboundSchema: z.ZodType<
  LedgerStorage,
  z.ZodTypeDef,
  unknown
> = z.object({
  driver: z.string(),
  ledgers: z.array(z.string()),
});

/** @internal */
export type LedgerStorage$Outbound = {
  driver: string;
  ledgers: Array<string>;
};

/** @internal */
export const LedgerStorage$outboundSchema: z.ZodType<
  LedgerStorage$Outbound,
  z.ZodTypeDef,
  LedgerStorage
> = z.object({
  driver: z.string(),
  ledgers: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LedgerStorage$ {
  /** @deprecated use `LedgerStorage$inboundSchema` instead. */
  export const inboundSchema = LedgerStorage$inboundSchema;
  /** @deprecated use `LedgerStorage$outboundSchema` instead. */
  export const outboundSchema = LedgerStorage$outboundSchema;
  /** @deprecated use `LedgerStorage$Outbound` instead. */
  export type Outbound = LedgerStorage$Outbound;
}

export function ledgerStorageToJSON(ledgerStorage: LedgerStorage): string {
  return JSON.stringify(LedgerStorage$outboundSchema.parse(ledgerStorage));
}

export function ledgerStorageFromJSON(
  jsonString: string,
): SafeParseResult<LedgerStorage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LedgerStorage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LedgerStorage' from JSON`,
  );
}
