/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    TransferInitiationAdjusments,
    TransferInitiationAdjusments$,
} from "./transferinitiationadjusments";
import {
    TransferInitiationPayments,
    TransferInitiationPayments$,
} from "./transferinitiationpayments";
import { TransferInitiationStatus, TransferInitiationStatus$ } from "./transferinitiationstatus";
import * as z from "zod";

export enum TransferInitiationType {
    Transfer = "TRANSFER",
    Payout = "PAYOUT",
}

export type TransferInitiation = {
    amount: bigint;
    asset: string;
    connectorID: string;
    createdAt: Date;
    description: string;
    destinationAccountID: string;
    error: string;
    id: string;
    initialAmount: bigint;
    metadata?: Record<string, string> | null | undefined;
    reference: string;
    relatedAdjustments?: Array<TransferInitiationAdjusments> | undefined;
    relatedPayments?: Array<TransferInitiationPayments> | undefined;
    scheduledAt: Date;
    sourceAccountID: string;
    status: TransferInitiationStatus;
    type: TransferInitiationType;
};

/** @internal */
export const TransferInitiationType$: z.ZodNativeEnum<typeof TransferInitiationType> =
    z.nativeEnum(TransferInitiationType);

/** @internal */
export namespace TransferInitiation$ {
    export type Inbound = {
        amount: number;
        asset: string;
        connectorID: string;
        createdAt: string;
        description: string;
        destinationAccountID: string;
        error: string;
        id: string;
        initialAmount: number;
        metadata?: Record<string, string> | null | undefined;
        reference: string;
        relatedAdjustments?: Array<TransferInitiationAdjusments$.Inbound> | undefined;
        relatedPayments?: Array<TransferInitiationPayments$.Inbound> | undefined;
        scheduledAt: string;
        sourceAccountID: string;
        status: TransferInitiationStatus;
        type: TransferInitiationType;
    };

    export const inboundSchema: z.ZodType<TransferInitiation, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().transform((v) => BigInt(v)),
            asset: z.string(),
            connectorID: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            description: z.string(),
            destinationAccountID: z.string(),
            error: z.string(),
            id: z.string(),
            initialAmount: z.number().transform((v) => BigInt(v)),
            metadata: z.nullable(z.record(z.string())).optional(),
            reference: z.string(),
            relatedAdjustments: z.array(TransferInitiationAdjusments$.inboundSchema).optional(),
            relatedPayments: z.array(TransferInitiationPayments$.inboundSchema).optional(),
            scheduledAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            sourceAccountID: z.string(),
            status: TransferInitiationStatus$,
            type: TransferInitiationType$,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                asset: v.asset,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                description: v.description,
                destinationAccountID: v.destinationAccountID,
                error: v.error,
                id: v.id,
                initialAmount: v.initialAmount,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                reference: v.reference,
                ...(v.relatedAdjustments === undefined
                    ? null
                    : { relatedAdjustments: v.relatedAdjustments }),
                ...(v.relatedPayments === undefined
                    ? null
                    : { relatedPayments: v.relatedPayments }),
                scheduledAt: v.scheduledAt,
                sourceAccountID: v.sourceAccountID,
                status: v.status,
                type: v.type,
            };
        });

    export type Outbound = {
        amount: number;
        asset: string;
        connectorID: string;
        createdAt: string;
        description: string;
        destinationAccountID: string;
        error: string;
        id: string;
        initialAmount: number;
        metadata?: Record<string, string> | null | undefined;
        reference: string;
        relatedAdjustments?: Array<TransferInitiationAdjusments$.Outbound> | undefined;
        relatedPayments?: Array<TransferInitiationPayments$.Outbound> | undefined;
        scheduledAt: string;
        sourceAccountID: string;
        status: TransferInitiationStatus;
        type: TransferInitiationType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiation> = z
        .object({
            amount: z.bigint().transform((v) => Number(v)),
            asset: z.string(),
            connectorID: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            description: z.string(),
            destinationAccountID: z.string(),
            error: z.string(),
            id: z.string(),
            initialAmount: z.bigint().transform((v) => Number(v)),
            metadata: z.nullable(z.record(z.string())).optional(),
            reference: z.string(),
            relatedAdjustments: z.array(TransferInitiationAdjusments$.outboundSchema).optional(),
            relatedPayments: z.array(TransferInitiationPayments$.outboundSchema).optional(),
            scheduledAt: z.date().transform((v) => v.toISOString()),
            sourceAccountID: z.string(),
            status: TransferInitiationStatus$,
            type: TransferInitiationType$,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                asset: v.asset,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                description: v.description,
                destinationAccountID: v.destinationAccountID,
                error: v.error,
                id: v.id,
                initialAmount: v.initialAmount,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                reference: v.reference,
                ...(v.relatedAdjustments === undefined
                    ? null
                    : { relatedAdjustments: v.relatedAdjustments }),
                ...(v.relatedPayments === undefined
                    ? null
                    : { relatedPayments: v.relatedPayments }),
                scheduledAt: v.scheduledAt,
                sourceAccountID: v.sourceAccountID,
                status: v.status,
                type: v.type,
            };
        });
}
