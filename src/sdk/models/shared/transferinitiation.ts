/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    TransferInitiationAdjusments,
    TransferInitiationAdjusments$,
} from "./transferinitiationadjusments";
import {
    TransferInitiationPayments,
    TransferInitiationPayments$,
} from "./transferinitiationpayments";
import { TransferInitiationStatus, TransferInitiationStatus$ } from "./transferinitiationstatus";
import * as z from "zod";

export enum TransferInitiationType {
    Transfer = "TRANSFER",
    Payout = "PAYOUT",
}

export type TransferInitiation = {
    amount: bigint;
    asset: string;
    connectorID: string;
    createdAt: Date;
    description: string;
    destinationAccountID: string;
    error: string;
    id: string;
    initialAmount: bigint;
    metadata?: { [k: string]: string } | null | undefined;
    reference: string;
    relatedAdjustments?: Array<TransferInitiationAdjusments> | undefined;
    relatedPayments?: Array<TransferInitiationPayments> | undefined;
    scheduledAt: Date;
    sourceAccountID: string;
    status: TransferInitiationStatus;
    type: TransferInitiationType;
};

/** @internal */
export namespace TransferInitiationType$ {
    export const inboundSchema = z.nativeEnum(TransferInitiationType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransferInitiation$ {
    export const inboundSchema: z.ZodType<TransferInitiation, z.ZodTypeDef, unknown> = z.object({
        amount: z.number().transform((v) => BigInt(v)),
        asset: z.string(),
        connectorID: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        description: z.string(),
        destinationAccountID: z.string(),
        error: z.string(),
        id: z.string(),
        initialAmount: z.number().transform((v) => BigInt(v)),
        metadata: z.nullable(z.record(z.string())).optional(),
        reference: z.string(),
        relatedAdjustments: z.array(TransferInitiationAdjusments$.inboundSchema).optional(),
        relatedPayments: z.array(TransferInitiationPayments$.inboundSchema).optional(),
        scheduledAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        sourceAccountID: z.string(),
        status: TransferInitiationStatus$.inboundSchema,
        type: TransferInitiationType$.inboundSchema,
    });

    export type Outbound = {
        amount: number;
        asset: string;
        connectorID: string;
        createdAt: string;
        description: string;
        destinationAccountID: string;
        error: string;
        id: string;
        initialAmount: number;
        metadata?: { [k: string]: string } | null | undefined;
        reference: string;
        relatedAdjustments?: Array<TransferInitiationAdjusments$.Outbound> | undefined;
        relatedPayments?: Array<TransferInitiationPayments$.Outbound> | undefined;
        scheduledAt: string;
        sourceAccountID: string;
        status: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiation> = z.object({
        amount: z.bigint().transform((v) => Number(v)),
        asset: z.string(),
        connectorID: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        description: z.string(),
        destinationAccountID: z.string(),
        error: z.string(),
        id: z.string(),
        initialAmount: z.bigint().transform((v) => Number(v)),
        metadata: z.nullable(z.record(z.string())).optional(),
        reference: z.string(),
        relatedAdjustments: z.array(TransferInitiationAdjusments$.outboundSchema).optional(),
        relatedPayments: z.array(TransferInitiationPayments$.outboundSchema).optional(),
        scheduledAt: z.date().transform((v) => v.toISOString()),
        sourceAccountID: z.string(),
        status: TransferInitiationStatus$.outboundSchema,
        type: TransferInitiationType$.outboundSchema,
    });
}
