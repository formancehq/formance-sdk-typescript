/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Wallet = {
    createdAt: Date;
    /**
     * The unique ID of the wallet.
     */
    id: string;
    ledger: string;
    /**
     * Metadata associated with the wallet.
     */
    metadata: { [k: string]: string };
    name: string;
};

/** @internal */
export namespace Wallet$ {
    export const inboundSchema: z.ZodType<Wallet, z.ZodTypeDef, unknown> = z.object({
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        id: z.string(),
        ledger: z.string(),
        metadata: z.record(z.string()),
        name: z.string(),
    });

    export type Outbound = {
        createdAt: string;
        id: string;
        ledger: string;
        metadata: { [k: string]: string };
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Wallet> = z.object({
        createdAt: z.date().transform((v) => v.toISOString()),
        id: z.string(),
        ledger: z.string(),
        metadata: z.record(z.string()),
        name: z.string(),
    });
}
