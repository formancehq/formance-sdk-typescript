/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssetHolder,
  AssetHolder$inboundSchema,
  AssetHolder$Outbound,
  AssetHolder$outboundSchema,
} from "./assetholder.js";

export type WalletBalances = {
  main: AssetHolder;
};

export type Wallet = {
  balances?: WalletBalances | undefined;
  createdAt: Date;
  /**
   * The unique ID of the wallet.
   */
  id: string;
  ledger: string;
  /**
   * Metadata associated with the wallet.
   */
  metadata: { [k: string]: string };
  name: string;
};

/** @internal */
export const WalletBalances$inboundSchema: z.ZodType<
  WalletBalances,
  z.ZodTypeDef,
  unknown
> = z.object({
  main: AssetHolder$inboundSchema,
});

/** @internal */
export type WalletBalances$Outbound = {
  main: AssetHolder$Outbound;
};

/** @internal */
export const WalletBalances$outboundSchema: z.ZodType<
  WalletBalances$Outbound,
  z.ZodTypeDef,
  WalletBalances
> = z.object({
  main: AssetHolder$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletBalances$ {
  /** @deprecated use `WalletBalances$inboundSchema` instead. */
  export const inboundSchema = WalletBalances$inboundSchema;
  /** @deprecated use `WalletBalances$outboundSchema` instead. */
  export const outboundSchema = WalletBalances$outboundSchema;
  /** @deprecated use `WalletBalances$Outbound` instead. */
  export type Outbound = WalletBalances$Outbound;
}

export function walletBalancesToJSON(walletBalances: WalletBalances): string {
  return JSON.stringify(WalletBalances$outboundSchema.parse(walletBalances));
}

export function walletBalancesFromJSON(
  jsonString: string,
): SafeParseResult<WalletBalances, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WalletBalances$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WalletBalances' from JSON`,
  );
}

/** @internal */
export const Wallet$inboundSchema: z.ZodType<Wallet, z.ZodTypeDef, unknown> = z
  .object({
    balances: z.lazy(() => WalletBalances$inboundSchema).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    id: z.string(),
    ledger: z.string(),
    metadata: z.record(z.string()),
    name: z.string(),
  });

/** @internal */
export type Wallet$Outbound = {
  balances?: WalletBalances$Outbound | undefined;
  createdAt: string;
  id: string;
  ledger: string;
  metadata: { [k: string]: string };
  name: string;
};

/** @internal */
export const Wallet$outboundSchema: z.ZodType<
  Wallet$Outbound,
  z.ZodTypeDef,
  Wallet
> = z.object({
  balances: z.lazy(() => WalletBalances$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  id: z.string(),
  ledger: z.string(),
  metadata: z.record(z.string()),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Wallet$ {
  /** @deprecated use `Wallet$inboundSchema` instead. */
  export const inboundSchema = Wallet$inboundSchema;
  /** @deprecated use `Wallet$outboundSchema` instead. */
  export const outboundSchema = Wallet$outboundSchema;
  /** @deprecated use `Wallet$Outbound` instead. */
  export type Outbound = Wallet$Outbound;
}

export function walletToJSON(wallet: Wallet): string {
  return JSON.stringify(Wallet$outboundSchema.parse(wallet));
}

export function walletFromJSON(
  jsonString: string,
): SafeParseResult<Wallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Wallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Wallet' from JSON`,
  );
}
