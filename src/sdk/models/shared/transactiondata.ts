/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Posting, Posting$ } from "./posting";
import * as z from "zod";

export type TransactionData = {
    metadata?: { [k: string]: any } | null | undefined;
    postings: Array<Posting>;
    reference?: string | undefined;
    timestamp?: Date | undefined;
};

/** @internal */
export namespace TransactionData$ {
    export const inboundSchema: z.ZodType<TransactionData, z.ZodTypeDef, unknown> = z.object({
        metadata: z.nullable(z.record(z.any())).optional(),
        postings: z.array(Posting$.inboundSchema),
        reference: z.string().optional(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

    export type Outbound = {
        metadata?: { [k: string]: any } | null | undefined;
        postings: Array<Posting$.Outbound>;
        reference?: string | undefined;
        timestamp?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionData> = z.object({
        metadata: z.nullable(z.record(z.any())).optional(),
        postings: z.array(Posting$.outboundSchema),
        reference: z.string().optional(),
        timestamp: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    });
}
