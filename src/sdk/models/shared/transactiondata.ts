/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  Posting,
  Posting$inboundSchema,
  Posting$Outbound,
  Posting$outboundSchema,
} from "./posting.js";

export type TransactionData = {
  metadata?: { [k: string]: any } | null | undefined;
  postings: Array<Posting>;
  reference?: string | undefined;
  timestamp?: Date | undefined;
};

/** @internal */
export const TransactionData$inboundSchema: z.ZodType<
  TransactionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.nullable(z.record(z.any())).optional(),
  postings: z.array(Posting$inboundSchema),
  reference: z.string().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type TransactionData$Outbound = {
  metadata?: { [k: string]: any } | null | undefined;
  postings: Array<Posting$Outbound>;
  reference?: string | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const TransactionData$outboundSchema: z.ZodType<
  TransactionData$Outbound,
  z.ZodTypeDef,
  TransactionData
> = z.object({
  metadata: z.nullable(z.record(z.any())).optional(),
  postings: z.array(Posting$outboundSchema),
  reference: z.string().optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionData$ {
  /** @deprecated use `TransactionData$inboundSchema` instead. */
  export const inboundSchema = TransactionData$inboundSchema;
  /** @deprecated use `TransactionData$outboundSchema` instead. */
  export const outboundSchema = TransactionData$outboundSchema;
  /** @deprecated use `TransactionData$Outbound` instead. */
  export type Outbound = TransactionData$Outbound;
}
