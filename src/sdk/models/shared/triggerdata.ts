/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TriggerData = {
  event: string;
  filter?: string | undefined;
  name?: string | undefined;
  vars?: { [k: string]: any } | undefined;
  workflowID: string;
};

/** @internal */
export const TriggerData$inboundSchema: z.ZodType<
  TriggerData,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.string(),
  filter: z.string().optional(),
  name: z.string().optional(),
  vars: z.record(z.any()).optional(),
  workflowID: z.string(),
});

/** @internal */
export type TriggerData$Outbound = {
  event: string;
  filter?: string | undefined;
  name?: string | undefined;
  vars?: { [k: string]: any } | undefined;
  workflowID: string;
};

/** @internal */
export const TriggerData$outboundSchema: z.ZodType<
  TriggerData$Outbound,
  z.ZodTypeDef,
  TriggerData
> = z.object({
  event: z.string(),
  filter: z.string().optional(),
  name: z.string().optional(),
  vars: z.record(z.any()).optional(),
  workflowID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerData$ {
  /** @deprecated use `TriggerData$inboundSchema` instead. */
  export const inboundSchema = TriggerData$inboundSchema;
  /** @deprecated use `TriggerData$outboundSchema` instead. */
  export const outboundSchema = TriggerData$outboundSchema;
  /** @deprecated use `TriggerData$Outbound` instead. */
  export type Outbound = TriggerData$Outbound;
}

export function triggerDataToJSON(triggerData: TriggerData): string {
  return JSON.stringify(TriggerData$outboundSchema.parse(triggerData));
}

export function triggerDataFromJSON(
  jsonString: string,
): SafeParseResult<TriggerData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerData' from JSON`,
  );
}
