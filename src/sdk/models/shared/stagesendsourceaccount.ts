/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StageSendSourceAccount = {
  id: string;
  ledger?: string | undefined;
};

/** @internal */
export const StageSendSourceAccount$inboundSchema: z.ZodType<
  StageSendSourceAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ledger: z.string().optional(),
});

/** @internal */
export type StageSendSourceAccount$Outbound = {
  id: string;
  ledger?: string | undefined;
};

/** @internal */
export const StageSendSourceAccount$outboundSchema: z.ZodType<
  StageSendSourceAccount$Outbound,
  z.ZodTypeDef,
  StageSendSourceAccount
> = z.object({
  id: z.string(),
  ledger: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StageSendSourceAccount$ {
  /** @deprecated use `StageSendSourceAccount$inboundSchema` instead. */
  export const inboundSchema = StageSendSourceAccount$inboundSchema;
  /** @deprecated use `StageSendSourceAccount$outboundSchema` instead. */
  export const outboundSchema = StageSendSourceAccount$outboundSchema;
  /** @deprecated use `StageSendSourceAccount$Outbound` instead. */
  export type Outbound = StageSendSourceAccount$Outbound;
}

export function stageSendSourceAccountToJSON(
  stageSendSourceAccount: StageSendSourceAccount,
): string {
  return JSON.stringify(
    StageSendSourceAccount$outboundSchema.parse(stageSendSourceAccount),
  );
}

export function stageSendSourceAccountFromJSON(
  jsonString: string,
): SafeParseResult<StageSendSourceAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StageSendSourceAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StageSendSourceAccount' from JSON`,
  );
}
