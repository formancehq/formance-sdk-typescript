/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Payment,
  Payment$inboundSchema,
  Payment$Outbound,
  Payment$outboundSchema,
} from "./payment.js";

export type PaymentsCursorCursor = {
  data: Array<Payment>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/**
 * OK
 */
export type PaymentsCursor = {
  cursor: PaymentsCursorCursor;
};

/** @internal */
export const PaymentsCursorCursor$inboundSchema: z.ZodType<
  PaymentsCursorCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Payment$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type PaymentsCursorCursor$Outbound = {
  data: Array<Payment$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const PaymentsCursorCursor$outboundSchema: z.ZodType<
  PaymentsCursorCursor$Outbound,
  z.ZodTypeDef,
  PaymentsCursorCursor
> = z.object({
  data: z.array(Payment$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsCursorCursor$ {
  /** @deprecated use `PaymentsCursorCursor$inboundSchema` instead. */
  export const inboundSchema = PaymentsCursorCursor$inboundSchema;
  /** @deprecated use `PaymentsCursorCursor$outboundSchema` instead. */
  export const outboundSchema = PaymentsCursorCursor$outboundSchema;
  /** @deprecated use `PaymentsCursorCursor$Outbound` instead. */
  export type Outbound = PaymentsCursorCursor$Outbound;
}

export function paymentsCursorCursorToJSON(
  paymentsCursorCursor: PaymentsCursorCursor,
): string {
  return JSON.stringify(
    PaymentsCursorCursor$outboundSchema.parse(paymentsCursorCursor),
  );
}

export function paymentsCursorCursorFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsCursorCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsCursorCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsCursorCursor' from JSON`,
  );
}

/** @internal */
export const PaymentsCursor$inboundSchema: z.ZodType<
  PaymentsCursor,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => PaymentsCursorCursor$inboundSchema),
});

/** @internal */
export type PaymentsCursor$Outbound = {
  cursor: PaymentsCursorCursor$Outbound;
};

/** @internal */
export const PaymentsCursor$outboundSchema: z.ZodType<
  PaymentsCursor$Outbound,
  z.ZodTypeDef,
  PaymentsCursor
> = z.object({
  cursor: z.lazy(() => PaymentsCursorCursor$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsCursor$ {
  /** @deprecated use `PaymentsCursor$inboundSchema` instead. */
  export const inboundSchema = PaymentsCursor$inboundSchema;
  /** @deprecated use `PaymentsCursor$outboundSchema` instead. */
  export const outboundSchema = PaymentsCursor$outboundSchema;
  /** @deprecated use `PaymentsCursor$Outbound` instead. */
  export type Outbound = PaymentsCursor$Outbound;
}

export function paymentsCursorToJSON(paymentsCursor: PaymentsCursor): string {
  return JSON.stringify(PaymentsCursor$outboundSchema.parse(paymentsCursor));
}

export function paymentsCursorFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsCursor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsCursor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsCursor' from JSON`,
  );
}
