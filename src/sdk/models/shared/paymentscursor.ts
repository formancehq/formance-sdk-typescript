/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Payment, Payment$ } from "./payment";
import * as z from "zod";

export type PaymentsCursorCursor = {
    data: Array<Payment>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};

export type PaymentsCursor = {
    cursor: PaymentsCursorCursor;
};

/** @internal */
export namespace PaymentsCursorCursor$ {
    export const inboundSchema: z.ZodType<PaymentsCursorCursor, z.ZodTypeDef, unknown> = z.object({
        data: z.array(Payment$.inboundSchema),
        hasMore: z.boolean(),
        next: z.string().optional(),
        pageSize: z.number().int(),
        previous: z.string().optional(),
    });

    export type Outbound = {
        data: Array<Payment$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsCursorCursor> = z.object(
        {
            data: z.array(Payment$.outboundSchema),
            hasMore: z.boolean(),
            next: z.string().optional(),
            pageSize: z.number().int(),
            previous: z.string().optional(),
        }
    );
}

/** @internal */
export namespace PaymentsCursor$ {
    export const inboundSchema: z.ZodType<PaymentsCursor, z.ZodTypeDef, unknown> = z.object({
        cursor: z.lazy(() => PaymentsCursorCursor$.inboundSchema),
    });

    export type Outbound = {
        cursor: PaymentsCursorCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsCursor> = z.object({
        cursor: z.lazy(() => PaymentsCursorCursor$.outboundSchema),
    });
}
