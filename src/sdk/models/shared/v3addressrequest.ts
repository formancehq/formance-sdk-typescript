/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3AddressRequest = {
  city?: string | undefined;
  country?: string | undefined;
  postalCode?: string | undefined;
  region?: string | undefined;
  streetName?: string | undefined;
  streetNumber?: string | undefined;
};

/** @internal */
export const V3AddressRequest$inboundSchema: z.ZodType<
  V3AddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  region: z.string().optional(),
  streetName: z.string().optional(),
  streetNumber: z.string().optional(),
});

/** @internal */
export type V3AddressRequest$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  postalCode?: string | undefined;
  region?: string | undefined;
  streetName?: string | undefined;
  streetNumber?: string | undefined;
};

/** @internal */
export const V3AddressRequest$outboundSchema: z.ZodType<
  V3AddressRequest$Outbound,
  z.ZodTypeDef,
  V3AddressRequest
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  postalCode: z.string().optional(),
  region: z.string().optional(),
  streetName: z.string().optional(),
  streetNumber: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3AddressRequest$ {
  /** @deprecated use `V3AddressRequest$inboundSchema` instead. */
  export const inboundSchema = V3AddressRequest$inboundSchema;
  /** @deprecated use `V3AddressRequest$outboundSchema` instead. */
  export const outboundSchema = V3AddressRequest$outboundSchema;
  /** @deprecated use `V3AddressRequest$Outbound` instead. */
  export type Outbound = V3AddressRequest$Outbound;
}

export function v3AddressRequestToJSON(
  v3AddressRequest: V3AddressRequest,
): string {
  return JSON.stringify(
    V3AddressRequest$outboundSchema.parse(v3AddressRequest),
  );
}

export function v3AddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3AddressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3AddressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3AddressRequest' from JSON`,
  );
}
