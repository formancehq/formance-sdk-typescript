/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { V2Monetary, V2Monetary$ } from "./v2monetary";
import { V2Subject, V2Subject$ } from "./v2subject";
import * as z from "zod";

export type V2CreditWalletRequest = {
    amount: V2Monetary;
    /**
     * The balance to credit
     */
    balance?: string | undefined;
    /**
     * Metadata associated with the wallet.
     */
    metadata: { [k: string]: string };
    reference?: string | undefined;
    sources: Array<V2Subject>;
    timestamp?: Date | undefined;
};

/** @internal */
export namespace V2CreditWalletRequest$ {
    export const inboundSchema: z.ZodType<V2CreditWalletRequest, z.ZodTypeDef, unknown> = z.object({
        amount: V2Monetary$.inboundSchema,
        balance: z.string().optional(),
        metadata: z.record(z.string()),
        reference: z.string().optional(),
        sources: z.array(V2Subject$.inboundSchema),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

    export type Outbound = {
        amount: V2Monetary$.Outbound;
        balance?: string | undefined;
        metadata: { [k: string]: string };
        reference?: string | undefined;
        sources: Array<V2Subject$.Outbound>;
        timestamp?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2CreditWalletRequest> =
        z.object({
            amount: V2Monetary$.outboundSchema,
            balance: z.string().optional(),
            metadata: z.record(z.string()),
            reference: z.string().optional(),
            sources: z.array(V2Subject$.outboundSchema),
            timestamp: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        });
}
