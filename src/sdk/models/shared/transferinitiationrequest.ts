/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connector, Connector$ } from "./connector";
import * as z from "zod";

export enum TransferInitiationRequestType {
    Transfer = "TRANSFER",
    Payout = "PAYOUT",
}

export type TransferInitiationRequest = {
    amount: bigint;
    asset: string;
    connectorID?: string | undefined;
    description: string;
    destinationAccountID: string;
    metadata?: Record<string, string> | null | undefined;
    provider?: Connector | undefined;
    reference: string;
    scheduledAt: Date;
    sourceAccountID: string;
    type: TransferInitiationRequestType;
    validated: boolean;
};

/** @internal */
export const TransferInitiationRequestType$: z.ZodNativeEnum<typeof TransferInitiationRequestType> =
    z.nativeEnum(TransferInitiationRequestType);

/** @internal */
export namespace TransferInitiationRequest$ {
    export const inboundSchema: z.ZodType<TransferInitiationRequest, z.ZodTypeDef, unknown> = z
        .object({
            amount: z.number().transform((v) => BigInt(v)),
            asset: z.string(),
            connectorID: z.string().optional(),
            description: z.string(),
            destinationAccountID: z.string(),
            metadata: z.nullable(z.record(z.string())).optional(),
            provider: Connector$.optional(),
            reference: z.string(),
            scheduledAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            sourceAccountID: z.string(),
            type: TransferInitiationRequestType$,
            validated: z.boolean(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                asset: v.asset,
                ...(v.connectorID === undefined ? null : { connectorID: v.connectorID }),
                description: v.description,
                destinationAccountID: v.destinationAccountID,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                reference: v.reference,
                scheduledAt: v.scheduledAt,
                sourceAccountID: v.sourceAccountID,
                type: v.type,
                validated: v.validated,
            };
        });

    export type Outbound = {
        amount: number;
        asset: string;
        connectorID?: string | undefined;
        description: string;
        destinationAccountID: string;
        metadata?: Record<string, string> | null | undefined;
        provider?: Connector | undefined;
        reference: string;
        scheduledAt: string;
        sourceAccountID: string;
        type: TransferInitiationRequestType;
        validated: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiationRequest> = z
        .object({
            amount: z.bigint().transform((v) => Number(v)),
            asset: z.string(),
            connectorID: z.string().optional(),
            description: z.string(),
            destinationAccountID: z.string(),
            metadata: z.nullable(z.record(z.string())).optional(),
            provider: Connector$.optional(),
            reference: z.string(),
            scheduledAt: z.date().transform((v) => v.toISOString()),
            sourceAccountID: z.string(),
            type: TransferInitiationRequestType$,
            validated: z.boolean(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                asset: v.asset,
                ...(v.connectorID === undefined ? null : { connectorID: v.connectorID }),
                description: v.description,
                destinationAccountID: v.destinationAccountID,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                reference: v.reference,
                scheduledAt: v.scheduledAt,
                sourceAccountID: v.sourceAccountID,
                type: v.type,
                validated: v.validated,
            };
        });
}
