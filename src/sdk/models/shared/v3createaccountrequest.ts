/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V3AccountTypeEnum,
  V3AccountTypeEnum$inboundSchema,
  V3AccountTypeEnum$outboundSchema,
} from "./v3accounttypeenum.js";

export type V3CreateAccountRequest = {
  accountName: string;
  connectorID: string;
  createdAt: Date;
  defaultAsset?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  reference: string;
  type: V3AccountTypeEnum;
};

/** @internal */
export const V3CreateAccountRequest$inboundSchema: z.ZodType<
  V3CreateAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountName: z.string(),
  connectorID: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  defaultAsset: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  reference: z.string(),
  type: V3AccountTypeEnum$inboundSchema,
});

/** @internal */
export type V3CreateAccountRequest$Outbound = {
  accountName: string;
  connectorID: string;
  createdAt: string;
  defaultAsset?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  reference: string;
  type: string;
};

/** @internal */
export const V3CreateAccountRequest$outboundSchema: z.ZodType<
  V3CreateAccountRequest$Outbound,
  z.ZodTypeDef,
  V3CreateAccountRequest
> = z.object({
  accountName: z.string(),
  connectorID: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  defaultAsset: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  reference: z.string(),
  type: V3AccountTypeEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CreateAccountRequest$ {
  /** @deprecated use `V3CreateAccountRequest$inboundSchema` instead. */
  export const inboundSchema = V3CreateAccountRequest$inboundSchema;
  /** @deprecated use `V3CreateAccountRequest$outboundSchema` instead. */
  export const outboundSchema = V3CreateAccountRequest$outboundSchema;
  /** @deprecated use `V3CreateAccountRequest$Outbound` instead. */
  export type Outbound = V3CreateAccountRequest$Outbound;
}

export function v3CreateAccountRequestToJSON(
  v3CreateAccountRequest: V3CreateAccountRequest,
): string {
  return JSON.stringify(
    V3CreateAccountRequest$outboundSchema.parse(v3CreateAccountRequest),
  );
}

export function v3CreateAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3CreateAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CreateAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CreateAccountRequest' from JSON`,
  );
}
