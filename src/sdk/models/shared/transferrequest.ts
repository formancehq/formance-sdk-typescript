/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TransferRequest = {
    amount: bigint;
    asset: string;
    destination: string;
    source?: string | undefined;
};

/** @internal */
export namespace TransferRequest$ {
    export const inboundSchema: z.ZodType<TransferRequest, z.ZodTypeDef, unknown> = z
        .object({
            amount: z.number().transform((v) => BigInt(v)),
            asset: z.string(),
            destination: z.string(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                asset: v.asset,
                destination: v.destination,
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });

    export type Outbound = {
        amount: number;
        asset: string;
        destination: string;
        source?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferRequest> = z
        .object({
            amount: z.bigint().transform((v) => Number(v)),
            asset: z.string(),
            destination: z.string(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                asset: v.asset,
                destination: v.destination,
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });
}
