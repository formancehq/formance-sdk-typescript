/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ListPaymentsRequest = {
  /**
   * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
   *
   * @remarks
   */
  cursor?: string | undefined;
  /**
   * The number of items to return
   */
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

export type V3ListPaymentsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3PaymentsCursorResponse?: shared.V3PaymentsCursorResponse | undefined;
};

/** @internal */
export const V3ListPaymentsRequest$inboundSchema: z.ZodType<
  V3ListPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/** @internal */
export type V3ListPaymentsRequest$Outbound = {
  cursor?: string | undefined;
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const V3ListPaymentsRequest$outboundSchema: z.ZodType<
  V3ListPaymentsRequest$Outbound,
  z.ZodTypeDef,
  V3ListPaymentsRequest
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentsRequest$ {
  /** @deprecated use `V3ListPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = V3ListPaymentsRequest$inboundSchema;
  /** @deprecated use `V3ListPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = V3ListPaymentsRequest$outboundSchema;
  /** @deprecated use `V3ListPaymentsRequest$Outbound` instead. */
  export type Outbound = V3ListPaymentsRequest$Outbound;
}

export function v3ListPaymentsRequestToJSON(
  v3ListPaymentsRequest: V3ListPaymentsRequest,
): string {
  return JSON.stringify(
    V3ListPaymentsRequest$outboundSchema.parse(v3ListPaymentsRequest),
  );
}

export function v3ListPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ListPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const V3ListPaymentsResponse$inboundSchema: z.ZodType<
  V3ListPaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3PaymentsCursorResponse: shared.V3PaymentsCursorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3PaymentsCursorResponse": "v3PaymentsCursorResponse",
  });
});

/** @internal */
export type V3ListPaymentsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3PaymentsCursorResponse?:
    | shared.V3PaymentsCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ListPaymentsResponse$outboundSchema: z.ZodType<
  V3ListPaymentsResponse$Outbound,
  z.ZodTypeDef,
  V3ListPaymentsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3PaymentsCursorResponse: shared.V3PaymentsCursorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3PaymentsCursorResponse: "V3PaymentsCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentsResponse$ {
  /** @deprecated use `V3ListPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = V3ListPaymentsResponse$inboundSchema;
  /** @deprecated use `V3ListPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = V3ListPaymentsResponse$outboundSchema;
  /** @deprecated use `V3ListPaymentsResponse$Outbound` instead. */
  export type Outbound = V3ListPaymentsResponse$Outbound;
}

export function v3ListPaymentsResponseToJSON(
  v3ListPaymentsResponse: V3ListPaymentsResponse,
): string {
  return JSON.stringify(
    V3ListPaymentsResponse$outboundSchema.parse(v3ListPaymentsResponse),
  );
}

export function v3ListPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ListPaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListPaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListPaymentsResponse' from JSON`,
  );
}
