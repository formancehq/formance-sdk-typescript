/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetPolicyRequest = {
    /**
     * The policy ID.
     */
    policyID: string;
};

export type GetPolicyResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    policyResponse?: shared.PolicyResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetPolicyRequest$ {
    export type Inbound = {
        policyID: string;
    };

    export const inboundSchema: z.ZodType<GetPolicyRequest, z.ZodTypeDef, Inbound> = z
        .object({
            policyID: z.string(),
        })
        .transform((v) => {
            return {
                policyID: v.policyID,
            };
        });

    export type Outbound = {
        policyID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPolicyRequest> = z
        .object({
            policyID: z.string(),
        })
        .transform((v) => {
            return {
                policyID: v.policyID,
            };
        });
}

/** @internal */
export namespace GetPolicyResponse$ {
    export type Inbound = {
        ContentType: string;
        PolicyResponse?: shared.PolicyResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetPolicyResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            PolicyResponse: shared.PolicyResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.PolicyResponse === undefined ? null : { policyResponse: v.PolicyResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        PolicyResponse?: shared.PolicyResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPolicyResponse> = z
        .object({
            contentType: z.string(),
            policyResponse: shared.PolicyResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.policyResponse === undefined ? null : { PolicyResponse: v.policyResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
