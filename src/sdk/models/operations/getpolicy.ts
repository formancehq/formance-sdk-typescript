/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetPolicyRequest = {
    /**
     * The policy ID.
     */
    policyID: string;
};

export type GetPolicyResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    policyResponse?: shared.PolicyResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const GetPolicyRequest$inboundSchema: z.ZodType<GetPolicyRequest, z.ZodTypeDef, unknown> =
    z.object({
        policyID: z.string(),
    });

/** @internal */
export type GetPolicyRequest$Outbound = {
    policyID: string;
};

/** @internal */
export const GetPolicyRequest$outboundSchema: z.ZodType<
    GetPolicyRequest$Outbound,
    z.ZodTypeDef,
    GetPolicyRequest
> = z.object({
    policyID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPolicyRequest$ {
    /** @deprecated use `GetPolicyRequest$inboundSchema` instead. */
    export const inboundSchema = GetPolicyRequest$inboundSchema;
    /** @deprecated use `GetPolicyRequest$outboundSchema` instead. */
    export const outboundSchema = GetPolicyRequest$outboundSchema;
    /** @deprecated use `GetPolicyRequest$Outbound` instead. */
    export type Outbound = GetPolicyRequest$Outbound;
}

/** @internal */
export const GetPolicyResponse$inboundSchema: z.ZodType<GetPolicyResponse, z.ZodTypeDef, unknown> =
    z
        .object({
            ContentType: z.string(),
            PolicyResponse: shared.PolicyResponse$inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                PolicyResponse: "policyResponse",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

/** @internal */
export type GetPolicyResponse$Outbound = {
    ContentType: string;
    PolicyResponse?: shared.PolicyResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetPolicyResponse$outboundSchema: z.ZodType<
    GetPolicyResponse$Outbound,
    z.ZodTypeDef,
    GetPolicyResponse
> = z
    .object({
        contentType: z.string(),
        policyResponse: shared.PolicyResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            policyResponse: "PolicyResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPolicyResponse$ {
    /** @deprecated use `GetPolicyResponse$inboundSchema` instead. */
    export const inboundSchema = GetPolicyResponse$inboundSchema;
    /** @deprecated use `GetPolicyResponse$outboundSchema` instead. */
    export const outboundSchema = GetPolicyResponse$outboundSchema;
    /** @deprecated use `GetPolicyResponse$Outbound` instead. */
    export type Outbound = GetPolicyResponse$Outbound;
}
