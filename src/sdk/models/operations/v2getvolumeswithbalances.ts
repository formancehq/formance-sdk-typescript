/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2GetVolumesWithBalancesRequest = {
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    endTime?: Date | undefined;
    startTime?: Date | undefined;
    /**
     * Use insertion date instead of effective date
     */
    insertionDate?: boolean | undefined;
    /**
     * Group volumes and balance by the level of the segment of the address
     */
    groupBy?: number | undefined;
    query?: Record<string, any> | undefined;
};

/** @internal */
export namespace V2GetVolumesWithBalancesRequest$ {
    export const inboundSchema: z.ZodType<V2GetVolumesWithBalancesRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                pageSize: z.number().int().optional(),
                cursor: z.string().optional(),
                ledger: z.string(),
                endTime: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                startTime: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                insertionDate: z.boolean().optional(),
                groupBy: z.number().int().optional(),
                query: z.record(z.any()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                    ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                    ledger: v.ledger,
                    ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                    ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                    ...(v.insertionDate === undefined ? null : { insertionDate: v.insertionDate }),
                    ...(v.groupBy === undefined ? null : { groupBy: v.groupBy }),
                    ...(v.query === undefined ? null : { query: v.query }),
                };
            });

    export type Outbound = {
        pageSize?: number | undefined;
        cursor?: string | undefined;
        ledger: string;
        endTime?: string | undefined;
        startTime?: string | undefined;
        insertionDate?: boolean | undefined;
        groupBy?: number | undefined;
        query?: Record<string, any> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2GetVolumesWithBalancesRequest
    > = z
        .object({
            pageSize: z.number().int().optional(),
            cursor: z.string().optional(),
            ledger: z.string(),
            endTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            startTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            insertionDate: z.boolean().optional(),
            groupBy: z.number().int().optional(),
            query: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ledger: v.ledger,
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.insertionDate === undefined ? null : { insertionDate: v.insertionDate }),
                ...(v.groupBy === undefined ? null : { groupBy: v.groupBy }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });
}
