/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type V2GetVolumesWithBalancesRequest = {
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    endTime?: Date | undefined;
    /**
     * Group volumes and balance by the level of the segment of the address
     */
    groupBy?: number | undefined;
    /**
     * Use insertion date instead of effective date
     */
    insertionDate?: boolean | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    query?: { [k: string]: any } | undefined;
    startTime?: Date | undefined;
};

export type V2GetVolumesWithBalancesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2VolumesWithBalanceCursorResponse?: shared.V2VolumesWithBalanceCursorResponse | undefined;
};

/** @internal */
export namespace V2GetVolumesWithBalancesRequest$ {
    export const inboundSchema: z.ZodType<V2GetVolumesWithBalancesRequest, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.string().optional(),
            endTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            groupBy: z.number().int().optional(),
            insertionDate: z.boolean().optional(),
            ledger: z.string(),
            pageSize: z.number().int().optional(),
            query: z.record(z.any()).optional(),
            startTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        });

    export type Outbound = {
        cursor?: string | undefined;
        endTime?: string | undefined;
        groupBy?: number | undefined;
        insertionDate?: boolean | undefined;
        ledger: string;
        pageSize?: number | undefined;
        query?: { [k: string]: any } | undefined;
        startTime?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2GetVolumesWithBalancesRequest
    > = z.object({
        cursor: z.string().optional(),
        endTime: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        groupBy: z.number().int().optional(),
        insertionDate: z.boolean().optional(),
        ledger: z.string(),
        pageSize: z.number().int().optional(),
        query: z.record(z.any()).optional(),
        startTime: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    });
}

/** @internal */
export namespace V2GetVolumesWithBalancesResponse$ {
    export const inboundSchema: z.ZodType<V2GetVolumesWithBalancesResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                V2VolumesWithBalanceCursorResponse:
                    shared.V2VolumesWithBalanceCursorResponse$.inboundSchema.optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    ContentType: "contentType",
                    StatusCode: "statusCode",
                    RawResponse: "rawResponse",
                    V2VolumesWithBalanceCursorResponse: "v2VolumesWithBalanceCursorResponse",
                });
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2VolumesWithBalanceCursorResponse?:
            | shared.V2VolumesWithBalanceCursorResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2GetVolumesWithBalancesResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            v2VolumesWithBalanceCursorResponse:
                shared.V2VolumesWithBalanceCursorResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                v2VolumesWithBalanceCursorResponse: "V2VolumesWithBalanceCursorResponse",
            });
        });
}
