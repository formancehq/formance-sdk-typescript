/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2AddMetadataOnTransactionRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Transaction ID.
     */
    id: bigint;
    /**
     * Set the dryRun mode. Dry run mode doesn't add the logs to the database or publish a message to the message broker.
     */
    dryRun?: boolean | undefined;
    /**
     * Use an idempotency key
     */
    idempotencyKey?: string | undefined;
    /**
     * metadata
     */
    requestBody?: Record<string, string> | undefined;
};

export type V2AddMetadataOnTransactionResponse = {};

/** @internal */
export namespace V2AddMetadataOnTransactionRequest$ {
    export const inboundSchema: z.ZodType<
        V2AddMetadataOnTransactionRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ledger: z.string(),
            id: z.number().transform((v) => BigInt(v)),
            dryRun: z.boolean().optional(),
            "Idempotency-Key": z.string().optional(),
            RequestBody: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                id: v.id,
                ...(v.dryRun === undefined ? null : { dryRun: v.dryRun }),
                ...(v["Idempotency-Key"] === undefined
                    ? null
                    : { idempotencyKey: v["Idempotency-Key"] }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        ledger: string;
        id: number;
        dryRun?: boolean | undefined;
        "Idempotency-Key"?: string | undefined;
        RequestBody?: Record<string, string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2AddMetadataOnTransactionRequest
    > = z
        .object({
            ledger: z.string(),
            id: z.bigint().transform((v) => Number(v)),
            dryRun: z.boolean().optional(),
            idempotencyKey: z.string().optional(),
            requestBody: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                id: v.id,
                ...(v.dryRun === undefined ? null : { dryRun: v.dryRun }),
                ...(v.idempotencyKey === undefined
                    ? null
                    : { "Idempotency-Key": v.idempotencyKey }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace V2AddMetadataOnTransactionResponse$ {
    export const inboundSchema: z.ZodType<
        V2AddMetadataOnTransactionResponse,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2AddMetadataOnTransactionResponse
    > = z.object({});
}
