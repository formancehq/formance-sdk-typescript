/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type CreateTransactionRequest = {
  /**
   * The request body must contain at least one of the following objects:
   *
   * @remarks
   *   - `postings`: suitable for simple transactions
   *   - `script`: enabling more complex transactions with Numscript
   */
  postTransaction: shared.PostTransaction;
  /**
   * Name of the ledger.
   */
  ledger: string;
  /**
   * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
   */
  preview?: boolean | undefined;
};

export type CreateTransactionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  transactionsResponse?: shared.TransactionsResponse | undefined;
};

/** @internal */
export const CreateTransactionRequest$inboundSchema: z.ZodType<
  CreateTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  PostTransaction: shared.PostTransaction$inboundSchema,
  ledger: z.string(),
  preview: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "PostTransaction": "postTransaction",
  });
});

/** @internal */
export type CreateTransactionRequest$Outbound = {
  PostTransaction: shared.PostTransaction$Outbound;
  ledger: string;
  preview?: boolean | undefined;
};

/** @internal */
export const CreateTransactionRequest$outboundSchema: z.ZodType<
  CreateTransactionRequest$Outbound,
  z.ZodTypeDef,
  CreateTransactionRequest
> = z.object({
  postTransaction: shared.PostTransaction$outboundSchema,
  ledger: z.string(),
  preview: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    postTransaction: "PostTransaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionRequest$ {
  /** @deprecated use `CreateTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionRequest$inboundSchema;
  /** @deprecated use `CreateTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionRequest$outboundSchema;
  /** @deprecated use `CreateTransactionRequest$Outbound` instead. */
  export type Outbound = CreateTransactionRequest$Outbound;
}

/** @internal */
export const CreateTransactionResponse$inboundSchema: z.ZodType<
  CreateTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TransactionsResponse: shared.TransactionsResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TransactionsResponse": "transactionsResponse",
  });
});

/** @internal */
export type CreateTransactionResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  TransactionsResponse?: shared.TransactionsResponse$Outbound | undefined;
};

/** @internal */
export const CreateTransactionResponse$outboundSchema: z.ZodType<
  CreateTransactionResponse$Outbound,
  z.ZodTypeDef,
  CreateTransactionResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  transactionsResponse: shared.TransactionsResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    transactionsResponse: "TransactionsResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionResponse$ {
  /** @deprecated use `CreateTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionResponse$inboundSchema;
  /** @deprecated use `CreateTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionResponse$outboundSchema;
  /** @deprecated use `CreateTransactionResponse$Outbound` instead. */
  export type Outbound = CreateTransactionResponse$Outbound;
}
