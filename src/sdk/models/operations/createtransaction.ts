/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type CreateTransactionRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    preview?: boolean | undefined;
    /**
     * The request body must contain at least one of the following objects:
     *
     * @remarks
     *   - `postings`: suitable for simple transactions
     *   - `script`: enabling more complex transactions with Numscript
     *
     */
    postTransaction: shared.PostTransaction;
};

/** @internal */
export namespace CreateTransactionRequest$ {
    export const inboundSchema: z.ZodType<CreateTransactionRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            preview: z.boolean().optional(),
            PostTransaction: shared.PostTransaction$.inboundSchema,
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.preview === undefined ? null : { preview: v.preview }),
                postTransaction: v.PostTransaction,
            };
        });

    export type Outbound = {
        ledger: string;
        preview?: boolean | undefined;
        PostTransaction: shared.PostTransaction$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionRequest> = z
        .object({
            ledger: z.string(),
            preview: z.boolean().optional(),
            postTransaction: shared.PostTransaction$.outboundSchema,
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.preview === undefined ? null : { preview: v.preview }),
                PostTransaction: v.postTransaction,
            };
        });
}
