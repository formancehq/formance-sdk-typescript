/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type V2ListTriggersOccurrencesRequest = {
    /**
     * The trigger id
     */
    triggerID: string;
};

export type V2ListTriggersOccurrencesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of triggers occurrences
     */
    v2ListTriggersOccurrencesResponse?: shared.V2ListTriggersOccurrencesResponse | undefined;
};

/** @internal */
export namespace V2ListTriggersOccurrencesRequest$ {
    export type Inbound = {
        triggerID: string;
    };

    export const inboundSchema: z.ZodType<V2ListTriggersOccurrencesRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                triggerID: z.string(),
            })
            .transform((v) => {
                return {
                    triggerID: v.triggerID,
                };
            });

    export type Outbound = {
        triggerID: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2ListTriggersOccurrencesRequest
    > = z
        .object({
            triggerID: z.string(),
        })
        .transform((v) => {
            return {
                triggerID: v.triggerID,
            };
        });
}

/** @internal */
export namespace V2ListTriggersOccurrencesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        V2ListTriggersOccurrencesResponse?:
            | shared.V2ListTriggersOccurrencesResponse$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<
        V2ListTriggersOccurrencesResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            V2ListTriggersOccurrencesResponse:
                shared.V2ListTriggersOccurrencesResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.V2ListTriggersOccurrencesResponse === undefined
                    ? null
                    : { v2ListTriggersOccurrencesResponse: v.V2ListTriggersOccurrencesResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2ListTriggersOccurrencesResponse?:
            | shared.V2ListTriggersOccurrencesResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2ListTriggersOccurrencesResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            v2ListTriggersOccurrencesResponse:
                shared.V2ListTriggersOccurrencesResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.v2ListTriggersOccurrencesResponse === undefined
                    ? null
                    : { V2ListTriggersOccurrencesResponse: v.v2ListTriggersOccurrencesResponse }),
            };
        });
}
