/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetTransferInitiationRequest = {
  /**
   * The transfer ID.
   */
  transferId: string;
};

export type GetTransferInitiationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  transferInitiationResponse?: shared.TransferInitiationResponse | undefined;
};

/** @internal */
export const GetTransferInitiationRequest$inboundSchema: z.ZodType<
  GetTransferInitiationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transferId: z.string(),
});

/** @internal */
export type GetTransferInitiationRequest$Outbound = {
  transferId: string;
};

/** @internal */
export const GetTransferInitiationRequest$outboundSchema: z.ZodType<
  GetTransferInitiationRequest$Outbound,
  z.ZodTypeDef,
  GetTransferInitiationRequest
> = z.object({
  transferId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransferInitiationRequest$ {
  /** @deprecated use `GetTransferInitiationRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransferInitiationRequest$inboundSchema;
  /** @deprecated use `GetTransferInitiationRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransferInitiationRequest$outboundSchema;
  /** @deprecated use `GetTransferInitiationRequest$Outbound` instead. */
  export type Outbound = GetTransferInitiationRequest$Outbound;
}

export function getTransferInitiationRequestToJSON(
  getTransferInitiationRequest: GetTransferInitiationRequest,
): string {
  return JSON.stringify(
    GetTransferInitiationRequest$outboundSchema.parse(
      getTransferInitiationRequest,
    ),
  );
}

export function getTransferInitiationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransferInitiationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransferInitiationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransferInitiationRequest' from JSON`,
  );
}

/** @internal */
export const GetTransferInitiationResponse$inboundSchema: z.ZodType<
  GetTransferInitiationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TransferInitiationResponse: shared.TransferInitiationResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TransferInitiationResponse": "transferInitiationResponse",
  });
});

/** @internal */
export type GetTransferInitiationResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  TransferInitiationResponse?:
    | shared.TransferInitiationResponse$Outbound
    | undefined;
};

/** @internal */
export const GetTransferInitiationResponse$outboundSchema: z.ZodType<
  GetTransferInitiationResponse$Outbound,
  z.ZodTypeDef,
  GetTransferInitiationResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  transferInitiationResponse: shared.TransferInitiationResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    transferInitiationResponse: "TransferInitiationResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransferInitiationResponse$ {
  /** @deprecated use `GetTransferInitiationResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransferInitiationResponse$inboundSchema;
  /** @deprecated use `GetTransferInitiationResponse$outboundSchema` instead. */
  export const outboundSchema = GetTransferInitiationResponse$outboundSchema;
  /** @deprecated use `GetTransferInitiationResponse$Outbound` instead. */
  export type Outbound = GetTransferInitiationResponse$Outbound;
}

export function getTransferInitiationResponseToJSON(
  getTransferInitiationResponse: GetTransferInitiationResponse,
): string {
  return JSON.stringify(
    GetTransferInitiationResponse$outboundSchema.parse(
      getTransferInitiationResponse,
    ),
  );
}

export function getTransferInitiationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransferInitiationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransferInitiationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransferInitiationResponse' from JSON`,
  );
}
