/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type DeactivateConfigRequest = {
    /**
     * Config ID
     */
    id: string;
};

export type DeactivateConfigResponse = {
    /**
     * Config successfully deactivated.
     */
    configResponse?: shared.ConfigResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const DeactivateConfigRequest$inboundSchema: z.ZodType<
    DeactivateConfigRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
});

/** @internal */
export type DeactivateConfigRequest$Outbound = {
    id: string;
};

/** @internal */
export const DeactivateConfigRequest$outboundSchema: z.ZodType<
    DeactivateConfigRequest$Outbound,
    z.ZodTypeDef,
    DeactivateConfigRequest
> = z.object({
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateConfigRequest$ {
    /** @deprecated use `DeactivateConfigRequest$inboundSchema` instead. */
    export const inboundSchema = DeactivateConfigRequest$inboundSchema;
    /** @deprecated use `DeactivateConfigRequest$outboundSchema` instead. */
    export const outboundSchema = DeactivateConfigRequest$outboundSchema;
    /** @deprecated use `DeactivateConfigRequest$Outbound` instead. */
    export type Outbound = DeactivateConfigRequest$Outbound;
}

/** @internal */
export const DeactivateConfigResponse$inboundSchema: z.ZodType<
    DeactivateConfigResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ConfigResponse: shared.ConfigResponse$inboundSchema.optional(),
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ConfigResponse: "configResponse",
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type DeactivateConfigResponse$Outbound = {
    ConfigResponse?: shared.ConfigResponse$Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const DeactivateConfigResponse$outboundSchema: z.ZodType<
    DeactivateConfigResponse$Outbound,
    z.ZodTypeDef,
    DeactivateConfigResponse
> = z
    .object({
        configResponse: shared.ConfigResponse$outboundSchema.optional(),
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            configResponse: "ConfigResponse",
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateConfigResponse$ {
    /** @deprecated use `DeactivateConfigResponse$inboundSchema` instead. */
    export const inboundSchema = DeactivateConfigResponse$inboundSchema;
    /** @deprecated use `DeactivateConfigResponse$outboundSchema` instead. */
    export const outboundSchema = DeactivateConfigResponse$outboundSchema;
    /** @deprecated use `DeactivateConfigResponse$Outbound` instead. */
    export type Outbound = DeactivateConfigResponse$Outbound;
}
