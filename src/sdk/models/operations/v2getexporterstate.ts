/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2GetExporterStateRequest = {
  /**
   * The exporter id
   */
  exporterID: string;
};

/**
 * Exporter information
 */
export type V2GetExporterStateResponseBody = {
  data: shared.V2Exporter;
};

export type V2GetExporterStateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Exporter information
   */
  object?: V2GetExporterStateResponseBody | undefined;
};

/** @internal */
export const V2GetExporterStateRequest$inboundSchema: z.ZodType<
  V2GetExporterStateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  exporterID: z.string(),
});

/** @internal */
export type V2GetExporterStateRequest$Outbound = {
  exporterID: string;
};

/** @internal */
export const V2GetExporterStateRequest$outboundSchema: z.ZodType<
  V2GetExporterStateRequest$Outbound,
  z.ZodTypeDef,
  V2GetExporterStateRequest
> = z.object({
  exporterID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetExporterStateRequest$ {
  /** @deprecated use `V2GetExporterStateRequest$inboundSchema` instead. */
  export const inboundSchema = V2GetExporterStateRequest$inboundSchema;
  /** @deprecated use `V2GetExporterStateRequest$outboundSchema` instead. */
  export const outboundSchema = V2GetExporterStateRequest$outboundSchema;
  /** @deprecated use `V2GetExporterStateRequest$Outbound` instead. */
  export type Outbound = V2GetExporterStateRequest$Outbound;
}

export function v2GetExporterStateRequestToJSON(
  v2GetExporterStateRequest: V2GetExporterStateRequest,
): string {
  return JSON.stringify(
    V2GetExporterStateRequest$outboundSchema.parse(v2GetExporterStateRequest),
  );
}

export function v2GetExporterStateRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2GetExporterStateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetExporterStateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetExporterStateRequest' from JSON`,
  );
}

/** @internal */
export const V2GetExporterStateResponseBody$inboundSchema: z.ZodType<
  V2GetExporterStateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: shared.V2Exporter$inboundSchema,
});

/** @internal */
export type V2GetExporterStateResponseBody$Outbound = {
  data: shared.V2Exporter$Outbound;
};

/** @internal */
export const V2GetExporterStateResponseBody$outboundSchema: z.ZodType<
  V2GetExporterStateResponseBody$Outbound,
  z.ZodTypeDef,
  V2GetExporterStateResponseBody
> = z.object({
  data: shared.V2Exporter$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetExporterStateResponseBody$ {
  /** @deprecated use `V2GetExporterStateResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2GetExporterStateResponseBody$inboundSchema;
  /** @deprecated use `V2GetExporterStateResponseBody$outboundSchema` instead. */
  export const outboundSchema = V2GetExporterStateResponseBody$outboundSchema;
  /** @deprecated use `V2GetExporterStateResponseBody$Outbound` instead. */
  export type Outbound = V2GetExporterStateResponseBody$Outbound;
}

export function v2GetExporterStateResponseBodyToJSON(
  v2GetExporterStateResponseBody: V2GetExporterStateResponseBody,
): string {
  return JSON.stringify(
    V2GetExporterStateResponseBody$outboundSchema.parse(
      v2GetExporterStateResponseBody,
    ),
  );
}

export function v2GetExporterStateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2GetExporterStateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetExporterStateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetExporterStateResponseBody' from JSON`,
  );
}

/** @internal */
export const V2GetExporterStateResponse$inboundSchema: z.ZodType<
  V2GetExporterStateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => V2GetExporterStateResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2GetExporterStateResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: V2GetExporterStateResponseBody$Outbound | undefined;
};

/** @internal */
export const V2GetExporterStateResponse$outboundSchema: z.ZodType<
  V2GetExporterStateResponse$Outbound,
  z.ZodTypeDef,
  V2GetExporterStateResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => V2GetExporterStateResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetExporterStateResponse$ {
  /** @deprecated use `V2GetExporterStateResponse$inboundSchema` instead. */
  export const inboundSchema = V2GetExporterStateResponse$inboundSchema;
  /** @deprecated use `V2GetExporterStateResponse$outboundSchema` instead. */
  export const outboundSchema = V2GetExporterStateResponse$outboundSchema;
  /** @deprecated use `V2GetExporterStateResponse$Outbound` instead. */
  export type Outbound = V2GetExporterStateResponse$Outbound;
}

export function v2GetExporterStateResponseToJSON(
  v2GetExporterStateResponse: V2GetExporterStateResponse,
): string {
  return JSON.stringify(
    V2GetExporterStateResponse$outboundSchema.parse(v2GetExporterStateResponse),
  );
}

export function v2GetExporterStateResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2GetExporterStateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetExporterStateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetExporterStateResponse' from JSON`,
  );
}
