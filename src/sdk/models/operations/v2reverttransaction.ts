/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type V2RevertTransactionRequest = {
    /**
     * Revert transaction at effective date of the original tx
     */
    atEffectiveDate?: boolean | undefined;
    /**
     * Force revert
     */
    force?: boolean | undefined;
    /**
     * Transaction ID.
     */
    id: bigint;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type V2RevertTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2RevertTransactionResponse?: shared.V2RevertTransactionResponse | undefined;
};

/** @internal */
export namespace V2RevertTransactionRequest$ {
    export const inboundSchema: z.ZodType<V2RevertTransactionRequest, z.ZodTypeDef, unknown> =
        z.object({
            atEffectiveDate: z.boolean().optional(),
            force: z.boolean().optional(),
            id: z.number().transform((v) => BigInt(v)),
            ledger: z.string(),
        });

    export type Outbound = {
        atEffectiveDate?: boolean | undefined;
        force?: boolean | undefined;
        id: number;
        ledger: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2RevertTransactionRequest> =
        z.object({
            atEffectiveDate: z.boolean().optional(),
            force: z.boolean().optional(),
            id: z.bigint().transform((v) => Number(v)),
            ledger: z.string(),
        });
}

/** @internal */
export namespace V2RevertTransactionResponse$ {
    export const inboundSchema: z.ZodType<V2RevertTransactionResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            V2RevertTransactionResponse:
                shared.V2RevertTransactionResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                V2RevertTransactionResponse: "v2RevertTransactionResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2RevertTransactionResponse?: shared.V2RevertTransactionResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2RevertTransactionResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            v2RevertTransactionResponse:
                shared.V2RevertTransactionResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                v2RevertTransactionResponse: "V2RevertTransactionResponse",
            });
        });
}
