/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2RevertTransactionRequest = {
  v2RevertTransactionRequest?: shared.V2RevertTransactionRequest | undefined;
  /**
   * Revert transaction at effective date of the original tx
   */
  atEffectiveDate?: boolean | undefined;
  /**
   * Set the dryRun mode. dry run mode doesn't add the logs to the database or publish a message to the message broker.
   */
  dryRun?: boolean | undefined;
  /**
   * Force revert
   */
  force?: boolean | undefined;
  /**
   * Transaction ID.
   */
  id: bigint;
  /**
   * Name of the ledger.
   */
  ledger: string;
};

export type V2RevertTransactionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v2CreateTransactionResponse?: shared.V2CreateTransactionResponse | undefined;
};

/** @internal */
export const V2RevertTransactionRequest$inboundSchema: z.ZodType<
  V2RevertTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  V2RevertTransactionRequest: shared.V2RevertTransactionRequest$inboundSchema
    .optional(),
  atEffectiveDate: z.boolean().optional(),
  dryRun: z.boolean().optional(),
  force: z.boolean().optional(),
  id: z.number().transform(v => BigInt(v)),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    "V2RevertTransactionRequest": "v2RevertTransactionRequest",
  });
});

/** @internal */
export type V2RevertTransactionRequest$Outbound = {
  V2RevertTransactionRequest?:
    | shared.V2RevertTransactionRequest$Outbound
    | undefined;
  atEffectiveDate?: boolean | undefined;
  dryRun?: boolean | undefined;
  force?: boolean | undefined;
  id: number;
  ledger: string;
};

/** @internal */
export const V2RevertTransactionRequest$outboundSchema: z.ZodType<
  V2RevertTransactionRequest$Outbound,
  z.ZodTypeDef,
  V2RevertTransactionRequest
> = z.object({
  v2RevertTransactionRequest: shared.V2RevertTransactionRequest$outboundSchema
    .optional(),
  atEffectiveDate: z.boolean().optional(),
  dryRun: z.boolean().optional(),
  force: z.boolean().optional(),
  id: z.bigint().transform(v => Number(v)),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    v2RevertTransactionRequest: "V2RevertTransactionRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2RevertTransactionRequest$ {
  /** @deprecated use `V2RevertTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = V2RevertTransactionRequest$inboundSchema;
  /** @deprecated use `V2RevertTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = V2RevertTransactionRequest$outboundSchema;
  /** @deprecated use `V2RevertTransactionRequest$Outbound` instead. */
  export type Outbound = V2RevertTransactionRequest$Outbound;
}

export function v2RevertTransactionRequestToJSON(
  v2RevertTransactionRequest: V2RevertTransactionRequest,
): string {
  return JSON.stringify(
    V2RevertTransactionRequest$outboundSchema.parse(v2RevertTransactionRequest),
  );
}

export function v2RevertTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2RevertTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2RevertTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2RevertTransactionRequest' from JSON`,
  );
}

/** @internal */
export const V2RevertTransactionResponse$inboundSchema: z.ZodType<
  V2RevertTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2CreateTransactionResponse: shared.V2CreateTransactionResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2CreateTransactionResponse": "v2CreateTransactionResponse",
  });
});

/** @internal */
export type V2RevertTransactionResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2CreateTransactionResponse?:
    | shared.V2CreateTransactionResponse$Outbound
    | undefined;
};

/** @internal */
export const V2RevertTransactionResponse$outboundSchema: z.ZodType<
  V2RevertTransactionResponse$Outbound,
  z.ZodTypeDef,
  V2RevertTransactionResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2CreateTransactionResponse: shared.V2CreateTransactionResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2CreateTransactionResponse: "V2CreateTransactionResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2RevertTransactionResponse$ {
  /** @deprecated use `V2RevertTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = V2RevertTransactionResponse$inboundSchema;
  /** @deprecated use `V2RevertTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = V2RevertTransactionResponse$outboundSchema;
  /** @deprecated use `V2RevertTransactionResponse$Outbound` instead. */
  export type Outbound = V2RevertTransactionResponse$Outbound;
}

export function v2RevertTransactionResponseToJSON(
  v2RevertTransactionResponse: V2RevertTransactionResponse,
): string {
  return JSON.stringify(
    V2RevertTransactionResponse$outboundSchema.parse(
      v2RevertTransactionResponse,
    ),
  );
}

export function v2RevertTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2RevertTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2RevertTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2RevertTransactionResponse' from JSON`,
  );
}
