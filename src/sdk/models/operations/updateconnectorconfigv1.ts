/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type UpdateConnectorConfigV1Request = {
  connectorConfig: shared.ConnectorConfig;
  /**
   * The name of the connector.
   */
  connector: shared.Connector;
  /**
   * The connector ID.
   */
  connectorId: string;
};

export type UpdateConnectorConfigV1Response = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdateConnectorConfigV1Request$inboundSchema: z.ZodType<
  UpdateConnectorConfigV1Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  ConnectorConfig: shared.ConnectorConfig$inboundSchema,
  connector: shared.Connector$inboundSchema,
  connectorId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ConnectorConfig": "connectorConfig",
  });
});

/** @internal */
export type UpdateConnectorConfigV1Request$Outbound = {
  ConnectorConfig: shared.ConnectorConfig$Outbound;
  connector: string;
  connectorId: string;
};

/** @internal */
export const UpdateConnectorConfigV1Request$outboundSchema: z.ZodType<
  UpdateConnectorConfigV1Request$Outbound,
  z.ZodTypeDef,
  UpdateConnectorConfigV1Request
> = z.object({
  connectorConfig: shared.ConnectorConfig$outboundSchema,
  connector: shared.Connector$outboundSchema,
  connectorId: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectorConfig: "ConnectorConfig",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectorConfigV1Request$ {
  /** @deprecated use `UpdateConnectorConfigV1Request$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectorConfigV1Request$inboundSchema;
  /** @deprecated use `UpdateConnectorConfigV1Request$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectorConfigV1Request$outboundSchema;
  /** @deprecated use `UpdateConnectorConfigV1Request$Outbound` instead. */
  export type Outbound = UpdateConnectorConfigV1Request$Outbound;
}

/** @internal */
export const UpdateConnectorConfigV1Response$inboundSchema: z.ZodType<
  UpdateConnectorConfigV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UpdateConnectorConfigV1Response$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdateConnectorConfigV1Response$outboundSchema: z.ZodType<
  UpdateConnectorConfigV1Response$Outbound,
  z.ZodTypeDef,
  UpdateConnectorConfigV1Response
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConnectorConfigV1Response$ {
  /** @deprecated use `UpdateConnectorConfigV1Response$inboundSchema` instead. */
  export const inboundSchema = UpdateConnectorConfigV1Response$inboundSchema;
  /** @deprecated use `UpdateConnectorConfigV1Response$outboundSchema` instead. */
  export const outboundSchema = UpdateConnectorConfigV1Response$outboundSchema;
  /** @deprecated use `UpdateConnectorConfigV1Response$Outbound` instead. */
  export type Outbound = UpdateConnectorConfigV1Response$Outbound;
}
