/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdateConnectorConfigV1Request = {
    connectorConfig: shared.ConnectorConfig;
    /**
     * The name of the connector.
     */
    connector: shared.Connector;
    /**
     * The connector ID.
     */
    connectorId: string;
};

export type UpdateConnectorConfigV1Response = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateConnectorConfigV1Request$ {
    export type Inbound = {
        ConnectorConfig: shared.ConnectorConfig$.Inbound;
        connector: shared.Connector;
        connectorId: string;
    };

    export const inboundSchema: z.ZodType<UpdateConnectorConfigV1Request, z.ZodTypeDef, Inbound> = z
        .object({
            ConnectorConfig: shared.ConnectorConfig$.inboundSchema,
            connector: shared.Connector$,
            connectorId: z.string(),
        })
        .transform((v) => {
            return {
                connectorConfig: v.ConnectorConfig,
                connector: v.connector,
                connectorId: v.connectorId,
            };
        });

    export type Outbound = {
        ConnectorConfig: shared.ConnectorConfig$.Outbound;
        connector: shared.Connector;
        connectorId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateConnectorConfigV1Request> =
        z
            .object({
                connectorConfig: shared.ConnectorConfig$.outboundSchema,
                connector: shared.Connector$,
                connectorId: z.string(),
            })
            .transform((v) => {
                return {
                    ConnectorConfig: v.connectorConfig,
                    connector: v.connector,
                    connectorId: v.connectorId,
                };
            });
}

/** @internal */
export namespace UpdateConnectorConfigV1Response$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<UpdateConnectorConfigV1Response, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateConnectorConfigV1Response
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
