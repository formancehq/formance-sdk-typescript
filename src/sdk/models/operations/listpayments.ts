/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ListPaymentsRequest = {
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Fields used to sort payments (default is date:desc).
     */
    sort?: Array<string> | undefined;
    /**
     * Filters used to filter resources.
     *
     * @remarks
     *
     */
    query?: string | undefined;
};

/** @internal */
export namespace ListPaymentsRequest$ {
    export const inboundSchema: z.ZodType<ListPaymentsRequest, z.ZodTypeDef, unknown> = z
        .object({
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
            sort: z.array(z.string()).optional(),
            query: z.string().optional(),
        })
        .transform((v) => {
            return {
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });

    export type Outbound = {
        pageSize: number;
        cursor?: string | undefined;
        sort?: Array<string> | undefined;
        query?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPaymentsRequest> = z
        .object({
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
            sort: z.array(z.string()).optional(),
            query: z.string().optional(),
        })
        .transform((v) => {
            return {
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });
}
