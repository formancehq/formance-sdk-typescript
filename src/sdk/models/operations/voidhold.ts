/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type VoidHoldRequest = {
    holdId: string;
};

export type VoidHoldResponse = {};

/** @internal */
export namespace VoidHoldRequest$ {
    export const inboundSchema: z.ZodType<VoidHoldRequest, z.ZodTypeDef, unknown> = z
        .object({
            hold_id: z.string(),
        })
        .transform((v) => {
            return {
                holdId: v.hold_id,
            };
        });

    export type Outbound = {
        hold_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VoidHoldRequest> = z
        .object({
            holdId: z.string(),
        })
        .transform((v) => {
            return {
                hold_id: v.holdId,
            };
        });
}

/** @internal */
export namespace VoidHoldResponse$ {
    export const inboundSchema: z.ZodType<VoidHoldResponse, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VoidHoldResponse> = z.object({});
}
