/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ForwardPaymentServiceUserBankAccountRequest = {
  v3ForwardPaymentServiceUserBankAccountRequest?:
    | shared.V3ForwardPaymentServiceUserBankAccountRequest
    | undefined;
  /**
   * The bank account ID
   */
  bankAccountID: string;
  /**
   * The payment service user ID
   */
  paymentServiceUserID: string;
};

export type V3ForwardPaymentServiceUserBankAccountResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Accepted
   */
  v3ForwardPaymentServiceUserBankAccountResponse?:
    | shared.V3ForwardPaymentServiceUserBankAccountResponse
    | undefined;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    V3ForwardPaymentServiceUserBankAccountRequest: shared
      .V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema.optional(),
    bankAccountID: z.string(),
    paymentServiceUserID: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "V3ForwardPaymentServiceUserBankAccountRequest":
        "v3ForwardPaymentServiceUserBankAccountRequest",
    });
  });

/** @internal */
export type V3ForwardPaymentServiceUserBankAccountRequest$Outbound = {
  V3ForwardPaymentServiceUserBankAccountRequest?:
    | shared.V3ForwardPaymentServiceUserBankAccountRequest$Outbound
    | undefined;
  bankAccountID: string;
  paymentServiceUserID: string;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountRequest$Outbound,
    z.ZodTypeDef,
    V3ForwardPaymentServiceUserBankAccountRequest
  > = z.object({
    v3ForwardPaymentServiceUserBankAccountRequest: shared
      .V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema.optional(),
    bankAccountID: z.string(),
    paymentServiceUserID: z.string(),
  }).transform((v) => {
    return remap$(v, {
      v3ForwardPaymentServiceUserBankAccountRequest:
        "V3ForwardPaymentServiceUserBankAccountRequest",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ForwardPaymentServiceUserBankAccountRequest$ {
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountRequest$Outbound` instead. */
  export type Outbound = V3ForwardPaymentServiceUserBankAccountRequest$Outbound;
}

export function v3ForwardPaymentServiceUserBankAccountRequestToJSON(
  v3ForwardPaymentServiceUserBankAccountRequest:
    V3ForwardPaymentServiceUserBankAccountRequest,
): string {
  return JSON.stringify(
    V3ForwardPaymentServiceUserBankAccountRequest$outboundSchema.parse(
      v3ForwardPaymentServiceUserBankAccountRequest,
    ),
  );
}

export function v3ForwardPaymentServiceUserBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ForwardPaymentServiceUserBankAccountRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ForwardPaymentServiceUserBankAccountRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ForwardPaymentServiceUserBankAccountRequest' from JSON`,
  );
}

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    V3ForwardPaymentServiceUserBankAccountResponse: shared
      .V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "V3ForwardPaymentServiceUserBankAccountResponse":
        "v3ForwardPaymentServiceUserBankAccountResponse",
    });
  });

/** @internal */
export type V3ForwardPaymentServiceUserBankAccountResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3ForwardPaymentServiceUserBankAccountResponse?:
    | shared.V3ForwardPaymentServiceUserBankAccountResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema:
  z.ZodType<
    V3ForwardPaymentServiceUserBankAccountResponse$Outbound,
    z.ZodTypeDef,
    V3ForwardPaymentServiceUserBankAccountResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    v3ForwardPaymentServiceUserBankAccountResponse: shared
      .V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      v3ForwardPaymentServiceUserBankAccountResponse:
        "V3ForwardPaymentServiceUserBankAccountResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ForwardPaymentServiceUserBankAccountResponse$ {
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema;
  /** @deprecated use `V3ForwardPaymentServiceUserBankAccountResponse$Outbound` instead. */
  export type Outbound =
    V3ForwardPaymentServiceUserBankAccountResponse$Outbound;
}

export function v3ForwardPaymentServiceUserBankAccountResponseToJSON(
  v3ForwardPaymentServiceUserBankAccountResponse:
    V3ForwardPaymentServiceUserBankAccountResponse,
): string {
  return JSON.stringify(
    V3ForwardPaymentServiceUserBankAccountResponse$outboundSchema.parse(
      v3ForwardPaymentServiceUserBankAccountResponse,
    ),
  );
}

export function v3ForwardPaymentServiceUserBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ForwardPaymentServiceUserBankAccountResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ForwardPaymentServiceUserBankAccountResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ForwardPaymentServiceUserBankAccountResponse' from JSON`,
  );
}
