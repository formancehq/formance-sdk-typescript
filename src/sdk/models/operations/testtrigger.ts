/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type TestTriggerRequest = {
  requestBody?: { [k: string]: any } | undefined;
  /**
   * The trigger id
   */
  triggerID: string;
};

export type TestTriggerResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Test a trigger
   */
  v2TestTriggerResponse?: shared.V2TestTriggerResponse | undefined;
};

/** @internal */
export const TestTriggerRequest$inboundSchema: z.ZodType<
  TestTriggerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.record(z.any()).optional(),
  triggerID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TestTriggerRequest$Outbound = {
  RequestBody?: { [k: string]: any } | undefined;
  triggerID: string;
};

/** @internal */
export const TestTriggerRequest$outboundSchema: z.ZodType<
  TestTriggerRequest$Outbound,
  z.ZodTypeDef,
  TestTriggerRequest
> = z.object({
  requestBody: z.record(z.any()).optional(),
  triggerID: z.string(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestTriggerRequest$ {
  /** @deprecated use `TestTriggerRequest$inboundSchema` instead. */
  export const inboundSchema = TestTriggerRequest$inboundSchema;
  /** @deprecated use `TestTriggerRequest$outboundSchema` instead. */
  export const outboundSchema = TestTriggerRequest$outboundSchema;
  /** @deprecated use `TestTriggerRequest$Outbound` instead. */
  export type Outbound = TestTriggerRequest$Outbound;
}

/** @internal */
export const TestTriggerResponse$inboundSchema: z.ZodType<
  TestTriggerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2TestTriggerResponse: shared.V2TestTriggerResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2TestTriggerResponse": "v2TestTriggerResponse",
  });
});

/** @internal */
export type TestTriggerResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2TestTriggerResponse?: shared.V2TestTriggerResponse$Outbound | undefined;
};

/** @internal */
export const TestTriggerResponse$outboundSchema: z.ZodType<
  TestTriggerResponse$Outbound,
  z.ZodTypeDef,
  TestTriggerResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2TestTriggerResponse: shared.V2TestTriggerResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2TestTriggerResponse: "V2TestTriggerResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestTriggerResponse$ {
  /** @deprecated use `TestTriggerResponse$inboundSchema` instead. */
  export const inboundSchema = TestTriggerResponse$inboundSchema;
  /** @deprecated use `TestTriggerResponse$outboundSchema` instead. */
  export const outboundSchema = TestTriggerResponse$outboundSchema;
  /** @deprecated use `TestTriggerResponse$Outbound` instead. */
  export type Outbound = TestTriggerResponse$Outbound;
}
