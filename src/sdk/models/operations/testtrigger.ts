/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TestTriggerRequest = {
    /**
     * The trigger id
     */
    triggerID: string;
    requestBody?: Record<string, any> | undefined;
};

/** @internal */
export namespace TestTriggerRequest$ {
    export const inboundSchema: z.ZodType<TestTriggerRequest, z.ZodTypeDef, unknown> = z
        .object({
            triggerID: z.string(),
            RequestBody: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                triggerID: v.triggerID,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        triggerID: string;
        RequestBody?: Record<string, any> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestTriggerRequest> = z
        .object({
            triggerID: z.string(),
            requestBody: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                triggerID: v.triggerID,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}
