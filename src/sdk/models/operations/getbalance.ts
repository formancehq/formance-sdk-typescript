/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as errors from "../errors";
import * as shared from "../shared";
import * as z from "zod";

export type GetBalanceRequest = {
    balanceName: string;
    id: string;
};

export type GetBalanceResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Balance summary
     */
    getBalanceResponse?: shared.GetBalanceResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    walletsErrorResponse?: errors.WalletsErrorResponse | undefined;
};

/** @internal */
export namespace GetBalanceRequest$ {
    export type Inbound = {
        balanceName: string;
        id: string;
    };

    export const inboundSchema: z.ZodType<GetBalanceRequest, z.ZodTypeDef, Inbound> = z
        .object({
            balanceName: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                balanceName: v.balanceName,
                id: v.id,
            };
        });

    export type Outbound = {
        balanceName: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBalanceRequest> = z
        .object({
            balanceName: z.string(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                balanceName: v.balanceName,
                id: v.id,
            };
        });
}

/** @internal */
export namespace GetBalanceResponse$ {
    export type Inbound = {
        ContentType: string;
        GetBalanceResponse?: shared.GetBalanceResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        walletsErrorResponse?: errors.WalletsErrorResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetBalanceResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            GetBalanceResponse: shared.GetBalanceResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            walletsErrorResponse: errors.WalletsErrorResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.GetBalanceResponse === undefined
                    ? null
                    : { getBalanceResponse: v.GetBalanceResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.walletsErrorResponse === undefined
                    ? null
                    : { walletsErrorResponse: v.walletsErrorResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        GetBalanceResponse?: shared.GetBalanceResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        walletsErrorResponse?: errors.WalletsErrorResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBalanceResponse> = z
        .object({
            contentType: z.string(),
            getBalanceResponse: shared.GetBalanceResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            walletsErrorResponse: errors.WalletsErrorResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.getBalanceResponse === undefined
                    ? null
                    : { GetBalanceResponse: v.getBalanceResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.walletsErrorResponse === undefined
                    ? null
                    : { walletsErrorResponse: v.walletsErrorResponse }),
            };
        });
}
