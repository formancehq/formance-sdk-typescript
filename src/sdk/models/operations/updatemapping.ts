/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UpdateMappingRequest = {
    mapping: shared.Mapping | null;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type UpdateMappingResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    mappingResponse?: shared.MappingResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const UpdateMappingRequest$inboundSchema: z.ZodType<
    UpdateMappingRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Mapping: z.nullable(shared.Mapping$inboundSchema),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            Mapping: "mapping",
        });
    });

/** @internal */
export type UpdateMappingRequest$Outbound = {
    Mapping: shared.Mapping$Outbound | null;
    ledger: string;
};

/** @internal */
export const UpdateMappingRequest$outboundSchema: z.ZodType<
    UpdateMappingRequest$Outbound,
    z.ZodTypeDef,
    UpdateMappingRequest
> = z
    .object({
        mapping: z.nullable(shared.Mapping$outboundSchema),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            mapping: "Mapping",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMappingRequest$ {
    /** @deprecated use `UpdateMappingRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateMappingRequest$inboundSchema;
    /** @deprecated use `UpdateMappingRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateMappingRequest$outboundSchema;
    /** @deprecated use `UpdateMappingRequest$Outbound` instead. */
    export type Outbound = UpdateMappingRequest$Outbound;
}

/** @internal */
export const UpdateMappingResponse$inboundSchema: z.ZodType<
    UpdateMappingResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        MappingResponse: shared.MappingResponse$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            MappingResponse: "mappingResponse",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type UpdateMappingResponse$Outbound = {
    ContentType: string;
    MappingResponse?: shared.MappingResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const UpdateMappingResponse$outboundSchema: z.ZodType<
    UpdateMappingResponse$Outbound,
    z.ZodTypeDef,
    UpdateMappingResponse
> = z
    .object({
        contentType: z.string(),
        mappingResponse: shared.MappingResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            mappingResponse: "MappingResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMappingResponse$ {
    /** @deprecated use `UpdateMappingResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateMappingResponse$inboundSchema;
    /** @deprecated use `UpdateMappingResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateMappingResponse$outboundSchema;
    /** @deprecated use `UpdateMappingResponse$Outbound` instead. */
    export type Outbound = UpdateMappingResponse$Outbound;
}
