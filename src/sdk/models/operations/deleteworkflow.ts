/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type DeleteWorkflowRequest = {
    /**
     * The flow id
     */
    flowId: string;
};

export type DeleteWorkflowResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const DeleteWorkflowRequest$inboundSchema: z.ZodType<
    DeleteWorkflowRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    flowId: z.string(),
});

/** @internal */
export type DeleteWorkflowRequest$Outbound = {
    flowId: string;
};

/** @internal */
export const DeleteWorkflowRequest$outboundSchema: z.ZodType<
    DeleteWorkflowRequest$Outbound,
    z.ZodTypeDef,
    DeleteWorkflowRequest
> = z.object({
    flowId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWorkflowRequest$ {
    /** @deprecated use `DeleteWorkflowRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteWorkflowRequest$inboundSchema;
    /** @deprecated use `DeleteWorkflowRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteWorkflowRequest$outboundSchema;
    /** @deprecated use `DeleteWorkflowRequest$Outbound` instead. */
    export type Outbound = DeleteWorkflowRequest$Outbound;
}

/** @internal */
export const DeleteWorkflowResponse$inboundSchema: z.ZodType<
    DeleteWorkflowResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type DeleteWorkflowResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const DeleteWorkflowResponse$outboundSchema: z.ZodType<
    DeleteWorkflowResponse$Outbound,
    z.ZodTypeDef,
    DeleteWorkflowResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWorkflowResponse$ {
    /** @deprecated use `DeleteWorkflowResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteWorkflowResponse$inboundSchema;
    /** @deprecated use `DeleteWorkflowResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteWorkflowResponse$outboundSchema;
    /** @deprecated use `DeleteWorkflowResponse$Outbound` instead. */
    export type Outbound = DeleteWorkflowResponse$Outbound;
}
