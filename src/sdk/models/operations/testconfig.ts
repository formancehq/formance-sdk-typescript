/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type TestConfigRequest = {
  /**
   * Config ID
   */
  id: string;
};

export type TestConfigResponse = {
  /**
   * OK
   */
  attemptResponse?: shared.AttemptResponse | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const TestConfigRequest$inboundSchema: z.ZodType<
  TestConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type TestConfigRequest$Outbound = {
  id: string;
};

/** @internal */
export const TestConfigRequest$outboundSchema: z.ZodType<
  TestConfigRequest$Outbound,
  z.ZodTypeDef,
  TestConfigRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestConfigRequest$ {
  /** @deprecated use `TestConfigRequest$inboundSchema` instead. */
  export const inboundSchema = TestConfigRequest$inboundSchema;
  /** @deprecated use `TestConfigRequest$outboundSchema` instead. */
  export const outboundSchema = TestConfigRequest$outboundSchema;
  /** @deprecated use `TestConfigRequest$Outbound` instead. */
  export type Outbound = TestConfigRequest$Outbound;
}

/** @internal */
export const TestConfigResponse$inboundSchema: z.ZodType<
  TestConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AttemptResponse: shared.AttemptResponse$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "AttemptResponse": "attemptResponse",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type TestConfigResponse$Outbound = {
  AttemptResponse?: shared.AttemptResponse$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const TestConfigResponse$outboundSchema: z.ZodType<
  TestConfigResponse$Outbound,
  z.ZodTypeDef,
  TestConfigResponse
> = z.object({
  attemptResponse: shared.AttemptResponse$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    attemptResponse: "AttemptResponse",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestConfigResponse$ {
  /** @deprecated use `TestConfigResponse$inboundSchema` instead. */
  export const inboundSchema = TestConfigResponse$inboundSchema;
  /** @deprecated use `TestConfigResponse$outboundSchema` instead. */
  export const outboundSchema = TestConfigResponse$outboundSchema;
  /** @deprecated use `TestConfigResponse$Outbound` instead. */
  export type Outbound = TestConfigResponse$Outbound;
}
