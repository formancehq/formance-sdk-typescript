/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddMetadataOnTransactionRequest = {
  /**
   * metadata
   */
  requestBody?: { [k: string]: any } | null | undefined;
  /**
   * Name of the ledger.
   */
  ledger: string;
  /**
   * Transaction ID.
   */
  txid: bigint;
};

export type AddMetadataOnTransactionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const AddMetadataOnTransactionRequest$inboundSchema: z.ZodType<
  AddMetadataOnTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.nullable(z.record(z.any())).optional(),
  ledger: z.string(),
  txid: z.number().transform(v => BigInt(v)),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddMetadataOnTransactionRequest$Outbound = {
  RequestBody?: { [k: string]: any } | null | undefined;
  ledger: string;
  txid: number;
};

/** @internal */
export const AddMetadataOnTransactionRequest$outboundSchema: z.ZodType<
  AddMetadataOnTransactionRequest$Outbound,
  z.ZodTypeDef,
  AddMetadataOnTransactionRequest
> = z.object({
  requestBody: z.nullable(z.record(z.any())).optional(),
  ledger: z.string(),
  txid: z.bigint().transform(v => Number(v)),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddMetadataOnTransactionRequest$ {
  /** @deprecated use `AddMetadataOnTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = AddMetadataOnTransactionRequest$inboundSchema;
  /** @deprecated use `AddMetadataOnTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = AddMetadataOnTransactionRequest$outboundSchema;
  /** @deprecated use `AddMetadataOnTransactionRequest$Outbound` instead. */
  export type Outbound = AddMetadataOnTransactionRequest$Outbound;
}

export function addMetadataOnTransactionRequestToJSON(
  addMetadataOnTransactionRequest: AddMetadataOnTransactionRequest,
): string {
  return JSON.stringify(
    AddMetadataOnTransactionRequest$outboundSchema.parse(
      addMetadataOnTransactionRequest,
    ),
  );
}

export function addMetadataOnTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddMetadataOnTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddMetadataOnTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddMetadataOnTransactionRequest' from JSON`,
  );
}

/** @internal */
export const AddMetadataOnTransactionResponse$inboundSchema: z.ZodType<
  AddMetadataOnTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type AddMetadataOnTransactionResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const AddMetadataOnTransactionResponse$outboundSchema: z.ZodType<
  AddMetadataOnTransactionResponse$Outbound,
  z.ZodTypeDef,
  AddMetadataOnTransactionResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddMetadataOnTransactionResponse$ {
  /** @deprecated use `AddMetadataOnTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = AddMetadataOnTransactionResponse$inboundSchema;
  /** @deprecated use `AddMetadataOnTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = AddMetadataOnTransactionResponse$outboundSchema;
  /** @deprecated use `AddMetadataOnTransactionResponse$Outbound` instead. */
  export type Outbound = AddMetadataOnTransactionResponse$Outbound;
}

export function addMetadataOnTransactionResponseToJSON(
  addMetadataOnTransactionResponse: AddMetadataOnTransactionResponse,
): string {
  return JSON.stringify(
    AddMetadataOnTransactionResponse$outboundSchema.parse(
      addMetadataOnTransactionResponse,
    ),
  );
}

export function addMetadataOnTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddMetadataOnTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddMetadataOnTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddMetadataOnTransactionResponse' from JSON`,
  );
}
