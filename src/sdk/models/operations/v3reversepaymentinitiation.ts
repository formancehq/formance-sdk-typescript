/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ReversePaymentInitiationRequest = {
  v3ReversePaymentInitiationRequest?:
    | shared.V3ReversePaymentInitiationRequest
    | undefined;
  /**
   * The payment initiation ID
   */
  paymentInitiationID: string;
};

export type V3ReversePaymentInitiationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Accepted
   */
  v3ReversePaymentInitiationResponse?:
    | shared.V3ReversePaymentInitiationResponse
    | undefined;
};

/** @internal */
export const V3ReversePaymentInitiationRequest$inboundSchema: z.ZodType<
  V3ReversePaymentInitiationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  V3ReversePaymentInitiationRequest: shared
    .V3ReversePaymentInitiationRequest$inboundSchema.optional(),
  paymentInitiationID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "V3ReversePaymentInitiationRequest": "v3ReversePaymentInitiationRequest",
  });
});

/** @internal */
export type V3ReversePaymentInitiationRequest$Outbound = {
  V3ReversePaymentInitiationRequest?:
    | shared.V3ReversePaymentInitiationRequest$Outbound
    | undefined;
  paymentInitiationID: string;
};

/** @internal */
export const V3ReversePaymentInitiationRequest$outboundSchema: z.ZodType<
  V3ReversePaymentInitiationRequest$Outbound,
  z.ZodTypeDef,
  V3ReversePaymentInitiationRequest
> = z.object({
  v3ReversePaymentInitiationRequest: shared
    .V3ReversePaymentInitiationRequest$outboundSchema.optional(),
  paymentInitiationID: z.string(),
}).transform((v) => {
  return remap$(v, {
    v3ReversePaymentInitiationRequest: "V3ReversePaymentInitiationRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ReversePaymentInitiationRequest$ {
  /** @deprecated use `V3ReversePaymentInitiationRequest$inboundSchema` instead. */
  export const inboundSchema = V3ReversePaymentInitiationRequest$inboundSchema;
  /** @deprecated use `V3ReversePaymentInitiationRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3ReversePaymentInitiationRequest$outboundSchema;
  /** @deprecated use `V3ReversePaymentInitiationRequest$Outbound` instead. */
  export type Outbound = V3ReversePaymentInitiationRequest$Outbound;
}

export function v3ReversePaymentInitiationRequestToJSON(
  v3ReversePaymentInitiationRequest: V3ReversePaymentInitiationRequest,
): string {
  return JSON.stringify(
    V3ReversePaymentInitiationRequest$outboundSchema.parse(
      v3ReversePaymentInitiationRequest,
    ),
  );
}

export function v3ReversePaymentInitiationRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ReversePaymentInitiationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ReversePaymentInitiationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ReversePaymentInitiationRequest' from JSON`,
  );
}

/** @internal */
export const V3ReversePaymentInitiationResponse$inboundSchema: z.ZodType<
  V3ReversePaymentInitiationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3ReversePaymentInitiationResponse: shared
    .V3ReversePaymentInitiationResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3ReversePaymentInitiationResponse": "v3ReversePaymentInitiationResponse",
  });
});

/** @internal */
export type V3ReversePaymentInitiationResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3ReversePaymentInitiationResponse?:
    | shared.V3ReversePaymentInitiationResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ReversePaymentInitiationResponse$outboundSchema: z.ZodType<
  V3ReversePaymentInitiationResponse$Outbound,
  z.ZodTypeDef,
  V3ReversePaymentInitiationResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3ReversePaymentInitiationResponse: shared
    .V3ReversePaymentInitiationResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3ReversePaymentInitiationResponse: "V3ReversePaymentInitiationResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ReversePaymentInitiationResponse$ {
  /** @deprecated use `V3ReversePaymentInitiationResponse$inboundSchema` instead. */
  export const inboundSchema = V3ReversePaymentInitiationResponse$inboundSchema;
  /** @deprecated use `V3ReversePaymentInitiationResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ReversePaymentInitiationResponse$outboundSchema;
  /** @deprecated use `V3ReversePaymentInitiationResponse$Outbound` instead. */
  export type Outbound = V3ReversePaymentInitiationResponse$Outbound;
}

export function v3ReversePaymentInitiationResponseToJSON(
  v3ReversePaymentInitiationResponse: V3ReversePaymentInitiationResponse,
): string {
  return JSON.stringify(
    V3ReversePaymentInitiationResponse$outboundSchema.parse(
      v3ReversePaymentInitiationResponse,
    ),
  );
}

export function v3ReversePaymentInitiationResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ReversePaymentInitiationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3ReversePaymentInitiationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ReversePaymentInitiationResponse' from JSON`,
  );
}
