/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3GetPoolRequest = {
  /**
   * The pool ID
   */
  poolID: string;
};

export type V3GetPoolResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3GetPoolResponse?: shared.V3GetPoolResponse | undefined;
};

/** @internal */
export const V3GetPoolRequest$inboundSchema: z.ZodType<
  V3GetPoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  poolID: z.string(),
});

/** @internal */
export type V3GetPoolRequest$Outbound = {
  poolID: string;
};

/** @internal */
export const V3GetPoolRequest$outboundSchema: z.ZodType<
  V3GetPoolRequest$Outbound,
  z.ZodTypeDef,
  V3GetPoolRequest
> = z.object({
  poolID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetPoolRequest$ {
  /** @deprecated use `V3GetPoolRequest$inboundSchema` instead. */
  export const inboundSchema = V3GetPoolRequest$inboundSchema;
  /** @deprecated use `V3GetPoolRequest$outboundSchema` instead. */
  export const outboundSchema = V3GetPoolRequest$outboundSchema;
  /** @deprecated use `V3GetPoolRequest$Outbound` instead. */
  export type Outbound = V3GetPoolRequest$Outbound;
}

export function v3GetPoolRequestToJSON(
  v3GetPoolRequest: V3GetPoolRequest,
): string {
  return JSON.stringify(
    V3GetPoolRequest$outboundSchema.parse(v3GetPoolRequest),
  );
}

export function v3GetPoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GetPoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetPoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetPoolRequest' from JSON`,
  );
}

/** @internal */
export const V3GetPoolResponse$inboundSchema: z.ZodType<
  V3GetPoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3GetPoolResponse: shared.V3GetPoolResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3GetPoolResponse": "v3GetPoolResponse",
  });
});

/** @internal */
export type V3GetPoolResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3GetPoolResponse?: shared.V3GetPoolResponse$Outbound | undefined;
};

/** @internal */
export const V3GetPoolResponse$outboundSchema: z.ZodType<
  V3GetPoolResponse$Outbound,
  z.ZodTypeDef,
  V3GetPoolResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3GetPoolResponse: shared.V3GetPoolResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3GetPoolResponse: "V3GetPoolResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetPoolResponse$ {
  /** @deprecated use `V3GetPoolResponse$inboundSchema` instead. */
  export const inboundSchema = V3GetPoolResponse$inboundSchema;
  /** @deprecated use `V3GetPoolResponse$outboundSchema` instead. */
  export const outboundSchema = V3GetPoolResponse$outboundSchema;
  /** @deprecated use `V3GetPoolResponse$Outbound` instead. */
  export type Outbound = V3GetPoolResponse$Outbound;
}

export function v3GetPoolResponseToJSON(
  v3GetPoolResponse: V3GetPoolResponse,
): string {
  return JSON.stringify(
    V3GetPoolResponse$outboundSchema.parse(v3GetPoolResponse),
  );
}

export function v3GetPoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GetPoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetPoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetPoolResponse' from JSON`,
  );
}
