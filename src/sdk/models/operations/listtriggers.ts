/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ListTriggersRequest = {
  /**
   * search by name
   */
  name?: string | undefined;
};

export type ListTriggersResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * List of triggers
   */
  listTriggersResponse?: shared.ListTriggersResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ListTriggersRequest$inboundSchema: z.ZodType<
  ListTriggersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type ListTriggersRequest$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const ListTriggersRequest$outboundSchema: z.ZodType<
  ListTriggersRequest$Outbound,
  z.ZodTypeDef,
  ListTriggersRequest
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTriggersRequest$ {
  /** @deprecated use `ListTriggersRequest$inboundSchema` instead. */
  export const inboundSchema = ListTriggersRequest$inboundSchema;
  /** @deprecated use `ListTriggersRequest$outboundSchema` instead. */
  export const outboundSchema = ListTriggersRequest$outboundSchema;
  /** @deprecated use `ListTriggersRequest$Outbound` instead. */
  export type Outbound = ListTriggersRequest$Outbound;
}

export function listTriggersRequestToJSON(
  listTriggersRequest: ListTriggersRequest,
): string {
  return JSON.stringify(
    ListTriggersRequest$outboundSchema.parse(listTriggersRequest),
  );
}

export function listTriggersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTriggersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTriggersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTriggersRequest' from JSON`,
  );
}

/** @internal */
export const ListTriggersResponse$inboundSchema: z.ZodType<
  ListTriggersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ListTriggersResponse: shared.ListTriggersResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "ListTriggersResponse": "listTriggersResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ListTriggersResponse$Outbound = {
  ContentType: string;
  ListTriggersResponse?: shared.ListTriggersResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ListTriggersResponse$outboundSchema: z.ZodType<
  ListTriggersResponse$Outbound,
  z.ZodTypeDef,
  ListTriggersResponse
> = z.object({
  contentType: z.string(),
  listTriggersResponse: shared.ListTriggersResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    listTriggersResponse: "ListTriggersResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTriggersResponse$ {
  /** @deprecated use `ListTriggersResponse$inboundSchema` instead. */
  export const inboundSchema = ListTriggersResponse$inboundSchema;
  /** @deprecated use `ListTriggersResponse$outboundSchema` instead. */
  export const outboundSchema = ListTriggersResponse$outboundSchema;
  /** @deprecated use `ListTriggersResponse$Outbound` instead. */
  export type Outbound = ListTriggersResponse$Outbound;
}

export function listTriggersResponseToJSON(
  listTriggersResponse: ListTriggersResponse,
): string {
  return JSON.stringify(
    ListTriggersResponse$outboundSchema.parse(listTriggersResponse),
  );
}

export function listTriggersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTriggersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTriggersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTriggersResponse' from JSON`,
  );
}
