/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type ListTriggersRequest = {
    /**
     * search by name
     */
    name?: string | undefined;
};

export type ListTriggersResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * List of triggers
     */
    listTriggersResponse?: shared.ListTriggersResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ListTriggersRequest$ {
    export const inboundSchema: z.ZodType<ListTriggersRequest, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListTriggersRequest> = z
        .object({
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace ListTriggersResponse$ {
    export const inboundSchema: z.ZodType<ListTriggersResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            ListTriggersResponse: shared.ListTriggersResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ListTriggersResponse === undefined
                    ? null
                    : { listTriggersResponse: v.ListTriggersResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ListTriggersResponse?: shared.ListTriggersResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListTriggersResponse> = z
        .object({
            contentType: z.string(),
            listTriggersResponse: shared.ListTriggersResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.listTriggersResponse === undefined
                    ? null
                    : { ListTriggersResponse: v.listTriggersResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
