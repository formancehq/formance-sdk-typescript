/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type ListConnectorTasksRequest = {
    /**
     * The name of the connector.
     */
    connector: shared.Connector;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
};

export type ListConnectorTasksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    tasksCursor?: shared.TasksCursor | undefined;
};

/** @internal */
export const ListConnectorTasksRequest$inboundSchema: z.ZodType<
    ListConnectorTasksRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    connector: shared.Connector$inboundSchema,
    cursor: z.string().optional(),
    pageSize: z.number().int().default(15),
});

/** @internal */
export type ListConnectorTasksRequest$Outbound = {
    connector: string;
    cursor?: string | undefined;
    pageSize: number;
};

/** @internal */
export const ListConnectorTasksRequest$outboundSchema: z.ZodType<
    ListConnectorTasksRequest$Outbound,
    z.ZodTypeDef,
    ListConnectorTasksRequest
> = z.object({
    connector: shared.Connector$outboundSchema,
    cursor: z.string().optional(),
    pageSize: z.number().int().default(15),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectorTasksRequest$ {
    /** @deprecated use `ListConnectorTasksRequest$inboundSchema` instead. */
    export const inboundSchema = ListConnectorTasksRequest$inboundSchema;
    /** @deprecated use `ListConnectorTasksRequest$outboundSchema` instead. */
    export const outboundSchema = ListConnectorTasksRequest$outboundSchema;
    /** @deprecated use `ListConnectorTasksRequest$Outbound` instead. */
    export type Outbound = ListConnectorTasksRequest$Outbound;
}

/** @internal */
export const ListConnectorTasksResponse$inboundSchema: z.ZodType<
    ListConnectorTasksResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        TasksCursor: shared.TasksCursor$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            TasksCursor: "tasksCursor",
        });
    });

/** @internal */
export type ListConnectorTasksResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    TasksCursor?: shared.TasksCursor$Outbound | undefined;
};

/** @internal */
export const ListConnectorTasksResponse$outboundSchema: z.ZodType<
    ListConnectorTasksResponse$Outbound,
    z.ZodTypeDef,
    ListConnectorTasksResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        tasksCursor: shared.TasksCursor$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            tasksCursor: "TasksCursor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectorTasksResponse$ {
    /** @deprecated use `ListConnectorTasksResponse$inboundSchema` instead. */
    export const inboundSchema = ListConnectorTasksResponse$inboundSchema;
    /** @deprecated use `ListConnectorTasksResponse$outboundSchema` instead. */
    export const outboundSchema = ListConnectorTasksResponse$outboundSchema;
    /** @deprecated use `ListConnectorTasksResponse$Outbound` instead. */
    export type Outbound = ListConnectorTasksResponse$Outbound;
}
