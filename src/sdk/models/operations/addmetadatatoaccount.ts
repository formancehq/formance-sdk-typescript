/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AddMetadataToAccountRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Exact address of the account. It must match the following regular expressions pattern:
     *
     * @remarks
     * ```
     * ^\w+(:\w+)*$
     * ```
     *
     */
    address: string;
    /**
     * metadata
     */
    requestBody: Record<string, any> | null;
};

export type AddMetadataToAccountResponse = {};

/** @internal */
export namespace AddMetadataToAccountRequest$ {
    export const inboundSchema: z.ZodType<AddMetadataToAccountRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            address: z.string(),
            RequestBody: z.nullable(z.record(z.any())),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                address: v.address,
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        ledger: string;
        address: string;
        RequestBody: Record<string, any> | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddMetadataToAccountRequest> = z
        .object({
            ledger: z.string(),
            address: z.string(),
            requestBody: z.nullable(z.record(z.any())),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                address: v.address,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export namespace AddMetadataToAccountResponse$ {
    export const inboundSchema: z.ZodType<AddMetadataToAccountResponse, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddMetadataToAccountResponse> =
        z.object({});
}
