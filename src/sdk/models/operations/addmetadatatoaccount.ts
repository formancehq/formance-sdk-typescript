/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type AddMetadataToAccountRequest = {
    /**
     * metadata
     */
    requestBody: { [k: string]: any } | null;
    /**
     * Exact address of the account. It must match the following regular expressions pattern:
     *
     * @remarks
     * ```
     * ^\w+(:\w+)*$
     * ```
     *
     */
    address: string;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type AddMetadataToAccountResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const AddMetadataToAccountRequest$inboundSchema: z.ZodType<
    AddMetadataToAccountRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.nullable(z.record(z.any())),
        address: z.string(),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type AddMetadataToAccountRequest$Outbound = {
    RequestBody: { [k: string]: any } | null;
    address: string;
    ledger: string;
};

/** @internal */
export const AddMetadataToAccountRequest$outboundSchema: z.ZodType<
    AddMetadataToAccountRequest$Outbound,
    z.ZodTypeDef,
    AddMetadataToAccountRequest
> = z
    .object({
        requestBody: z.nullable(z.record(z.any())),
        address: z.string(),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddMetadataToAccountRequest$ {
    /** @deprecated use `AddMetadataToAccountRequest$inboundSchema` instead. */
    export const inboundSchema = AddMetadataToAccountRequest$inboundSchema;
    /** @deprecated use `AddMetadataToAccountRequest$outboundSchema` instead. */
    export const outboundSchema = AddMetadataToAccountRequest$outboundSchema;
    /** @deprecated use `AddMetadataToAccountRequest$Outbound` instead. */
    export type Outbound = AddMetadataToAccountRequest$Outbound;
}

/** @internal */
export const AddMetadataToAccountResponse$inboundSchema: z.ZodType<
    AddMetadataToAccountResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type AddMetadataToAccountResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const AddMetadataToAccountResponse$outboundSchema: z.ZodType<
    AddMetadataToAccountResponse$Outbound,
    z.ZodTypeDef,
    AddMetadataToAccountResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddMetadataToAccountResponse$ {
    /** @deprecated use `AddMetadataToAccountResponse$inboundSchema` instead. */
    export const inboundSchema = AddMetadataToAccountResponse$inboundSchema;
    /** @deprecated use `AddMetadataToAccountResponse$outboundSchema` instead. */
    export const outboundSchema = AddMetadataToAccountResponse$outboundSchema;
    /** @deprecated use `AddMetadataToAccountResponse$Outbound` instead. */
    export type Outbound = AddMetadataToAccountResponse$Outbound;
}
