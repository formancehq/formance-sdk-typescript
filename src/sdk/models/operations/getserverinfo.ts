/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetServerInfoResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Server information
   */
  serverInfo?: shared.ServerInfo | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetServerInfoResponse$inboundSchema: z.ZodType<
  GetServerInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ServerInfo: shared.ServerInfo$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "ServerInfo": "serverInfo",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetServerInfoResponse$Outbound = {
  ContentType: string;
  ServerInfo?: shared.ServerInfo$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetServerInfoResponse$outboundSchema: z.ZodType<
  GetServerInfoResponse$Outbound,
  z.ZodTypeDef,
  GetServerInfoResponse
> = z.object({
  contentType: z.string(),
  serverInfo: shared.ServerInfo$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    serverInfo: "ServerInfo",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetServerInfoResponse$ {
  /** @deprecated use `GetServerInfoResponse$inboundSchema` instead. */
  export const inboundSchema = GetServerInfoResponse$inboundSchema;
  /** @deprecated use `GetServerInfoResponse$outboundSchema` instead. */
  export const outboundSchema = GetServerInfoResponse$outboundSchema;
  /** @deprecated use `GetServerInfoResponse$Outbound` instead. */
  export type Outbound = GetServerInfoResponse$Outbound;
}

export function getServerInfoResponseToJSON(
  getServerInfoResponse: GetServerInfoResponse,
): string {
  return JSON.stringify(
    GetServerInfoResponse$outboundSchema.parse(getServerInfoResponse),
  );
}

export function getServerInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetServerInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetServerInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetServerInfoResponse' from JSON`,
  );
}
