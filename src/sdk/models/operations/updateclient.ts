/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UpdateClientRequest = {
    updateClientRequest?: shared.UpdateClientRequest | undefined;
    /**
     * Client ID
     */
    clientId: string;
};

export type UpdateClientResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Updated client
     */
    updateClientResponse?: shared.UpdateClientResponse | undefined;
};

/** @internal */
export const UpdateClientRequest$inboundSchema: z.ZodType<
    UpdateClientRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        UpdateClientRequest: shared.UpdateClientRequest$inboundSchema.optional(),
        clientId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            UpdateClientRequest: "updateClientRequest",
        });
    });

/** @internal */
export type UpdateClientRequest$Outbound = {
    UpdateClientRequest?: shared.UpdateClientRequest$Outbound | undefined;
    clientId: string;
};

/** @internal */
export const UpdateClientRequest$outboundSchema: z.ZodType<
    UpdateClientRequest$Outbound,
    z.ZodTypeDef,
    UpdateClientRequest
> = z
    .object({
        updateClientRequest: shared.UpdateClientRequest$outboundSchema.optional(),
        clientId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            updateClientRequest: "UpdateClientRequest",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientRequest$ {
    /** @deprecated use `UpdateClientRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateClientRequest$inboundSchema;
    /** @deprecated use `UpdateClientRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateClientRequest$outboundSchema;
    /** @deprecated use `UpdateClientRequest$Outbound` instead. */
    export type Outbound = UpdateClientRequest$Outbound;
}

/** @internal */
export const UpdateClientResponse$inboundSchema: z.ZodType<
    UpdateClientResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        UpdateClientResponse: shared.UpdateClientResponse$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            UpdateClientResponse: "updateClientResponse",
        });
    });

/** @internal */
export type UpdateClientResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    UpdateClientResponse?: shared.UpdateClientResponse$Outbound | undefined;
};

/** @internal */
export const UpdateClientResponse$outboundSchema: z.ZodType<
    UpdateClientResponse$Outbound,
    z.ZodTypeDef,
    UpdateClientResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        updateClientResponse: shared.UpdateClientResponse$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            updateClientResponse: "UpdateClientResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientResponse$ {
    /** @deprecated use `UpdateClientResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateClientResponse$inboundSchema;
    /** @deprecated use `UpdateClientResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateClientResponse$outboundSchema;
    /** @deprecated use `UpdateClientResponse$Outbound` instead. */
    export type Outbound = UpdateClientResponse$Outbound;
}
