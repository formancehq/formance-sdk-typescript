/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type UpdateClientRequest = {
    /**
     * Client ID
     */
    clientId: string;
    updateClientRequest?: shared.UpdateClientRequest | undefined;
};

/** @internal */
export namespace UpdateClientRequest$ {
    export const inboundSchema: z.ZodType<UpdateClientRequest, z.ZodTypeDef, unknown> = z
        .object({
            clientId: z.string(),
            UpdateClientRequest: shared.UpdateClientRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                ...(v.UpdateClientRequest === undefined
                    ? null
                    : { updateClientRequest: v.UpdateClientRequest }),
            };
        });

    export type Outbound = {
        clientId: string;
        UpdateClientRequest?: shared.UpdateClientRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateClientRequest> = z
        .object({
            clientId: z.string(),
            updateClientRequest: shared.UpdateClientRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                ...(v.updateClientRequest === undefined
                    ? null
                    : { UpdateClientRequest: v.updateClientRequest }),
            };
        });
}
