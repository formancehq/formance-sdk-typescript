/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateClientRequest = {
  updateClientRequest?: shared.UpdateClientRequest | undefined;
  /**
   * Client ID
   */
  clientId: string;
};

export type UpdateClientResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Updated client
   */
  updateClientResponse?: shared.UpdateClientResponse | undefined;
};

/** @internal */
export const UpdateClientRequest$inboundSchema: z.ZodType<
  UpdateClientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  UpdateClientRequest: shared.UpdateClientRequest$inboundSchema.optional(),
  clientId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "UpdateClientRequest": "updateClientRequest",
  });
});

/** @internal */
export type UpdateClientRequest$Outbound = {
  UpdateClientRequest?: shared.UpdateClientRequest$Outbound | undefined;
  clientId: string;
};

/** @internal */
export const UpdateClientRequest$outboundSchema: z.ZodType<
  UpdateClientRequest$Outbound,
  z.ZodTypeDef,
  UpdateClientRequest
> = z.object({
  updateClientRequest: shared.UpdateClientRequest$outboundSchema.optional(),
  clientId: z.string(),
}).transform((v) => {
  return remap$(v, {
    updateClientRequest: "UpdateClientRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientRequest$ {
  /** @deprecated use `UpdateClientRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateClientRequest$inboundSchema;
  /** @deprecated use `UpdateClientRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateClientRequest$outboundSchema;
  /** @deprecated use `UpdateClientRequest$Outbound` instead. */
  export type Outbound = UpdateClientRequest$Outbound;
}

export function updateClientRequestToJSON(
  updateClientRequest: UpdateClientRequest,
): string {
  return JSON.stringify(
    UpdateClientRequest$outboundSchema.parse(updateClientRequest),
  );
}

export function updateClientRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClientRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClientRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClientRequest' from JSON`,
  );
}

/** @internal */
export const UpdateClientResponse$inboundSchema: z.ZodType<
  UpdateClientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  UpdateClientResponse: shared.UpdateClientResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "UpdateClientResponse": "updateClientResponse",
  });
});

/** @internal */
export type UpdateClientResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  UpdateClientResponse?: shared.UpdateClientResponse$Outbound | undefined;
};

/** @internal */
export const UpdateClientResponse$outboundSchema: z.ZodType<
  UpdateClientResponse$Outbound,
  z.ZodTypeDef,
  UpdateClientResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  updateClientResponse: shared.UpdateClientResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    updateClientResponse: "UpdateClientResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClientResponse$ {
  /** @deprecated use `UpdateClientResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateClientResponse$inboundSchema;
  /** @deprecated use `UpdateClientResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateClientResponse$outboundSchema;
  /** @deprecated use `UpdateClientResponse$Outbound` instead. */
  export type Outbound = UpdateClientResponse$Outbound;
}

export function updateClientResponseToJSON(
  updateClientResponse: UpdateClientResponse,
): string {
  return JSON.stringify(
    UpdateClientResponse$outboundSchema.parse(updateClientResponse),
  );
}

export function updateClientResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClientResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClientResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClientResponse' from JSON`,
  );
}
