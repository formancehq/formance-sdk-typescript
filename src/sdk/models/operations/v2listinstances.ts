/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2ListInstancesRequest = {
    /**
     * Parameter used in pagination requests.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * A workflow id
     */
    workflowID?: string | undefined;
    /**
     * Filter running instances
     */
    running?: boolean | undefined;
};

/** @internal */
export namespace V2ListInstancesRequest$ {
    export const inboundSchema: z.ZodType<V2ListInstancesRequest, z.ZodTypeDef, unknown> = z
        .object({
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
            workflowID: z.string().optional(),
            running: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.workflowID === undefined ? null : { workflowID: v.workflowID }),
                ...(v.running === undefined ? null : { running: v.running }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        pageSize?: number | undefined;
        workflowID?: string | undefined;
        running?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ListInstancesRequest> = z
        .object({
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
            workflowID: z.string().optional(),
            running: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.workflowID === undefined ? null : { workflowID: v.workflowID }),
                ...(v.running === undefined ? null : { running: v.running }),
            };
        });
}
