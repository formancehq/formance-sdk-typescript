/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type V2ListInstancesRequest = {
    /**
     * Filter running instances
     */
    running?: boolean | undefined;
    /**
     * A workflow id
     */
    workflowID?: string | undefined;
};

export type V2ListInstancesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of workflow instances
     */
    v2ListRunsResponse?: shared.V2ListRunsResponse | undefined;
};

/** @internal */
export namespace V2ListInstancesRequest$ {
    export type Inbound = {
        running?: boolean | undefined;
        workflowID?: string | undefined;
    };

    export const inboundSchema: z.ZodType<V2ListInstancesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            running: z.boolean().optional(),
            workflowID: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.running === undefined ? null : { running: v.running }),
                ...(v.workflowID === undefined ? null : { workflowID: v.workflowID }),
            };
        });

    export type Outbound = {
        running?: boolean | undefined;
        workflowID?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ListInstancesRequest> = z
        .object({
            running: z.boolean().optional(),
            workflowID: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.running === undefined ? null : { running: v.running }),
                ...(v.workflowID === undefined ? null : { workflowID: v.workflowID }),
            };
        });
}

/** @internal */
export namespace V2ListInstancesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        V2ListRunsResponse?: shared.V2ListRunsResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<V2ListInstancesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            V2ListRunsResponse: shared.V2ListRunsResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.V2ListRunsResponse === undefined
                    ? null
                    : { v2ListRunsResponse: v.V2ListRunsResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2ListRunsResponse?: shared.V2ListRunsResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ListInstancesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            v2ListRunsResponse: shared.V2ListRunsResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.v2ListRunsResponse === undefined
                    ? null
                    : { V2ListRunsResponse: v.v2ListRunsResponse }),
            };
        });
}
