/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3GetPaymentInitiationRequest = {
  /**
   * The payment initiation ID
   */
  paymentInitiationID: string;
};

export type V3GetPaymentInitiationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3GetPaymentInitiationResponse?:
    | shared.V3GetPaymentInitiationResponse
    | undefined;
};

/** @internal */
export const V3GetPaymentInitiationRequest$inboundSchema: z.ZodType<
  V3GetPaymentInitiationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentInitiationID: z.string(),
});

/** @internal */
export type V3GetPaymentInitiationRequest$Outbound = {
  paymentInitiationID: string;
};

/** @internal */
export const V3GetPaymentInitiationRequest$outboundSchema: z.ZodType<
  V3GetPaymentInitiationRequest$Outbound,
  z.ZodTypeDef,
  V3GetPaymentInitiationRequest
> = z.object({
  paymentInitiationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetPaymentInitiationRequest$ {
  /** @deprecated use `V3GetPaymentInitiationRequest$inboundSchema` instead. */
  export const inboundSchema = V3GetPaymentInitiationRequest$inboundSchema;
  /** @deprecated use `V3GetPaymentInitiationRequest$outboundSchema` instead. */
  export const outboundSchema = V3GetPaymentInitiationRequest$outboundSchema;
  /** @deprecated use `V3GetPaymentInitiationRequest$Outbound` instead. */
  export type Outbound = V3GetPaymentInitiationRequest$Outbound;
}

export function v3GetPaymentInitiationRequestToJSON(
  v3GetPaymentInitiationRequest: V3GetPaymentInitiationRequest,
): string {
  return JSON.stringify(
    V3GetPaymentInitiationRequest$outboundSchema.parse(
      v3GetPaymentInitiationRequest,
    ),
  );
}

export function v3GetPaymentInitiationRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GetPaymentInitiationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetPaymentInitiationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetPaymentInitiationRequest' from JSON`,
  );
}

/** @internal */
export const V3GetPaymentInitiationResponse$inboundSchema: z.ZodType<
  V3GetPaymentInitiationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3GetPaymentInitiationResponse: shared
    .V3GetPaymentInitiationResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3GetPaymentInitiationResponse": "v3GetPaymentInitiationResponse",
  });
});

/** @internal */
export type V3GetPaymentInitiationResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3GetPaymentInitiationResponse?:
    | shared.V3GetPaymentInitiationResponse$Outbound
    | undefined;
};

/** @internal */
export const V3GetPaymentInitiationResponse$outboundSchema: z.ZodType<
  V3GetPaymentInitiationResponse$Outbound,
  z.ZodTypeDef,
  V3GetPaymentInitiationResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3GetPaymentInitiationResponse: shared
    .V3GetPaymentInitiationResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3GetPaymentInitiationResponse: "V3GetPaymentInitiationResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetPaymentInitiationResponse$ {
  /** @deprecated use `V3GetPaymentInitiationResponse$inboundSchema` instead. */
  export const inboundSchema = V3GetPaymentInitiationResponse$inboundSchema;
  /** @deprecated use `V3GetPaymentInitiationResponse$outboundSchema` instead. */
  export const outboundSchema = V3GetPaymentInitiationResponse$outboundSchema;
  /** @deprecated use `V3GetPaymentInitiationResponse$Outbound` instead. */
  export type Outbound = V3GetPaymentInitiationResponse$Outbound;
}

export function v3GetPaymentInitiationResponseToJSON(
  v3GetPaymentInitiationResponse: V3GetPaymentInitiationResponse,
): string {
  return JSON.stringify(
    V3GetPaymentInitiationResponse$outboundSchema.parse(
      v3GetPaymentInitiationResponse,
    ),
  );
}

export function v3GetPaymentInitiationResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GetPaymentInitiationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetPaymentInitiationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetPaymentInitiationResponse' from JSON`,
  );
}
