/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type CreditWalletRequest = {
    creditWalletRequest?: shared.CreditWalletRequest | undefined;
    id: string;
};

export type CreditWalletResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    walletsErrorResponse?: shared.WalletsErrorResponse | undefined;
};

/** @internal */
export namespace CreditWalletRequest$ {
    export type Inbound = {
        CreditWalletRequest?: shared.CreditWalletRequest$.Inbound | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<CreditWalletRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CreditWalletRequest: shared.CreditWalletRequest$.inboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.CreditWalletRequest === undefined
                    ? null
                    : { creditWalletRequest: v.CreditWalletRequest }),
                id: v.id,
            };
        });

    export type Outbound = {
        CreditWalletRequest?: shared.CreditWalletRequest$.Outbound | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreditWalletRequest> = z
        .object({
            creditWalletRequest: shared.CreditWalletRequest$.outboundSchema.optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.creditWalletRequest === undefined
                    ? null
                    : { CreditWalletRequest: v.creditWalletRequest }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace CreditWalletResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        walletsErrorResponse?: shared.WalletsErrorResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreditWalletResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            walletsErrorResponse: shared.WalletsErrorResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.walletsErrorResponse === undefined
                    ? null
                    : { walletsErrorResponse: v.walletsErrorResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        walletsErrorResponse?: shared.WalletsErrorResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreditWalletResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            walletsErrorResponse: shared.WalletsErrorResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.walletsErrorResponse === undefined
                    ? null
                    : { walletsErrorResponse: v.walletsErrorResponse }),
            };
        });
}
