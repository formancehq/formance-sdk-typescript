/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetHoldsRequest = {
    /**
     * The maximum number of results to return per page
     */
    pageSize?: number | undefined;
    /**
     * The wallet to filter on
     */
    walletID?: string | undefined;
    /**
     * Filter holds by metadata key value pairs. Nested objects can be used as seen in the example below.
     */
    metadata?: Record<string, string> | undefined;
    /**
     * Parameter used in pagination requests.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when the pagination token is set.
     *
     */
    cursor?: string | undefined;
};

/** @internal */
export namespace GetHoldsRequest$ {
    export const inboundSchema: z.ZodType<GetHoldsRequest, z.ZodTypeDef, unknown> = z
        .object({
            pageSize: z.number().int().default(15),
            walletID: z.string().optional(),
            metadata: z.record(z.string()).optional(),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                pageSize: v.pageSize,
                ...(v.walletID === undefined ? null : { walletID: v.walletID }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });

    export type Outbound = {
        pageSize: number;
        walletID?: string | undefined;
        metadata?: Record<string, string> | undefined;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetHoldsRequest> = z
        .object({
            pageSize: z.number().int().default(15),
            walletID: z.string().optional(),
            metadata: z.record(z.string()).optional(),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                pageSize: v.pageSize,
                ...(v.walletID === undefined ? null : { walletID: v.walletID }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });
}
