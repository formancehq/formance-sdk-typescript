/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetHoldsRequest = {
    /**
     * Parameter used in pagination requests.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when the pagination token is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Filter holds by metadata key value pairs. Nested objects can be used as seen in the example below.
     */
    metadata?: { [k: string]: string } | undefined;
    /**
     * The maximum number of results to return per page
     */
    pageSize?: number | undefined;
    /**
     * The wallet to filter on
     */
    walletID?: string | undefined;
};

export type GetHoldsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Holds
     */
    getHoldsResponse?: shared.GetHoldsResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const GetHoldsRequest$inboundSchema: z.ZodType<GetHoldsRequest, z.ZodTypeDef, unknown> =
    z.object({
        cursor: z.string().optional(),
        metadata: z.record(z.string()).optional(),
        pageSize: z.number().int().default(15),
        walletID: z.string().optional(),
    });

/** @internal */
export type GetHoldsRequest$Outbound = {
    cursor?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    pageSize: number;
    walletID?: string | undefined;
};

/** @internal */
export const GetHoldsRequest$outboundSchema: z.ZodType<
    GetHoldsRequest$Outbound,
    z.ZodTypeDef,
    GetHoldsRequest
> = z.object({
    cursor: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    pageSize: z.number().int().default(15),
    walletID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHoldsRequest$ {
    /** @deprecated use `GetHoldsRequest$inboundSchema` instead. */
    export const inboundSchema = GetHoldsRequest$inboundSchema;
    /** @deprecated use `GetHoldsRequest$outboundSchema` instead. */
    export const outboundSchema = GetHoldsRequest$outboundSchema;
    /** @deprecated use `GetHoldsRequest$Outbound` instead. */
    export type Outbound = GetHoldsRequest$Outbound;
}

/** @internal */
export const GetHoldsResponse$inboundSchema: z.ZodType<GetHoldsResponse, z.ZodTypeDef, unknown> = z
    .object({
        ContentType: z.string(),
        GetHoldsResponse: shared.GetHoldsResponse$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            GetHoldsResponse: "getHoldsResponse",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetHoldsResponse$Outbound = {
    ContentType: string;
    GetHoldsResponse?: shared.GetHoldsResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetHoldsResponse$outboundSchema: z.ZodType<
    GetHoldsResponse$Outbound,
    z.ZodTypeDef,
    GetHoldsResponse
> = z
    .object({
        contentType: z.string(),
        getHoldsResponse: shared.GetHoldsResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            getHoldsResponse: "GetHoldsResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHoldsResponse$ {
    /** @deprecated use `GetHoldsResponse$inboundSchema` instead. */
    export const inboundSchema = GetHoldsResponse$inboundSchema;
    /** @deprecated use `GetHoldsResponse$outboundSchema` instead. */
    export const outboundSchema = GetHoldsResponse$outboundSchema;
    /** @deprecated use `GetHoldsResponse$Outbound` instead. */
    export type Outbound = GetHoldsResponse$Outbound;
}
