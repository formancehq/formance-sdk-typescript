/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2ListAccountsRequest = {
  /**
   * Parameter used in pagination requests. Maximum page size is set to 15.
   *
   * @remarks
   * Set to the value of next for the next page of results.
   * Set to the value of previous for the previous page of results.
   * No other parameters can be set when this parameter is set.
   */
  cursor?: string | undefined;
  expand?: string | undefined;
  /**
   * Name of the ledger.
   */
  ledger: string;
  /**
   * The maximum number of results to return per page.
   *
   * @remarks
   */
  pageSize?: number | undefined;
  pit?: Date | undefined;
  query?: { [k: string]: any } | undefined;
  /**
   * Sort results using a field name and order (ascending or descending).
   *
   * @remarks
   * Format: `<field>:<order>`, where `<field>` is the field name and `<order>` is either `asc` or `desc`.
   */
  sort?: string | undefined;
};

export type V2ListAccountsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v2AccountsCursorResponse?: shared.V2AccountsCursorResponse | undefined;
};

/** @internal */
export const V2ListAccountsRequest$inboundSchema: z.ZodType<
  V2ListAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  expand: z.string().optional(),
  ledger: z.string(),
  pageSize: z.number().int().optional(),
  pit: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  query: z.record(z.any()).optional(),
  sort: z.string().optional(),
});

/** @internal */
export type V2ListAccountsRequest$Outbound = {
  cursor?: string | undefined;
  expand?: string | undefined;
  ledger: string;
  pageSize?: number | undefined;
  pit?: string | undefined;
  query?: { [k: string]: any } | undefined;
  sort?: string | undefined;
};

/** @internal */
export const V2ListAccountsRequest$outboundSchema: z.ZodType<
  V2ListAccountsRequest$Outbound,
  z.ZodTypeDef,
  V2ListAccountsRequest
> = z.object({
  cursor: z.string().optional(),
  expand: z.string().optional(),
  ledger: z.string(),
  pageSize: z.number().int().optional(),
  pit: z.date().transform(v => v.toISOString()).optional(),
  query: z.record(z.any()).optional(),
  sort: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListAccountsRequest$ {
  /** @deprecated use `V2ListAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = V2ListAccountsRequest$inboundSchema;
  /** @deprecated use `V2ListAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = V2ListAccountsRequest$outboundSchema;
  /** @deprecated use `V2ListAccountsRequest$Outbound` instead. */
  export type Outbound = V2ListAccountsRequest$Outbound;
}

export function v2ListAccountsRequestToJSON(
  v2ListAccountsRequest: V2ListAccountsRequest,
): string {
  return JSON.stringify(
    V2ListAccountsRequest$outboundSchema.parse(v2ListAccountsRequest),
  );
}

export function v2ListAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2ListAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListAccountsRequest' from JSON`,
  );
}

/** @internal */
export const V2ListAccountsResponse$inboundSchema: z.ZodType<
  V2ListAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2AccountsCursorResponse: shared.V2AccountsCursorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2AccountsCursorResponse": "v2AccountsCursorResponse",
  });
});

/** @internal */
export type V2ListAccountsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2AccountsCursorResponse?:
    | shared.V2AccountsCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V2ListAccountsResponse$outboundSchema: z.ZodType<
  V2ListAccountsResponse$Outbound,
  z.ZodTypeDef,
  V2ListAccountsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2AccountsCursorResponse: shared.V2AccountsCursorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2AccountsCursorResponse: "V2AccountsCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListAccountsResponse$ {
  /** @deprecated use `V2ListAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = V2ListAccountsResponse$inboundSchema;
  /** @deprecated use `V2ListAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = V2ListAccountsResponse$outboundSchema;
  /** @deprecated use `V2ListAccountsResponse$Outbound` instead. */
  export type Outbound = V2ListAccountsResponse$Outbound;
}

export function v2ListAccountsResponseToJSON(
  v2ListAccountsResponse: V2ListAccountsResponse,
): string {
  return JSON.stringify(
    V2ListAccountsResponse$outboundSchema.parse(v2ListAccountsResponse),
  );
}

export function v2ListAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2ListAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListAccountsResponse' from JSON`,
  );
}
