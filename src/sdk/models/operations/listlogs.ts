/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ListLogsRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Pagination cursor, will return the logs after a given ID. (in descending order).
     */
    after?: string | undefined;
    /**
     * Filter transactions that occurred after this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
     *
     */
    startTime?: Date | undefined;
    /**
     * Filter transactions that occurred before this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
     *
     */
    endTime?: Date | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 1000.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
};

/** @internal */
export namespace ListLogsRequest$ {
    export const inboundSchema: z.ZodType<ListLogsRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            pageSize: z.number().int().default(15),
            after: z.string().optional(),
            startTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            endTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                pageSize: v.pageSize,
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });

    export type Outbound = {
        ledger: string;
        pageSize: number;
        after?: string | undefined;
        startTime?: string | undefined;
        endTime?: string | undefined;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListLogsRequest> = z
        .object({
            ledger: z.string(),
            pageSize: z.number().int().default(15),
            after: z.string().optional(),
            startTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            endTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                pageSize: v.pageSize,
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });
}
