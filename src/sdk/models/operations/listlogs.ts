/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type ListLogsRequest = {
    /**
     * Pagination cursor, will return the logs after a given ID. (in descending order).
     */
    after?: string | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 1000.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Filter transactions that occurred before this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
     *
     */
    endTime?: Date | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Filter transactions that occurred after this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
     *
     */
    startTime?: Date | undefined;
};

export type ListLogsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    logsCursorResponse?: shared.LogsCursorResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const ListLogsRequest$inboundSchema: z.ZodType<ListLogsRequest, z.ZodTypeDef, unknown> =
    z.object({
        after: z.string().optional(),
        cursor: z.string().optional(),
        endTime: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        ledger: z.string(),
        pageSize: z.number().int().default(15),
        startTime: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

/** @internal */
export type ListLogsRequest$Outbound = {
    after?: string | undefined;
    cursor?: string | undefined;
    endTime?: string | undefined;
    ledger: string;
    pageSize: number;
    startTime?: string | undefined;
};

/** @internal */
export const ListLogsRequest$outboundSchema: z.ZodType<
    ListLogsRequest$Outbound,
    z.ZodTypeDef,
    ListLogsRequest
> = z.object({
    after: z.string().optional(),
    cursor: z.string().optional(),
    endTime: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
    ledger: z.string(),
    pageSize: z.number().int().default(15),
    startTime: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLogsRequest$ {
    /** @deprecated use `ListLogsRequest$inboundSchema` instead. */
    export const inboundSchema = ListLogsRequest$inboundSchema;
    /** @deprecated use `ListLogsRequest$outboundSchema` instead. */
    export const outboundSchema = ListLogsRequest$outboundSchema;
    /** @deprecated use `ListLogsRequest$Outbound` instead. */
    export type Outbound = ListLogsRequest$Outbound;
}

/** @internal */
export const ListLogsResponse$inboundSchema: z.ZodType<ListLogsResponse, z.ZodTypeDef, unknown> = z
    .object({
        ContentType: z.string(),
        LogsCursorResponse: shared.LogsCursorResponse$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            LogsCursorResponse: "logsCursorResponse",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type ListLogsResponse$Outbound = {
    ContentType: string;
    LogsCursorResponse?: shared.LogsCursorResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const ListLogsResponse$outboundSchema: z.ZodType<
    ListLogsResponse$Outbound,
    z.ZodTypeDef,
    ListLogsResponse
> = z
    .object({
        contentType: z.string(),
        logsCursorResponse: shared.LogsCursorResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            logsCursorResponse: "LogsCursorResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLogsResponse$ {
    /** @deprecated use `ListLogsResponse$inboundSchema` instead. */
    export const inboundSchema = ListLogsResponse$inboundSchema;
    /** @deprecated use `ListLogsResponse$outboundSchema` instead. */
    export const outboundSchema = ListLogsResponse$outboundSchema;
    /** @deprecated use `ListLogsResponse$Outbound` instead. */
    export type Outbound = ListLogsResponse$Outbound;
}
