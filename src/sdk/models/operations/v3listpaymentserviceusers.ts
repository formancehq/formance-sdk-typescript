/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ListPaymentServiceUsersRequest = {
  /**
   * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
   *
   * @remarks
   */
  cursor?: string | undefined;
  /**
   * The number of items to return
   */
  pageSize?: number | undefined;
};

export type V3ListPaymentServiceUsersResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3PaymentServiceUsersCursorResponse?:
    | shared.V3PaymentServiceUsersCursorResponse
    | undefined;
};

/** @internal */
export const V3ListPaymentServiceUsersRequest$inboundSchema: z.ZodType<
  V3ListPaymentServiceUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
});

/** @internal */
export type V3ListPaymentServiceUsersRequest$Outbound = {
  cursor?: string | undefined;
  pageSize?: number | undefined;
};

/** @internal */
export const V3ListPaymentServiceUsersRequest$outboundSchema: z.ZodType<
  V3ListPaymentServiceUsersRequest$Outbound,
  z.ZodTypeDef,
  V3ListPaymentServiceUsersRequest
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentServiceUsersRequest$ {
  /** @deprecated use `V3ListPaymentServiceUsersRequest$inboundSchema` instead. */
  export const inboundSchema = V3ListPaymentServiceUsersRequest$inboundSchema;
  /** @deprecated use `V3ListPaymentServiceUsersRequest$outboundSchema` instead. */
  export const outboundSchema = V3ListPaymentServiceUsersRequest$outboundSchema;
  /** @deprecated use `V3ListPaymentServiceUsersRequest$Outbound` instead. */
  export type Outbound = V3ListPaymentServiceUsersRequest$Outbound;
}

export function v3ListPaymentServiceUsersRequestToJSON(
  v3ListPaymentServiceUsersRequest: V3ListPaymentServiceUsersRequest,
): string {
  return JSON.stringify(
    V3ListPaymentServiceUsersRequest$outboundSchema.parse(
      v3ListPaymentServiceUsersRequest,
    ),
  );
}

export function v3ListPaymentServiceUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ListPaymentServiceUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListPaymentServiceUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListPaymentServiceUsersRequest' from JSON`,
  );
}

/** @internal */
export const V3ListPaymentServiceUsersResponse$inboundSchema: z.ZodType<
  V3ListPaymentServiceUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3PaymentServiceUsersCursorResponse: shared
    .V3PaymentServiceUsersCursorResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3PaymentServiceUsersCursorResponse":
      "v3PaymentServiceUsersCursorResponse",
  });
});

/** @internal */
export type V3ListPaymentServiceUsersResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3PaymentServiceUsersCursorResponse?:
    | shared.V3PaymentServiceUsersCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ListPaymentServiceUsersResponse$outboundSchema: z.ZodType<
  V3ListPaymentServiceUsersResponse$Outbound,
  z.ZodTypeDef,
  V3ListPaymentServiceUsersResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3PaymentServiceUsersCursorResponse: shared
    .V3PaymentServiceUsersCursorResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3PaymentServiceUsersCursorResponse: "V3PaymentServiceUsersCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentServiceUsersResponse$ {
  /** @deprecated use `V3ListPaymentServiceUsersResponse$inboundSchema` instead. */
  export const inboundSchema = V3ListPaymentServiceUsersResponse$inboundSchema;
  /** @deprecated use `V3ListPaymentServiceUsersResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ListPaymentServiceUsersResponse$outboundSchema;
  /** @deprecated use `V3ListPaymentServiceUsersResponse$Outbound` instead. */
  export type Outbound = V3ListPaymentServiceUsersResponse$Outbound;
}

export function v3ListPaymentServiceUsersResponseToJSON(
  v3ListPaymentServiceUsersResponse: V3ListPaymentServiceUsersResponse,
): string {
  return JSON.stringify(
    V3ListPaymentServiceUsersResponse$outboundSchema.parse(
      v3ListPaymentServiceUsersResponse,
    ),
  );
}

export function v3ListPaymentServiceUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ListPaymentServiceUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListPaymentServiceUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListPaymentServiceUsersResponse' from JSON`,
  );
}
