/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type V2GetBalancesAggregatedRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    pit?: Date | undefined;
    query?: { [k: string]: any } | undefined;
    /**
     * Use insertion date instead of effective date
     */
    useInsertionDate?: boolean | undefined;
};

export type V2GetBalancesAggregatedResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2AggregateBalancesResponse?: shared.V2AggregateBalancesResponse | undefined;
};

/** @internal */
export namespace V2GetBalancesAggregatedRequest$ {
    export const inboundSchema: z.ZodType<V2GetBalancesAggregatedRequest, z.ZodTypeDef, unknown> =
        z.object({
            ledger: z.string(),
            pit: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            query: z.record(z.any()).optional(),
            useInsertionDate: z.boolean().optional(),
        });

    export type Outbound = {
        ledger: string;
        pit?: string | undefined;
        query?: { [k: string]: any } | undefined;
        useInsertionDate?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetBalancesAggregatedRequest> =
        z.object({
            ledger: z.string(),
            pit: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            query: z.record(z.any()).optional(),
            useInsertionDate: z.boolean().optional(),
        });
}

/** @internal */
export namespace V2GetBalancesAggregatedResponse$ {
    export const inboundSchema: z.ZodType<V2GetBalancesAggregatedResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                V2AggregateBalancesResponse:
                    shared.V2AggregateBalancesResponse$.inboundSchema.optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    ContentType: "contentType",
                    StatusCode: "statusCode",
                    RawResponse: "rawResponse",
                    V2AggregateBalancesResponse: "v2AggregateBalancesResponse",
                });
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2AggregateBalancesResponse?: shared.V2AggregateBalancesResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2GetBalancesAggregatedResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            v2AggregateBalancesResponse:
                shared.V2AggregateBalancesResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                v2AggregateBalancesResponse: "V2AggregateBalancesResponse",
            });
        });
}
