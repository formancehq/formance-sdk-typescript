/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2CreatePipelineRequest = {
  v2CreatePipelineRequest?: shared.V2CreatePipelineRequest | undefined;
  /**
   * Name of the ledger.
   */
  ledger: string;
};

/**
 * Created ipeline
 */
export type V2CreatePipelineResponseBody = {
  data: shared.V2Pipeline;
};

export type V2CreatePipelineResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Created ipeline
   */
  object?: V2CreatePipelineResponseBody | undefined;
};

/** @internal */
export const V2CreatePipelineRequest$inboundSchema: z.ZodType<
  V2CreatePipelineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  V2CreatePipelineRequest: shared.V2CreatePipelineRequest$inboundSchema
    .optional(),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    "V2CreatePipelineRequest": "v2CreatePipelineRequest",
  });
});

/** @internal */
export type V2CreatePipelineRequest$Outbound = {
  V2CreatePipelineRequest?: shared.V2CreatePipelineRequest$Outbound | undefined;
  ledger: string;
};

/** @internal */
export const V2CreatePipelineRequest$outboundSchema: z.ZodType<
  V2CreatePipelineRequest$Outbound,
  z.ZodTypeDef,
  V2CreatePipelineRequest
> = z.object({
  v2CreatePipelineRequest: shared.V2CreatePipelineRequest$outboundSchema
    .optional(),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    v2CreatePipelineRequest: "V2CreatePipelineRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreatePipelineRequest$ {
  /** @deprecated use `V2CreatePipelineRequest$inboundSchema` instead. */
  export const inboundSchema = V2CreatePipelineRequest$inboundSchema;
  /** @deprecated use `V2CreatePipelineRequest$outboundSchema` instead. */
  export const outboundSchema = V2CreatePipelineRequest$outboundSchema;
  /** @deprecated use `V2CreatePipelineRequest$Outbound` instead. */
  export type Outbound = V2CreatePipelineRequest$Outbound;
}

export function v2CreatePipelineRequestToJSON(
  v2CreatePipelineRequest: V2CreatePipelineRequest,
): string {
  return JSON.stringify(
    V2CreatePipelineRequest$outboundSchema.parse(v2CreatePipelineRequest),
  );
}

export function v2CreatePipelineRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2CreatePipelineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreatePipelineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreatePipelineRequest' from JSON`,
  );
}

/** @internal */
export const V2CreatePipelineResponseBody$inboundSchema: z.ZodType<
  V2CreatePipelineResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: shared.V2Pipeline$inboundSchema,
});

/** @internal */
export type V2CreatePipelineResponseBody$Outbound = {
  data: shared.V2Pipeline$Outbound;
};

/** @internal */
export const V2CreatePipelineResponseBody$outboundSchema: z.ZodType<
  V2CreatePipelineResponseBody$Outbound,
  z.ZodTypeDef,
  V2CreatePipelineResponseBody
> = z.object({
  data: shared.V2Pipeline$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreatePipelineResponseBody$ {
  /** @deprecated use `V2CreatePipelineResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2CreatePipelineResponseBody$inboundSchema;
  /** @deprecated use `V2CreatePipelineResponseBody$outboundSchema` instead. */
  export const outboundSchema = V2CreatePipelineResponseBody$outboundSchema;
  /** @deprecated use `V2CreatePipelineResponseBody$Outbound` instead. */
  export type Outbound = V2CreatePipelineResponseBody$Outbound;
}

export function v2CreatePipelineResponseBodyToJSON(
  v2CreatePipelineResponseBody: V2CreatePipelineResponseBody,
): string {
  return JSON.stringify(
    V2CreatePipelineResponseBody$outboundSchema.parse(
      v2CreatePipelineResponseBody,
    ),
  );
}

export function v2CreatePipelineResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2CreatePipelineResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreatePipelineResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreatePipelineResponseBody' from JSON`,
  );
}

/** @internal */
export const V2CreatePipelineResponse$inboundSchema: z.ZodType<
  V2CreatePipelineResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => V2CreatePipelineResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2CreatePipelineResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: V2CreatePipelineResponseBody$Outbound | undefined;
};

/** @internal */
export const V2CreatePipelineResponse$outboundSchema: z.ZodType<
  V2CreatePipelineResponse$Outbound,
  z.ZodTypeDef,
  V2CreatePipelineResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => V2CreatePipelineResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreatePipelineResponse$ {
  /** @deprecated use `V2CreatePipelineResponse$inboundSchema` instead. */
  export const inboundSchema = V2CreatePipelineResponse$inboundSchema;
  /** @deprecated use `V2CreatePipelineResponse$outboundSchema` instead. */
  export const outboundSchema = V2CreatePipelineResponse$outboundSchema;
  /** @deprecated use `V2CreatePipelineResponse$Outbound` instead. */
  export type Outbound = V2CreatePipelineResponse$Outbound;
}

export function v2CreatePipelineResponseToJSON(
  v2CreatePipelineResponse: V2CreatePipelineResponse,
): string {
  return JSON.stringify(
    V2CreatePipelineResponse$outboundSchema.parse(v2CreatePipelineResponse),
  );
}

export function v2CreatePipelineResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2CreatePipelineResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreatePipelineResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreatePipelineResponse' from JSON`,
  );
}
