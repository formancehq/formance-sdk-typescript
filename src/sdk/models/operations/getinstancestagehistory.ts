/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

export type GetInstanceStageHistoryRequest = {
    /**
     * The instance id
     */
    instanceID: string;
    /**
     * The stage number
     */
    number: number;
};

export type GetInstanceStageHistoryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * General error
     */
    error?: shared.ErrorT | undefined;
    /**
     * The workflow instance stage history
     */
    getWorkflowInstanceHistoryStageResponse?:
        | shared.GetWorkflowInstanceHistoryStageResponse
        | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetInstanceStageHistoryRequest$ {
    export type Inbound = {
        instanceID: string;
        number: number;
    };

    export const inboundSchema: z.ZodType<GetInstanceStageHistoryRequest, z.ZodTypeDef, Inbound> = z
        .object({
            instanceID: z.string(),
            number: z.number().int(),
        })
        .transform((v) => {
            return {
                instanceID: v.instanceID,
                number: v.number,
            };
        });

    export type Outbound = {
        instanceID: string;
        number: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInstanceStageHistoryRequest> =
        z
            .object({
                instanceID: z.string(),
                number: z.number().int(),
            })
            .transform((v) => {
                return {
                    instanceID: v.instanceID,
                    number: v.number,
                };
            });
}

/** @internal */
export namespace GetInstanceStageHistoryResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Inbound | undefined;
        GetWorkflowInstanceHistoryStageResponse?:
            | shared.GetWorkflowInstanceHistoryStageResponse$.Inbound
            | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetInstanceStageHistoryResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                Error: shared.ErrorT$.inboundSchema.optional(),
                GetWorkflowInstanceHistoryStageResponse:
                    shared.GetWorkflowInstanceHistoryStageResponse$.inboundSchema.optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    ...(v.Error === undefined ? null : { error: v.Error }),
                    ...(v.GetWorkflowInstanceHistoryStageResponse === undefined
                        ? null
                        : {
                              getWorkflowInstanceHistoryStageResponse:
                                  v.GetWorkflowInstanceHistoryStageResponse,
                          }),
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        Error?: shared.ErrorT$.Outbound | undefined;
        GetWorkflowInstanceHistoryStageResponse?:
            | shared.GetWorkflowInstanceHistoryStageResponse$.Outbound
            | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetInstanceStageHistoryResponse
    > = z
        .object({
            contentType: z.string(),
            error: shared.ErrorT$.outboundSchema.optional(),
            getWorkflowInstanceHistoryStageResponse:
                shared.GetWorkflowInstanceHistoryStageResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                ...(v.getWorkflowInstanceHistoryStageResponse === undefined
                    ? null
                    : {
                          GetWorkflowInstanceHistoryStageResponse:
                              v.getWorkflowInstanceHistoryStageResponse,
                      }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
