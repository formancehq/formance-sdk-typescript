/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3CreatePoolResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Created
   */
  v3CreatePoolResponse?: shared.V3CreatePoolResponse | undefined;
};

/** @internal */
export const V3CreatePoolResponse$inboundSchema: z.ZodType<
  V3CreatePoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3CreatePoolResponse: shared.V3CreatePoolResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3CreatePoolResponse": "v3CreatePoolResponse",
  });
});

/** @internal */
export type V3CreatePoolResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3CreatePoolResponse?: shared.V3CreatePoolResponse$Outbound | undefined;
};

/** @internal */
export const V3CreatePoolResponse$outboundSchema: z.ZodType<
  V3CreatePoolResponse$Outbound,
  z.ZodTypeDef,
  V3CreatePoolResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3CreatePoolResponse: shared.V3CreatePoolResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3CreatePoolResponse: "V3CreatePoolResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CreatePoolResponse$ {
  /** @deprecated use `V3CreatePoolResponse$inboundSchema` instead. */
  export const inboundSchema = V3CreatePoolResponse$inboundSchema;
  /** @deprecated use `V3CreatePoolResponse$outboundSchema` instead. */
  export const outboundSchema = V3CreatePoolResponse$outboundSchema;
  /** @deprecated use `V3CreatePoolResponse$Outbound` instead. */
  export type Outbound = V3CreatePoolResponse$Outbound;
}

export function v3CreatePoolResponseToJSON(
  v3CreatePoolResponse: V3CreatePoolResponse,
): string {
  return JSON.stringify(
    V3CreatePoolResponse$outboundSchema.parse(v3CreatePoolResponse),
  );
}

export function v3CreatePoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3CreatePoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CreatePoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CreatePoolResponse' from JSON`,
  );
}
