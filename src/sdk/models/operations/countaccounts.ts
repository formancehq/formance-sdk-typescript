/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CountAccountsRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Filter accounts by address pattern (regular expression placed between ^ and $).
     */
    address?: string | undefined;
    /**
     * Filter accounts by metadata key value pairs. The filter can be used like this metadata[key]=value1&metadata[a.nested.key]=value2
     */
    metadata?: Record<string, any> | undefined;
};

export type CountAccountsResponse = {
    headers: Record<string, Array<string>>;
};

/** @internal */
export namespace CountAccountsRequest$ {
    export const inboundSchema: z.ZodType<CountAccountsRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            address: z.string().optional(),
            metadata: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        ledger: string;
        address?: string | undefined;
        metadata?: Record<string, any> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountAccountsRequest> = z
        .object({
            ledger: z.string(),
            address: z.string().optional(),
            metadata: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace CountAccountsResponse$ {
    export const inboundSchema: z.ZodType<CountAccountsResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                headers: v.Headers,
            };
        });

    export type Outbound = {
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountAccountsResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                Headers: v.headers,
            };
        });
}
