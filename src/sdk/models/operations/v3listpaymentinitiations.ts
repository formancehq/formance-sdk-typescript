/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ListPaymentInitiationsRequest = {
  /**
   * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
   *
   * @remarks
   */
  cursor?: string | undefined;
  /**
   * The number of items to return
   */
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

export type V3ListPaymentInitiationsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3PaymentInitiationsCursorResponse?:
    | shared.V3PaymentInitiationsCursorResponse
    | undefined;
};

/** @internal */
export const V3ListPaymentInitiationsRequest$inboundSchema: z.ZodType<
  V3ListPaymentInitiationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/** @internal */
export type V3ListPaymentInitiationsRequest$Outbound = {
  cursor?: string | undefined;
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const V3ListPaymentInitiationsRequest$outboundSchema: z.ZodType<
  V3ListPaymentInitiationsRequest$Outbound,
  z.ZodTypeDef,
  V3ListPaymentInitiationsRequest
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentInitiationsRequest$ {
  /** @deprecated use `V3ListPaymentInitiationsRequest$inboundSchema` instead. */
  export const inboundSchema = V3ListPaymentInitiationsRequest$inboundSchema;
  /** @deprecated use `V3ListPaymentInitiationsRequest$outboundSchema` instead. */
  export const outboundSchema = V3ListPaymentInitiationsRequest$outboundSchema;
  /** @deprecated use `V3ListPaymentInitiationsRequest$Outbound` instead. */
  export type Outbound = V3ListPaymentInitiationsRequest$Outbound;
}

export function v3ListPaymentInitiationsRequestToJSON(
  v3ListPaymentInitiationsRequest: V3ListPaymentInitiationsRequest,
): string {
  return JSON.stringify(
    V3ListPaymentInitiationsRequest$outboundSchema.parse(
      v3ListPaymentInitiationsRequest,
    ),
  );
}

export function v3ListPaymentInitiationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ListPaymentInitiationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListPaymentInitiationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListPaymentInitiationsRequest' from JSON`,
  );
}

/** @internal */
export const V3ListPaymentInitiationsResponse$inboundSchema: z.ZodType<
  V3ListPaymentInitiationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3PaymentInitiationsCursorResponse: shared
    .V3PaymentInitiationsCursorResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3PaymentInitiationsCursorResponse": "v3PaymentInitiationsCursorResponse",
  });
});

/** @internal */
export type V3ListPaymentInitiationsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3PaymentInitiationsCursorResponse?:
    | shared.V3PaymentInitiationsCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ListPaymentInitiationsResponse$outboundSchema: z.ZodType<
  V3ListPaymentInitiationsResponse$Outbound,
  z.ZodTypeDef,
  V3ListPaymentInitiationsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3PaymentInitiationsCursorResponse: shared
    .V3PaymentInitiationsCursorResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3PaymentInitiationsCursorResponse: "V3PaymentInitiationsCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentInitiationsResponse$ {
  /** @deprecated use `V3ListPaymentInitiationsResponse$inboundSchema` instead. */
  export const inboundSchema = V3ListPaymentInitiationsResponse$inboundSchema;
  /** @deprecated use `V3ListPaymentInitiationsResponse$outboundSchema` instead. */
  export const outboundSchema = V3ListPaymentInitiationsResponse$outboundSchema;
  /** @deprecated use `V3ListPaymentInitiationsResponse$Outbound` instead. */
  export type Outbound = V3ListPaymentInitiationsResponse$Outbound;
}

export function v3ListPaymentInitiationsResponseToJSON(
  v3ListPaymentInitiationsResponse: V3ListPaymentInitiationsResponse,
): string {
  return JSON.stringify(
    V3ListPaymentInitiationsResponse$outboundSchema.parse(
      v3ListPaymentInitiationsResponse,
    ),
  );
}

export function v3ListPaymentInitiationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ListPaymentInitiationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListPaymentInitiationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListPaymentInitiationsResponse' from JSON`,
  );
}
