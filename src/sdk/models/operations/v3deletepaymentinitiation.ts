/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3DeletePaymentInitiationRequest = {
  /**
   * The payment initiation ID
   */
  paymentInitiationID: string;
};

export type V3DeletePaymentInitiationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V3DeletePaymentInitiationRequest$inboundSchema: z.ZodType<
  V3DeletePaymentInitiationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentInitiationID: z.string(),
});

/** @internal */
export type V3DeletePaymentInitiationRequest$Outbound = {
  paymentInitiationID: string;
};

/** @internal */
export const V3DeletePaymentInitiationRequest$outboundSchema: z.ZodType<
  V3DeletePaymentInitiationRequest$Outbound,
  z.ZodTypeDef,
  V3DeletePaymentInitiationRequest
> = z.object({
  paymentInitiationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3DeletePaymentInitiationRequest$ {
  /** @deprecated use `V3DeletePaymentInitiationRequest$inboundSchema` instead. */
  export const inboundSchema = V3DeletePaymentInitiationRequest$inboundSchema;
  /** @deprecated use `V3DeletePaymentInitiationRequest$outboundSchema` instead. */
  export const outboundSchema = V3DeletePaymentInitiationRequest$outboundSchema;
  /** @deprecated use `V3DeletePaymentInitiationRequest$Outbound` instead. */
  export type Outbound = V3DeletePaymentInitiationRequest$Outbound;
}

export function v3DeletePaymentInitiationRequestToJSON(
  v3DeletePaymentInitiationRequest: V3DeletePaymentInitiationRequest,
): string {
  return JSON.stringify(
    V3DeletePaymentInitiationRequest$outboundSchema.parse(
      v3DeletePaymentInitiationRequest,
    ),
  );
}

export function v3DeletePaymentInitiationRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3DeletePaymentInitiationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3DeletePaymentInitiationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3DeletePaymentInitiationRequest' from JSON`,
  );
}

/** @internal */
export const V3DeletePaymentInitiationResponse$inboundSchema: z.ZodType<
  V3DeletePaymentInitiationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V3DeletePaymentInitiationResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V3DeletePaymentInitiationResponse$outboundSchema: z.ZodType<
  V3DeletePaymentInitiationResponse$Outbound,
  z.ZodTypeDef,
  V3DeletePaymentInitiationResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3DeletePaymentInitiationResponse$ {
  /** @deprecated use `V3DeletePaymentInitiationResponse$inboundSchema` instead. */
  export const inboundSchema = V3DeletePaymentInitiationResponse$inboundSchema;
  /** @deprecated use `V3DeletePaymentInitiationResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3DeletePaymentInitiationResponse$outboundSchema;
  /** @deprecated use `V3DeletePaymentInitiationResponse$Outbound` instead. */
  export type Outbound = V3DeletePaymentInitiationResponse$Outbound;
}

export function v3DeletePaymentInitiationResponseToJSON(
  v3DeletePaymentInitiationResponse: V3DeletePaymentInitiationResponse,
): string {
  return JSON.stringify(
    V3DeletePaymentInitiationResponse$outboundSchema.parse(
      v3DeletePaymentInitiationResponse,
    ),
  );
}

export function v3DeletePaymentInitiationResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3DeletePaymentInitiationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3DeletePaymentInitiationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3DeletePaymentInitiationResponse' from JSON`,
  );
}
