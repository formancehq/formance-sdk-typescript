/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2GetLedgerInfoRequest = {
  /**
   * Name of the ledger.
   */
  ledger: string;
};

export type V2GetLedgerInfoResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v2LedgerInfoResponse?: shared.V2LedgerInfoResponse | undefined;
};

/** @internal */
export const V2GetLedgerInfoRequest$inboundSchema: z.ZodType<
  V2GetLedgerInfoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ledger: z.string(),
});

/** @internal */
export type V2GetLedgerInfoRequest$Outbound = {
  ledger: string;
};

/** @internal */
export const V2GetLedgerInfoRequest$outboundSchema: z.ZodType<
  V2GetLedgerInfoRequest$Outbound,
  z.ZodTypeDef,
  V2GetLedgerInfoRequest
> = z.object({
  ledger: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetLedgerInfoRequest$ {
  /** @deprecated use `V2GetLedgerInfoRequest$inboundSchema` instead. */
  export const inboundSchema = V2GetLedgerInfoRequest$inboundSchema;
  /** @deprecated use `V2GetLedgerInfoRequest$outboundSchema` instead. */
  export const outboundSchema = V2GetLedgerInfoRequest$outboundSchema;
  /** @deprecated use `V2GetLedgerInfoRequest$Outbound` instead. */
  export type Outbound = V2GetLedgerInfoRequest$Outbound;
}

export function v2GetLedgerInfoRequestToJSON(
  v2GetLedgerInfoRequest: V2GetLedgerInfoRequest,
): string {
  return JSON.stringify(
    V2GetLedgerInfoRequest$outboundSchema.parse(v2GetLedgerInfoRequest),
  );
}

export function v2GetLedgerInfoRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2GetLedgerInfoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetLedgerInfoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetLedgerInfoRequest' from JSON`,
  );
}

/** @internal */
export const V2GetLedgerInfoResponse$inboundSchema: z.ZodType<
  V2GetLedgerInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2LedgerInfoResponse: shared.V2LedgerInfoResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2LedgerInfoResponse": "v2LedgerInfoResponse",
  });
});

/** @internal */
export type V2GetLedgerInfoResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2LedgerInfoResponse?: shared.V2LedgerInfoResponse$Outbound | undefined;
};

/** @internal */
export const V2GetLedgerInfoResponse$outboundSchema: z.ZodType<
  V2GetLedgerInfoResponse$Outbound,
  z.ZodTypeDef,
  V2GetLedgerInfoResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2LedgerInfoResponse: shared.V2LedgerInfoResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2LedgerInfoResponse: "V2LedgerInfoResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetLedgerInfoResponse$ {
  /** @deprecated use `V2GetLedgerInfoResponse$inboundSchema` instead. */
  export const inboundSchema = V2GetLedgerInfoResponse$inboundSchema;
  /** @deprecated use `V2GetLedgerInfoResponse$outboundSchema` instead. */
  export const outboundSchema = V2GetLedgerInfoResponse$outboundSchema;
  /** @deprecated use `V2GetLedgerInfoResponse$Outbound` instead. */
  export type Outbound = V2GetLedgerInfoResponse$Outbound;
}

export function v2GetLedgerInfoResponseToJSON(
  v2GetLedgerInfoResponse: V2GetLedgerInfoResponse,
): string {
  return JSON.stringify(
    V2GetLedgerInfoResponse$outboundSchema.parse(v2GetLedgerInfoResponse),
  );
}

export function v2GetLedgerInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2GetLedgerInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetLedgerInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetLedgerInfoResponse' from JSON`,
  );
}
