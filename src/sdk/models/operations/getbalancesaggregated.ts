/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetBalancesAggregatedRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Filter balances involving given account, either as source or destination.
     */
    address?: string | undefined;
    /**
     * Use insertion date instead of effective date
     */
    useInsertionDate?: boolean | undefined;
};

/** @internal */
export namespace GetBalancesAggregatedRequest$ {
    export const inboundSchema: z.ZodType<GetBalancesAggregatedRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            address: z.string().optional(),
            useInsertionDate: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.useInsertionDate === undefined
                    ? null
                    : { useInsertionDate: v.useInsertionDate }),
            };
        });

    export type Outbound = {
        ledger: string;
        address?: string | undefined;
        useInsertionDate?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBalancesAggregatedRequest> = z
        .object({
            ledger: z.string(),
            address: z.string().optional(),
            useInsertionDate: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.useInsertionDate === undefined
                    ? null
                    : { useInsertionDate: v.useInsertionDate }),
            };
        });
}
