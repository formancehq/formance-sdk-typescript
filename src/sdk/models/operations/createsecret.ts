/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type CreateSecretRequest = {
    /**
     * Client ID
     */
    clientId: string;
    createSecretRequest?: shared.CreateSecretRequest | undefined;
};

/** @internal */
export namespace CreateSecretRequest$ {
    export const inboundSchema: z.ZodType<CreateSecretRequest, z.ZodTypeDef, unknown> = z
        .object({
            clientId: z.string(),
            CreateSecretRequest: shared.CreateSecretRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                ...(v.CreateSecretRequest === undefined
                    ? null
                    : { createSecretRequest: v.CreateSecretRequest }),
            };
        });

    export type Outbound = {
        clientId: string;
        CreateSecretRequest?: shared.CreateSecretRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSecretRequest> = z
        .object({
            clientId: z.string(),
            createSecretRequest: shared.CreateSecretRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                clientId: v.clientId,
                ...(v.createSecretRequest === undefined
                    ? null
                    : { CreateSecretRequest: v.createSecretRequest }),
            };
        });
}
