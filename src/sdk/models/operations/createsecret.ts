/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type CreateSecretRequest = {
  createSecretRequest?: shared.CreateSecretRequest | undefined;
  /**
   * Client ID
   */
  clientId: string;
};

export type CreateSecretResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Created secret
   */
  createSecretResponse?: shared.CreateSecretResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const CreateSecretRequest$inboundSchema: z.ZodType<
  CreateSecretRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  CreateSecretRequest: shared.CreateSecretRequest$inboundSchema.optional(),
  clientId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "CreateSecretRequest": "createSecretRequest",
  });
});

/** @internal */
export type CreateSecretRequest$Outbound = {
  CreateSecretRequest?: shared.CreateSecretRequest$Outbound | undefined;
  clientId: string;
};

/** @internal */
export const CreateSecretRequest$outboundSchema: z.ZodType<
  CreateSecretRequest$Outbound,
  z.ZodTypeDef,
  CreateSecretRequest
> = z.object({
  createSecretRequest: shared.CreateSecretRequest$outboundSchema.optional(),
  clientId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createSecretRequest: "CreateSecretRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretRequest$ {
  /** @deprecated use `CreateSecretRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSecretRequest$inboundSchema;
  /** @deprecated use `CreateSecretRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSecretRequest$outboundSchema;
  /** @deprecated use `CreateSecretRequest$Outbound` instead. */
  export type Outbound = CreateSecretRequest$Outbound;
}

/** @internal */
export const CreateSecretResponse$inboundSchema: z.ZodType<
  CreateSecretResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  CreateSecretResponse: shared.CreateSecretResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "CreateSecretResponse": "createSecretResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CreateSecretResponse$Outbound = {
  ContentType: string;
  CreateSecretResponse?: shared.CreateSecretResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const CreateSecretResponse$outboundSchema: z.ZodType<
  CreateSecretResponse$Outbound,
  z.ZodTypeDef,
  CreateSecretResponse
> = z.object({
  contentType: z.string(),
  createSecretResponse: shared.CreateSecretResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    createSecretResponse: "CreateSecretResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretResponse$ {
  /** @deprecated use `CreateSecretResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSecretResponse$inboundSchema;
  /** @deprecated use `CreateSecretResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSecretResponse$outboundSchema;
  /** @deprecated use `CreateSecretResponse$Outbound` instead. */
  export type Outbound = CreateSecretResponse$Outbound;
}
