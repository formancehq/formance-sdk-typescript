/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetPoolBalancesLatestRequest = {
  /**
   * The pool ID.
   */
  poolId: string;
};

export type GetPoolBalancesLatestResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * OK
   */
  poolBalancesResponse?: shared.PoolBalancesResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetPoolBalancesLatestRequest$inboundSchema: z.ZodType<
  GetPoolBalancesLatestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  poolId: z.string(),
});

/** @internal */
export type GetPoolBalancesLatestRequest$Outbound = {
  poolId: string;
};

/** @internal */
export const GetPoolBalancesLatestRequest$outboundSchema: z.ZodType<
  GetPoolBalancesLatestRequest$Outbound,
  z.ZodTypeDef,
  GetPoolBalancesLatestRequest
> = z.object({
  poolId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPoolBalancesLatestRequest$ {
  /** @deprecated use `GetPoolBalancesLatestRequest$inboundSchema` instead. */
  export const inboundSchema = GetPoolBalancesLatestRequest$inboundSchema;
  /** @deprecated use `GetPoolBalancesLatestRequest$outboundSchema` instead. */
  export const outboundSchema = GetPoolBalancesLatestRequest$outboundSchema;
  /** @deprecated use `GetPoolBalancesLatestRequest$Outbound` instead. */
  export type Outbound = GetPoolBalancesLatestRequest$Outbound;
}

export function getPoolBalancesLatestRequestToJSON(
  getPoolBalancesLatestRequest: GetPoolBalancesLatestRequest,
): string {
  return JSON.stringify(
    GetPoolBalancesLatestRequest$outboundSchema.parse(
      getPoolBalancesLatestRequest,
    ),
  );
}

export function getPoolBalancesLatestRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPoolBalancesLatestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPoolBalancesLatestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPoolBalancesLatestRequest' from JSON`,
  );
}

/** @internal */
export const GetPoolBalancesLatestResponse$inboundSchema: z.ZodType<
  GetPoolBalancesLatestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PoolBalancesResponse: shared.PoolBalancesResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "PoolBalancesResponse": "poolBalancesResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetPoolBalancesLatestResponse$Outbound = {
  ContentType: string;
  PoolBalancesResponse?: shared.PoolBalancesResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetPoolBalancesLatestResponse$outboundSchema: z.ZodType<
  GetPoolBalancesLatestResponse$Outbound,
  z.ZodTypeDef,
  GetPoolBalancesLatestResponse
> = z.object({
  contentType: z.string(),
  poolBalancesResponse: shared.PoolBalancesResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    poolBalancesResponse: "PoolBalancesResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPoolBalancesLatestResponse$ {
  /** @deprecated use `GetPoolBalancesLatestResponse$inboundSchema` instead. */
  export const inboundSchema = GetPoolBalancesLatestResponse$inboundSchema;
  /** @deprecated use `GetPoolBalancesLatestResponse$outboundSchema` instead. */
  export const outboundSchema = GetPoolBalancesLatestResponse$outboundSchema;
  /** @deprecated use `GetPoolBalancesLatestResponse$Outbound` instead. */
  export type Outbound = GetPoolBalancesLatestResponse$Outbound;
}

export function getPoolBalancesLatestResponseToJSON(
  getPoolBalancesLatestResponse: GetPoolBalancesLatestResponse,
): string {
  return JSON.stringify(
    GetPoolBalancesLatestResponse$outboundSchema.parse(
      getPoolBalancesLatestResponse,
    ),
  );
}

export function getPoolBalancesLatestResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPoolBalancesLatestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPoolBalancesLatestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPoolBalancesLatestResponse' from JSON`,
  );
}
