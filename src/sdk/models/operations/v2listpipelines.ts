/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2ListPipelinesRequest = {
  /**
   * Name of the ledger.
   */
  ledger: string;
};

export type V2ListPipelinesCursor2 = {
  data: Array<shared.V2Pipeline>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V2ListPipelinesCursor1 = {
  cursor: V2ListPipelinesCursor2;
  data?: Array<shared.V2Pipeline> | undefined;
};

/**
 * Pipelines list
 */
export type V2ListPipelinesResponseBody = {
  cursor?: V2ListPipelinesCursor1 | undefined;
};

export type V2ListPipelinesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Pipelines list
   */
  object?: V2ListPipelinesResponseBody | undefined;
};

/** @internal */
export const V2ListPipelinesRequest$inboundSchema: z.ZodType<
  V2ListPipelinesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ledger: z.string(),
});

/** @internal */
export type V2ListPipelinesRequest$Outbound = {
  ledger: string;
};

/** @internal */
export const V2ListPipelinesRequest$outboundSchema: z.ZodType<
  V2ListPipelinesRequest$Outbound,
  z.ZodTypeDef,
  V2ListPipelinesRequest
> = z.object({
  ledger: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListPipelinesRequest$ {
  /** @deprecated use `V2ListPipelinesRequest$inboundSchema` instead. */
  export const inboundSchema = V2ListPipelinesRequest$inboundSchema;
  /** @deprecated use `V2ListPipelinesRequest$outboundSchema` instead. */
  export const outboundSchema = V2ListPipelinesRequest$outboundSchema;
  /** @deprecated use `V2ListPipelinesRequest$Outbound` instead. */
  export type Outbound = V2ListPipelinesRequest$Outbound;
}

export function v2ListPipelinesRequestToJSON(
  v2ListPipelinesRequest: V2ListPipelinesRequest,
): string {
  return JSON.stringify(
    V2ListPipelinesRequest$outboundSchema.parse(v2ListPipelinesRequest),
  );
}

export function v2ListPipelinesRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2ListPipelinesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListPipelinesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListPipelinesRequest' from JSON`,
  );
}

/** @internal */
export const V2ListPipelinesCursor2$inboundSchema: z.ZodType<
  V2ListPipelinesCursor2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(shared.V2Pipeline$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V2ListPipelinesCursor2$Outbound = {
  data: Array<shared.V2Pipeline$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V2ListPipelinesCursor2$outboundSchema: z.ZodType<
  V2ListPipelinesCursor2$Outbound,
  z.ZodTypeDef,
  V2ListPipelinesCursor2
> = z.object({
  data: z.array(shared.V2Pipeline$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListPipelinesCursor2$ {
  /** @deprecated use `V2ListPipelinesCursor2$inboundSchema` instead. */
  export const inboundSchema = V2ListPipelinesCursor2$inboundSchema;
  /** @deprecated use `V2ListPipelinesCursor2$outboundSchema` instead. */
  export const outboundSchema = V2ListPipelinesCursor2$outboundSchema;
  /** @deprecated use `V2ListPipelinesCursor2$Outbound` instead. */
  export type Outbound = V2ListPipelinesCursor2$Outbound;
}

export function v2ListPipelinesCursor2ToJSON(
  v2ListPipelinesCursor2: V2ListPipelinesCursor2,
): string {
  return JSON.stringify(
    V2ListPipelinesCursor2$outboundSchema.parse(v2ListPipelinesCursor2),
  );
}

export function v2ListPipelinesCursor2FromJSON(
  jsonString: string,
): SafeParseResult<V2ListPipelinesCursor2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListPipelinesCursor2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListPipelinesCursor2' from JSON`,
  );
}

/** @internal */
export const V2ListPipelinesCursor1$inboundSchema: z.ZodType<
  V2ListPipelinesCursor1,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V2ListPipelinesCursor2$inboundSchema),
  data: z.array(shared.V2Pipeline$inboundSchema).optional(),
});

/** @internal */
export type V2ListPipelinesCursor1$Outbound = {
  cursor: V2ListPipelinesCursor2$Outbound;
  data?: Array<shared.V2Pipeline$Outbound> | undefined;
};

/** @internal */
export const V2ListPipelinesCursor1$outboundSchema: z.ZodType<
  V2ListPipelinesCursor1$Outbound,
  z.ZodTypeDef,
  V2ListPipelinesCursor1
> = z.object({
  cursor: z.lazy(() => V2ListPipelinesCursor2$outboundSchema),
  data: z.array(shared.V2Pipeline$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListPipelinesCursor1$ {
  /** @deprecated use `V2ListPipelinesCursor1$inboundSchema` instead. */
  export const inboundSchema = V2ListPipelinesCursor1$inboundSchema;
  /** @deprecated use `V2ListPipelinesCursor1$outboundSchema` instead. */
  export const outboundSchema = V2ListPipelinesCursor1$outboundSchema;
  /** @deprecated use `V2ListPipelinesCursor1$Outbound` instead. */
  export type Outbound = V2ListPipelinesCursor1$Outbound;
}

export function v2ListPipelinesCursor1ToJSON(
  v2ListPipelinesCursor1: V2ListPipelinesCursor1,
): string {
  return JSON.stringify(
    V2ListPipelinesCursor1$outboundSchema.parse(v2ListPipelinesCursor1),
  );
}

export function v2ListPipelinesCursor1FromJSON(
  jsonString: string,
): SafeParseResult<V2ListPipelinesCursor1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListPipelinesCursor1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListPipelinesCursor1' from JSON`,
  );
}

/** @internal */
export const V2ListPipelinesResponseBody$inboundSchema: z.ZodType<
  V2ListPipelinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V2ListPipelinesCursor1$inboundSchema).optional(),
});

/** @internal */
export type V2ListPipelinesResponseBody$Outbound = {
  cursor?: V2ListPipelinesCursor1$Outbound | undefined;
};

/** @internal */
export const V2ListPipelinesResponseBody$outboundSchema: z.ZodType<
  V2ListPipelinesResponseBody$Outbound,
  z.ZodTypeDef,
  V2ListPipelinesResponseBody
> = z.object({
  cursor: z.lazy(() => V2ListPipelinesCursor1$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListPipelinesResponseBody$ {
  /** @deprecated use `V2ListPipelinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2ListPipelinesResponseBody$inboundSchema;
  /** @deprecated use `V2ListPipelinesResponseBody$outboundSchema` instead. */
  export const outboundSchema = V2ListPipelinesResponseBody$outboundSchema;
  /** @deprecated use `V2ListPipelinesResponseBody$Outbound` instead. */
  export type Outbound = V2ListPipelinesResponseBody$Outbound;
}

export function v2ListPipelinesResponseBodyToJSON(
  v2ListPipelinesResponseBody: V2ListPipelinesResponseBody,
): string {
  return JSON.stringify(
    V2ListPipelinesResponseBody$outboundSchema.parse(
      v2ListPipelinesResponseBody,
    ),
  );
}

export function v2ListPipelinesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2ListPipelinesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListPipelinesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListPipelinesResponseBody' from JSON`,
  );
}

/** @internal */
export const V2ListPipelinesResponse$inboundSchema: z.ZodType<
  V2ListPipelinesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => V2ListPipelinesResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2ListPipelinesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: V2ListPipelinesResponseBody$Outbound | undefined;
};

/** @internal */
export const V2ListPipelinesResponse$outboundSchema: z.ZodType<
  V2ListPipelinesResponse$Outbound,
  z.ZodTypeDef,
  V2ListPipelinesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => V2ListPipelinesResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListPipelinesResponse$ {
  /** @deprecated use `V2ListPipelinesResponse$inboundSchema` instead. */
  export const inboundSchema = V2ListPipelinesResponse$inboundSchema;
  /** @deprecated use `V2ListPipelinesResponse$outboundSchema` instead. */
  export const outboundSchema = V2ListPipelinesResponse$outboundSchema;
  /** @deprecated use `V2ListPipelinesResponse$Outbound` instead. */
  export type Outbound = V2ListPipelinesResponse$Outbound;
}

export function v2ListPipelinesResponseToJSON(
  v2ListPipelinesResponse: V2ListPipelinesResponse,
): string {
  return JSON.stringify(
    V2ListPipelinesResponse$outboundSchema.parse(v2ListPipelinesResponse),
  );
}

export function v2ListPipelinesResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2ListPipelinesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListPipelinesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListPipelinesResponse' from JSON`,
  );
}
