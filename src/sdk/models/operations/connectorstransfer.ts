/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type ConnectorsTransferRequest = {
    transferRequest: shared.TransferRequest;
    /**
     * The name of the connector.
     */
    connector: shared.Connector;
};

export type ConnectorsTransferResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    transferResponse?: shared.TransferResponse | undefined;
};

/** @internal */
export namespace ConnectorsTransferRequest$ {
    export const inboundSchema: z.ZodType<ConnectorsTransferRequest, z.ZodTypeDef, unknown> = z
        .object({
            TransferRequest: shared.TransferRequest$.inboundSchema,
            connector: shared.Connector$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                TransferRequest: "transferRequest",
            });
        });

    export type Outbound = {
        TransferRequest: shared.TransferRequest$.Outbound;
        connector: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsTransferRequest> = z
        .object({
            transferRequest: shared.TransferRequest$.outboundSchema,
            connector: shared.Connector$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                transferRequest: "TransferRequest",
            });
        });
}

/** @internal */
export namespace ConnectorsTransferResponse$ {
    export const inboundSchema: z.ZodType<ConnectorsTransferResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TransferResponse: shared.TransferResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                TransferResponse: "transferResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TransferResponse?: shared.TransferResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsTransferResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            transferResponse: shared.TransferResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                transferResponse: "TransferResponse",
            });
        });
}
