/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3GetAccountRequest = {
  /**
   * The account ID
   */
  accountID: string;
};

export type V3GetAccountResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3GetAccountResponse?: shared.V3GetAccountResponse | undefined;
};

/** @internal */
export const V3GetAccountRequest$inboundSchema: z.ZodType<
  V3GetAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
});

/** @internal */
export type V3GetAccountRequest$Outbound = {
  accountID: string;
};

/** @internal */
export const V3GetAccountRequest$outboundSchema: z.ZodType<
  V3GetAccountRequest$Outbound,
  z.ZodTypeDef,
  V3GetAccountRequest
> = z.object({
  accountID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetAccountRequest$ {
  /** @deprecated use `V3GetAccountRequest$inboundSchema` instead. */
  export const inboundSchema = V3GetAccountRequest$inboundSchema;
  /** @deprecated use `V3GetAccountRequest$outboundSchema` instead. */
  export const outboundSchema = V3GetAccountRequest$outboundSchema;
  /** @deprecated use `V3GetAccountRequest$Outbound` instead. */
  export type Outbound = V3GetAccountRequest$Outbound;
}

export function v3GetAccountRequestToJSON(
  v3GetAccountRequest: V3GetAccountRequest,
): string {
  return JSON.stringify(
    V3GetAccountRequest$outboundSchema.parse(v3GetAccountRequest),
  );
}

export function v3GetAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GetAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetAccountRequest' from JSON`,
  );
}

/** @internal */
export const V3GetAccountResponse$inboundSchema: z.ZodType<
  V3GetAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3GetAccountResponse: shared.V3GetAccountResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3GetAccountResponse": "v3GetAccountResponse",
  });
});

/** @internal */
export type V3GetAccountResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3GetAccountResponse?: shared.V3GetAccountResponse$Outbound | undefined;
};

/** @internal */
export const V3GetAccountResponse$outboundSchema: z.ZodType<
  V3GetAccountResponse$Outbound,
  z.ZodTypeDef,
  V3GetAccountResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3GetAccountResponse: shared.V3GetAccountResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3GetAccountResponse: "V3GetAccountResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetAccountResponse$ {
  /** @deprecated use `V3GetAccountResponse$inboundSchema` instead. */
  export const inboundSchema = V3GetAccountResponse$inboundSchema;
  /** @deprecated use `V3GetAccountResponse$outboundSchema` instead. */
  export const outboundSchema = V3GetAccountResponse$outboundSchema;
  /** @deprecated use `V3GetAccountResponse$Outbound` instead. */
  export type Outbound = V3GetAccountResponse$Outbound;
}

export function v3GetAccountResponseToJSON(
  v3GetAccountResponse: V3GetAccountResponse,
): string {
  return JSON.stringify(
    V3GetAccountResponse$outboundSchema.parse(v3GetAccountResponse),
  );
}

export function v3GetAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GetAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetAccountResponse' from JSON`,
  );
}
