/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3GetConnectorConfigRequest = {
  /**
   * The connector ID
   */
  connectorID: string;
};

export type V3GetConnectorConfigResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3GetConnectorConfigResponse?:
    | shared.V3GetConnectorConfigResponse
    | undefined;
};

/** @internal */
export const V3GetConnectorConfigRequest$inboundSchema: z.ZodType<
  V3GetConnectorConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorID: z.string(),
});

/** @internal */
export type V3GetConnectorConfigRequest$Outbound = {
  connectorID: string;
};

/** @internal */
export const V3GetConnectorConfigRequest$outboundSchema: z.ZodType<
  V3GetConnectorConfigRequest$Outbound,
  z.ZodTypeDef,
  V3GetConnectorConfigRequest
> = z.object({
  connectorID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetConnectorConfigRequest$ {
  /** @deprecated use `V3GetConnectorConfigRequest$inboundSchema` instead. */
  export const inboundSchema = V3GetConnectorConfigRequest$inboundSchema;
  /** @deprecated use `V3GetConnectorConfigRequest$outboundSchema` instead. */
  export const outboundSchema = V3GetConnectorConfigRequest$outboundSchema;
  /** @deprecated use `V3GetConnectorConfigRequest$Outbound` instead. */
  export type Outbound = V3GetConnectorConfigRequest$Outbound;
}

export function v3GetConnectorConfigRequestToJSON(
  v3GetConnectorConfigRequest: V3GetConnectorConfigRequest,
): string {
  return JSON.stringify(
    V3GetConnectorConfigRequest$outboundSchema.parse(
      v3GetConnectorConfigRequest,
    ),
  );
}

export function v3GetConnectorConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GetConnectorConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetConnectorConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetConnectorConfigRequest' from JSON`,
  );
}

/** @internal */
export const V3GetConnectorConfigResponse$inboundSchema: z.ZodType<
  V3GetConnectorConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3GetConnectorConfigResponse: shared
    .V3GetConnectorConfigResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3GetConnectorConfigResponse": "v3GetConnectorConfigResponse",
  });
});

/** @internal */
export type V3GetConnectorConfigResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3GetConnectorConfigResponse?:
    | shared.V3GetConnectorConfigResponse$Outbound
    | undefined;
};

/** @internal */
export const V3GetConnectorConfigResponse$outboundSchema: z.ZodType<
  V3GetConnectorConfigResponse$Outbound,
  z.ZodTypeDef,
  V3GetConnectorConfigResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3GetConnectorConfigResponse: shared
    .V3GetConnectorConfigResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3GetConnectorConfigResponse: "V3GetConnectorConfigResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetConnectorConfigResponse$ {
  /** @deprecated use `V3GetConnectorConfigResponse$inboundSchema` instead. */
  export const inboundSchema = V3GetConnectorConfigResponse$inboundSchema;
  /** @deprecated use `V3GetConnectorConfigResponse$outboundSchema` instead. */
  export const outboundSchema = V3GetConnectorConfigResponse$outboundSchema;
  /** @deprecated use `V3GetConnectorConfigResponse$Outbound` instead. */
  export type Outbound = V3GetConnectorConfigResponse$Outbound;
}

export function v3GetConnectorConfigResponseToJSON(
  v3GetConnectorConfigResponse: V3GetConnectorConfigResponse,
): string {
  return JSON.stringify(
    V3GetConnectorConfigResponse$outboundSchema.parse(
      v3GetConnectorConfigResponse,
    ),
  );
}

export function v3GetConnectorConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GetConnectorConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetConnectorConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetConnectorConfigResponse' from JSON`,
  );
}
