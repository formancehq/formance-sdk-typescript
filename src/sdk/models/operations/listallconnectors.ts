/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type ListAllConnectorsResponse = {
    /**
     * OK
     */
    connectorsResponse?: shared.ConnectorsResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const ListAllConnectorsResponse$inboundSchema: z.ZodType<
    ListAllConnectorsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ConnectorsResponse: shared.ConnectorsResponse$inboundSchema.optional(),
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ConnectorsResponse: "connectorsResponse",
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type ListAllConnectorsResponse$Outbound = {
    ConnectorsResponse?: shared.ConnectorsResponse$Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const ListAllConnectorsResponse$outboundSchema: z.ZodType<
    ListAllConnectorsResponse$Outbound,
    z.ZodTypeDef,
    ListAllConnectorsResponse
> = z
    .object({
        connectorsResponse: shared.ConnectorsResponse$outboundSchema.optional(),
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            connectorsResponse: "ConnectorsResponse",
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllConnectorsResponse$ {
    /** @deprecated use `ListAllConnectorsResponse$inboundSchema` instead. */
    export const inboundSchema = ListAllConnectorsResponse$inboundSchema;
    /** @deprecated use `ListAllConnectorsResponse$outboundSchema` instead. */
    export const outboundSchema = ListAllConnectorsResponse$outboundSchema;
    /** @deprecated use `ListAllConnectorsResponse$Outbound` instead. */
    export type Outbound = ListAllConnectorsResponse$Outbound;
}
