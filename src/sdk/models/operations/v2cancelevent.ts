/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2CancelEventRequest = {
  /**
   * The instance id
   */
  instanceID: string;
};

export type V2CancelEventResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V2CancelEventRequest$inboundSchema: z.ZodType<
  V2CancelEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  instanceID: z.string(),
});

/** @internal */
export type V2CancelEventRequest$Outbound = {
  instanceID: string;
};

/** @internal */
export const V2CancelEventRequest$outboundSchema: z.ZodType<
  V2CancelEventRequest$Outbound,
  z.ZodTypeDef,
  V2CancelEventRequest
> = z.object({
  instanceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CancelEventRequest$ {
  /** @deprecated use `V2CancelEventRequest$inboundSchema` instead. */
  export const inboundSchema = V2CancelEventRequest$inboundSchema;
  /** @deprecated use `V2CancelEventRequest$outboundSchema` instead. */
  export const outboundSchema = V2CancelEventRequest$outboundSchema;
  /** @deprecated use `V2CancelEventRequest$Outbound` instead. */
  export type Outbound = V2CancelEventRequest$Outbound;
}

export function v2CancelEventRequestToJSON(
  v2CancelEventRequest: V2CancelEventRequest,
): string {
  return JSON.stringify(
    V2CancelEventRequest$outboundSchema.parse(v2CancelEventRequest),
  );
}

export function v2CancelEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2CancelEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CancelEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CancelEventRequest' from JSON`,
  );
}

/** @internal */
export const V2CancelEventResponse$inboundSchema: z.ZodType<
  V2CancelEventResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2CancelEventResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V2CancelEventResponse$outboundSchema: z.ZodType<
  V2CancelEventResponse$Outbound,
  z.ZodTypeDef,
  V2CancelEventResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CancelEventResponse$ {
  /** @deprecated use `V2CancelEventResponse$inboundSchema` instead. */
  export const inboundSchema = V2CancelEventResponse$inboundSchema;
  /** @deprecated use `V2CancelEventResponse$outboundSchema` instead. */
  export const outboundSchema = V2CancelEventResponse$outboundSchema;
  /** @deprecated use `V2CancelEventResponse$Outbound` instead. */
  export type Outbound = V2CancelEventResponse$Outbound;
}

export function v2CancelEventResponseToJSON(
  v2CancelEventResponse: V2CancelEventResponse,
): string {
  return JSON.stringify(
    V2CancelEventResponse$outboundSchema.parse(v2CancelEventResponse),
  );
}

export function v2CancelEventResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2CancelEventResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CancelEventResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CancelEventResponse' from JSON`,
  );
}
