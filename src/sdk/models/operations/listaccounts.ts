/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ListAccountsRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Pagination cursor, will return accounts after given address, in descending order.
     */
    after?: string | undefined;
    /**
     * Filter accounts by address pattern (regular expression placed between ^ and $).
     */
    address?: string | undefined;
    /**
     * Filter accounts by metadata key value pairs. Nested objects can be used as seen in the example below.
     */
    metadata?: Record<string, any> | undefined;
    /**
     * Filter accounts by their balance (default operator is gte)
     */
    balance?: number | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 1000.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 1000.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     * Deprecated, please use `cursor` instead.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    paginationToken?: string | undefined;
};

/** @internal */
export namespace ListAccountsRequest$ {
    export const inboundSchema: z.ZodType<ListAccountsRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            pageSize: z.number().int().default(15),
            after: z.string().optional(),
            address: z.string().optional(),
            metadata: z.record(z.any()).optional(),
            balance: z.number().int().optional(),
            cursor: z.string().optional(),
            pagination_token: z.string().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                pageSize: v.pageSize,
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.balance === undefined ? null : { balance: v.balance }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.pagination_token === undefined
                    ? null
                    : { paginationToken: v.pagination_token }),
            };
        });

    export type Outbound = {
        ledger: string;
        pageSize: number;
        after?: string | undefined;
        address?: string | undefined;
        metadata?: Record<string, any> | undefined;
        balance?: number | undefined;
        cursor?: string | undefined;
        pagination_token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAccountsRequest> = z
        .object({
            ledger: z.string(),
            pageSize: z.number().int().default(15),
            after: z.string().optional(),
            address: z.string().optional(),
            metadata: z.record(z.any()).optional(),
            balance: z.number().int().optional(),
            cursor: z.string().optional(),
            paginationToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                pageSize: v.pageSize,
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.balance === undefined ? null : { balance: v.balance }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.paginationToken === undefined
                    ? null
                    : { pagination_token: v.paginationToken }),
            };
        });
}
