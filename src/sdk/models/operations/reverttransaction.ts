/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as errors from "../../../sdk/models/errors";
import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type RevertTransactionRequest = {
    /**
     * Allow to disable balances checks
     */
    disableChecks?: boolean | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Transaction ID.
     */
    txid: bigint;
};

export type RevertTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Error
     */
    errorResponse?: errors.ErrorResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    transactionResponse?: shared.TransactionResponse | undefined;
};

/** @internal */
export namespace RevertTransactionRequest$ {
    export type Inbound = {
        disableChecks?: boolean | undefined;
        ledger: string;
        txid: number;
    };

    export const inboundSchema: z.ZodType<RevertTransactionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            disableChecks: z.boolean().optional(),
            ledger: z.string(),
            txid: z.number().transform((v) => BigInt(v)),
        })
        .transform((v) => {
            return {
                ...(v.disableChecks === undefined ? null : { disableChecks: v.disableChecks }),
                ledger: v.ledger,
                txid: v.txid,
            };
        });

    export type Outbound = {
        disableChecks?: boolean | undefined;
        ledger: string;
        txid: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RevertTransactionRequest> = z
        .object({
            disableChecks: z.boolean().optional(),
            ledger: z.string(),
            txid: z.bigint().transform((v) => Number(v)),
        })
        .transform((v) => {
            return {
                ...(v.disableChecks === undefined ? null : { disableChecks: v.disableChecks }),
                ledger: v.ledger,
                txid: v.txid,
            };
        });
}

/** @internal */
export namespace RevertTransactionResponse$ {
    export type Inbound = {
        ContentType: string;
        ErrorResponse?: errors.ErrorResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        TransactionResponse?: shared.TransactionResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RevertTransactionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            ErrorResponse: errors.ErrorResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TransactionResponse: shared.TransactionResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorResponse === undefined ? null : { errorResponse: v.ErrorResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TransactionResponse === undefined
                    ? null
                    : { transactionResponse: v.TransactionResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorResponse?: errors.ErrorResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        TransactionResponse?: shared.TransactionResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RevertTransactionResponse> = z
        .object({
            contentType: z.string(),
            errorResponse: errors.ErrorResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            transactionResponse: shared.TransactionResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorResponse === undefined ? null : { ErrorResponse: v.errorResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.transactionResponse === undefined
                    ? null
                    : { TransactionResponse: v.transactionResponse }),
            };
        });
}
