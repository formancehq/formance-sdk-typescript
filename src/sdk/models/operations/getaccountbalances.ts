/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetAccountBalancesRequest = {
  /**
   * The account ID.
   */
  accountId: string;
  /**
   * Filter balances by currency.
   *
   * @remarks
   * If not specified, all account's balances will be returned.
   */
  asset?: string | undefined;
  /**
   * Parameter used in pagination requests. Maximum page size is set to 15.
   *
   * @remarks
   * Set to the value of next for the next page of results.
   * Set to the value of previous for the previous page of results.
   * No other parameters can be set when this parameter is set.
   */
  cursor?: string | undefined;
  /**
   * Filter balances by date.
   *
   * @remarks
   * If not specified, all account's balances will be returned.
   */
  from?: Date | undefined;
  /**
   * The maximum number of results to return per page.
   */
  limit?: number | undefined;
  /**
   * The maximum number of results to return per page.
   *
   * @remarks
   */
  pageSize?: number | undefined;
  /**
   * Fields used to sort payments (default is date:desc).
   */
  sort?: Array<string> | undefined;
  /**
   * Filter balances by date.
   *
   * @remarks
   * If not specified, default will be set to now.
   */
  to?: Date | undefined;
};

export type GetAccountBalancesResponse = {
  /**
   * OK
   */
  balancesCursor?: shared.BalancesCursor | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetAccountBalancesRequest$inboundSchema: z.ZodType<
  GetAccountBalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  asset: z.string().optional(),
  cursor: z.string().optional(),
  from: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  limit: z.number().int().optional(),
  pageSize: z.number().int().default(15),
  sort: z.array(z.string()).optional(),
  to: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetAccountBalancesRequest$Outbound = {
  accountId: string;
  asset?: string | undefined;
  cursor?: string | undefined;
  from?: string | undefined;
  limit?: number | undefined;
  pageSize: number;
  sort?: Array<string> | undefined;
  to?: string | undefined;
};

/** @internal */
export const GetAccountBalancesRequest$outboundSchema: z.ZodType<
  GetAccountBalancesRequest$Outbound,
  z.ZodTypeDef,
  GetAccountBalancesRequest
> = z.object({
  accountId: z.string(),
  asset: z.string().optional(),
  cursor: z.string().optional(),
  from: z.date().transform(v => v.toISOString()).optional(),
  limit: z.number().int().optional(),
  pageSize: z.number().int().default(15),
  sort: z.array(z.string()).optional(),
  to: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountBalancesRequest$ {
  /** @deprecated use `GetAccountBalancesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAccountBalancesRequest$inboundSchema;
  /** @deprecated use `GetAccountBalancesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAccountBalancesRequest$outboundSchema;
  /** @deprecated use `GetAccountBalancesRequest$Outbound` instead. */
  export type Outbound = GetAccountBalancesRequest$Outbound;
}

export function getAccountBalancesRequestToJSON(
  getAccountBalancesRequest: GetAccountBalancesRequest,
): string {
  return JSON.stringify(
    GetAccountBalancesRequest$outboundSchema.parse(getAccountBalancesRequest),
  );
}

export function getAccountBalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountBalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountBalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountBalancesRequest' from JSON`,
  );
}

/** @internal */
export const GetAccountBalancesResponse$inboundSchema: z.ZodType<
  GetAccountBalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BalancesCursor: shared.BalancesCursor$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BalancesCursor": "balancesCursor",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetAccountBalancesResponse$Outbound = {
  BalancesCursor?: shared.BalancesCursor$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetAccountBalancesResponse$outboundSchema: z.ZodType<
  GetAccountBalancesResponse$Outbound,
  z.ZodTypeDef,
  GetAccountBalancesResponse
> = z.object({
  balancesCursor: shared.BalancesCursor$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    balancesCursor: "BalancesCursor",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountBalancesResponse$ {
  /** @deprecated use `GetAccountBalancesResponse$inboundSchema` instead. */
  export const inboundSchema = GetAccountBalancesResponse$inboundSchema;
  /** @deprecated use `GetAccountBalancesResponse$outboundSchema` instead. */
  export const outboundSchema = GetAccountBalancesResponse$outboundSchema;
  /** @deprecated use `GetAccountBalancesResponse$Outbound` instead. */
  export type Outbound = GetAccountBalancesResponse$Outbound;
}

export function getAccountBalancesResponseToJSON(
  getAccountBalancesResponse: GetAccountBalancesResponse,
): string {
  return JSON.stringify(
    GetAccountBalancesResponse$outboundSchema.parse(getAccountBalancesResponse),
  );
}

export function getAccountBalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountBalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountBalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountBalancesResponse' from JSON`,
  );
}
