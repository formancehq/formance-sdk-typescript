/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetAccountBalancesRequest = {
    /**
     * The account ID.
     */
    accountId: string;
    /**
     * The maximum number of results to return per page.
     */
    limit?: number | undefined;
    /**
     * Filter balances by currency.
     *
     * @remarks
     * If not specified, all account's balances will be returned.
     *
     */
    asset?: string | undefined;
    /**
     * Filter balances by date.
     *
     * @remarks
     * If not specified, all account's balances will be returned.
     *
     */
    from?: Date | undefined;
    /**
     * Filter balances by date.
     *
     * @remarks
     * If not specified, default will be set to now.
     *
     */
    to?: Date | undefined;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Fields used to sort payments (default is date:desc).
     */
    sort?: Array<string> | undefined;
};

/** @internal */
export namespace GetAccountBalancesRequest$ {
    export const inboundSchema: z.ZodType<GetAccountBalancesRequest, z.ZodTypeDef, unknown> = z
        .object({
            accountId: z.string(),
            limit: z.number().int().optional(),
            asset: z.string().optional(),
            from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            to: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
            sort: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                accountId: v.accountId,
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });

    export type Outbound = {
        accountId: string;
        limit?: number | undefined;
        asset?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        pageSize: number;
        cursor?: string | undefined;
        sort?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountBalancesRequest> = z
        .object({
            accountId: z.string(),
            limit: z.number().int().optional(),
            asset: z.string().optional(),
            from: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            to: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
            sort: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                accountId: v.accountId,
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });
}
