/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountFromPoolRequest = {
  /**
   * The account ID.
   */
  accountId: string;
  /**
   * The pool ID.
   */
  poolId: string;
};

export type RemoveAccountFromPoolResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const RemoveAccountFromPoolRequest$inboundSchema: z.ZodType<
  RemoveAccountFromPoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  poolId: z.string(),
});

/** @internal */
export type RemoveAccountFromPoolRequest$Outbound = {
  accountId: string;
  poolId: string;
};

/** @internal */
export const RemoveAccountFromPoolRequest$outboundSchema: z.ZodType<
  RemoveAccountFromPoolRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountFromPoolRequest
> = z.object({
  accountId: z.string(),
  poolId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountFromPoolRequest$ {
  /** @deprecated use `RemoveAccountFromPoolRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountFromPoolRequest$inboundSchema;
  /** @deprecated use `RemoveAccountFromPoolRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountFromPoolRequest$outboundSchema;
  /** @deprecated use `RemoveAccountFromPoolRequest$Outbound` instead. */
  export type Outbound = RemoveAccountFromPoolRequest$Outbound;
}

export function removeAccountFromPoolRequestToJSON(
  removeAccountFromPoolRequest: RemoveAccountFromPoolRequest,
): string {
  return JSON.stringify(
    RemoveAccountFromPoolRequest$outboundSchema.parse(
      removeAccountFromPoolRequest,
    ),
  );
}

export function removeAccountFromPoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountFromPoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountFromPoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountFromPoolRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountFromPoolResponse$inboundSchema: z.ZodType<
  RemoveAccountFromPoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type RemoveAccountFromPoolResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const RemoveAccountFromPoolResponse$outboundSchema: z.ZodType<
  RemoveAccountFromPoolResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountFromPoolResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountFromPoolResponse$ {
  /** @deprecated use `RemoveAccountFromPoolResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountFromPoolResponse$inboundSchema;
  /** @deprecated use `RemoveAccountFromPoolResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountFromPoolResponse$outboundSchema;
  /** @deprecated use `RemoveAccountFromPoolResponse$Outbound` instead. */
  export type Outbound = RemoveAccountFromPoolResponse$Outbound;
}

export function removeAccountFromPoolResponseToJSON(
  removeAccountFromPoolResponse: RemoveAccountFromPoolResponse,
): string {
  return JSON.stringify(
    RemoveAccountFromPoolResponse$outboundSchema.parse(
      removeAccountFromPoolResponse,
    ),
  );
}

export function removeAccountFromPoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountFromPoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountFromPoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountFromPoolResponse' from JSON`,
  );
}
