/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RunWorkflowRequest = {
    /**
     * The flow id
     */
    workflowID: string;
    /**
     * Wait end of the workflow before return
     */
    wait?: boolean | undefined;
    requestBody?: Record<string, string> | undefined;
};

/** @internal */
export namespace RunWorkflowRequest$ {
    export const inboundSchema: z.ZodType<RunWorkflowRequest, z.ZodTypeDef, unknown> = z
        .object({
            workflowID: z.string(),
            wait: z.boolean().optional(),
            RequestBody: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                workflowID: v.workflowID,
                ...(v.wait === undefined ? null : { wait: v.wait }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        workflowID: string;
        wait?: boolean | undefined;
        RequestBody?: Record<string, string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunWorkflowRequest> = z
        .object({
            workflowID: z.string(),
            wait: z.boolean().optional(),
            requestBody: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                workflowID: v.workflowID,
                ...(v.wait === undefined ? null : { wait: v.wait }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}
