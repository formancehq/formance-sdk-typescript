/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ListBankAccountsRequest = {
  /**
   * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
   *
   * @remarks
   */
  cursor?: string | undefined;
  /**
   * The number of items to return
   */
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

export type V3ListBankAccountsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3BankAccountsCursorResponse?:
    | shared.V3BankAccountsCursorResponse
    | undefined;
};

/** @internal */
export const V3ListBankAccountsRequest$inboundSchema: z.ZodType<
  V3ListBankAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/** @internal */
export type V3ListBankAccountsRequest$Outbound = {
  cursor?: string | undefined;
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const V3ListBankAccountsRequest$outboundSchema: z.ZodType<
  V3ListBankAccountsRequest$Outbound,
  z.ZodTypeDef,
  V3ListBankAccountsRequest
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListBankAccountsRequest$ {
  /** @deprecated use `V3ListBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = V3ListBankAccountsRequest$inboundSchema;
  /** @deprecated use `V3ListBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = V3ListBankAccountsRequest$outboundSchema;
  /** @deprecated use `V3ListBankAccountsRequest$Outbound` instead. */
  export type Outbound = V3ListBankAccountsRequest$Outbound;
}

export function v3ListBankAccountsRequestToJSON(
  v3ListBankAccountsRequest: V3ListBankAccountsRequest,
): string {
  return JSON.stringify(
    V3ListBankAccountsRequest$outboundSchema.parse(v3ListBankAccountsRequest),
  );
}

export function v3ListBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ListBankAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListBankAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const V3ListBankAccountsResponse$inboundSchema: z.ZodType<
  V3ListBankAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3BankAccountsCursorResponse: shared
    .V3BankAccountsCursorResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3BankAccountsCursorResponse": "v3BankAccountsCursorResponse",
  });
});

/** @internal */
export type V3ListBankAccountsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3BankAccountsCursorResponse?:
    | shared.V3BankAccountsCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ListBankAccountsResponse$outboundSchema: z.ZodType<
  V3ListBankAccountsResponse$Outbound,
  z.ZodTypeDef,
  V3ListBankAccountsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3BankAccountsCursorResponse: shared
    .V3BankAccountsCursorResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3BankAccountsCursorResponse: "V3BankAccountsCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListBankAccountsResponse$ {
  /** @deprecated use `V3ListBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = V3ListBankAccountsResponse$inboundSchema;
  /** @deprecated use `V3ListBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = V3ListBankAccountsResponse$outboundSchema;
  /** @deprecated use `V3ListBankAccountsResponse$Outbound` instead. */
  export type Outbound = V3ListBankAccountsResponse$Outbound;
}

export function v3ListBankAccountsResponseToJSON(
  v3ListBankAccountsResponse: V3ListBankAccountsResponse,
): string {
  return JSON.stringify(
    V3ListBankAccountsResponse$outboundSchema.parse(v3ListBankAccountsResponse),
  );
}

export function v3ListBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ListBankAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListBankAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListBankAccountsResponse' from JSON`,
  );
}
