/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateBankAccountMetadataRequest = {
  updateBankAccountMetadataRequest: shared.UpdateBankAccountMetadataRequest;
  /**
   * The bank account ID.
   */
  bankAccountId: string;
};

export type UpdateBankAccountMetadataResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdateBankAccountMetadataRequest$inboundSchema: z.ZodType<
  UpdateBankAccountMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  UpdateBankAccountMetadataRequest:
    shared.UpdateBankAccountMetadataRequest$inboundSchema,
  bankAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "UpdateBankAccountMetadataRequest": "updateBankAccountMetadataRequest",
  });
});

/** @internal */
export type UpdateBankAccountMetadataRequest$Outbound = {
  UpdateBankAccountMetadataRequest:
    shared.UpdateBankAccountMetadataRequest$Outbound;
  bankAccountId: string;
};

/** @internal */
export const UpdateBankAccountMetadataRequest$outboundSchema: z.ZodType<
  UpdateBankAccountMetadataRequest$Outbound,
  z.ZodTypeDef,
  UpdateBankAccountMetadataRequest
> = z.object({
  updateBankAccountMetadataRequest:
    shared.UpdateBankAccountMetadataRequest$outboundSchema,
  bankAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    updateBankAccountMetadataRequest: "UpdateBankAccountMetadataRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBankAccountMetadataRequest$ {
  /** @deprecated use `UpdateBankAccountMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBankAccountMetadataRequest$inboundSchema;
  /** @deprecated use `UpdateBankAccountMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBankAccountMetadataRequest$outboundSchema;
  /** @deprecated use `UpdateBankAccountMetadataRequest$Outbound` instead. */
  export type Outbound = UpdateBankAccountMetadataRequest$Outbound;
}

export function updateBankAccountMetadataRequestToJSON(
  updateBankAccountMetadataRequest: UpdateBankAccountMetadataRequest,
): string {
  return JSON.stringify(
    UpdateBankAccountMetadataRequest$outboundSchema.parse(
      updateBankAccountMetadataRequest,
    ),
  );
}

export function updateBankAccountMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBankAccountMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBankAccountMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBankAccountMetadataRequest' from JSON`,
  );
}

/** @internal */
export const UpdateBankAccountMetadataResponse$inboundSchema: z.ZodType<
  UpdateBankAccountMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UpdateBankAccountMetadataResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdateBankAccountMetadataResponse$outboundSchema: z.ZodType<
  UpdateBankAccountMetadataResponse$Outbound,
  z.ZodTypeDef,
  UpdateBankAccountMetadataResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBankAccountMetadataResponse$ {
  /** @deprecated use `UpdateBankAccountMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateBankAccountMetadataResponse$inboundSchema;
  /** @deprecated use `UpdateBankAccountMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateBankAccountMetadataResponse$outboundSchema;
  /** @deprecated use `UpdateBankAccountMetadataResponse$Outbound` instead. */
  export type Outbound = UpdateBankAccountMetadataResponse$Outbound;
}

export function updateBankAccountMetadataResponseToJSON(
  updateBankAccountMetadataResponse: UpdateBankAccountMetadataResponse,
): string {
  return JSON.stringify(
    UpdateBankAccountMetadataResponse$outboundSchema.parse(
      updateBankAccountMetadataResponse,
    ),
  );
}

export function updateBankAccountMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBankAccountMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBankAccountMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBankAccountMetadataResponse' from JSON`,
  );
}
