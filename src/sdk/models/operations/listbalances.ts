/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type ListBalancesRequest = {
    id: string;
};

export type ListBalancesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Balances list
     */
    listBalancesResponse?: shared.ListBalancesResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ListBalancesRequest$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<ListBalancesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListBalancesRequest> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace ListBalancesResponse$ {
    export type Inbound = {
        ContentType: string;
        ListBalancesResponse?: shared.ListBalancesResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<ListBalancesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            ListBalancesResponse: shared.ListBalancesResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ListBalancesResponse === undefined
                    ? null
                    : { listBalancesResponse: v.ListBalancesResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ListBalancesResponse?: shared.ListBalancesResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListBalancesResponse> = z
        .object({
            contentType: z.string(),
            listBalancesResponse: shared.ListBalancesResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.listBalancesResponse === undefined
                    ? null
                    : { ListBalancesResponse: v.listBalancesResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
