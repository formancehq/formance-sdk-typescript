/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2GetInstanceRequest = {
  /**
   * The instance id
   */
  instanceID: string;
};

export type V2GetInstanceResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The workflow instance
   */
  v2GetWorkflowInstanceResponse?:
    | shared.V2GetWorkflowInstanceResponse
    | undefined;
};

/** @internal */
export const V2GetInstanceRequest$inboundSchema: z.ZodType<
  V2GetInstanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  instanceID: z.string(),
});

/** @internal */
export type V2GetInstanceRequest$Outbound = {
  instanceID: string;
};

/** @internal */
export const V2GetInstanceRequest$outboundSchema: z.ZodType<
  V2GetInstanceRequest$Outbound,
  z.ZodTypeDef,
  V2GetInstanceRequest
> = z.object({
  instanceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetInstanceRequest$ {
  /** @deprecated use `V2GetInstanceRequest$inboundSchema` instead. */
  export const inboundSchema = V2GetInstanceRequest$inboundSchema;
  /** @deprecated use `V2GetInstanceRequest$outboundSchema` instead. */
  export const outboundSchema = V2GetInstanceRequest$outboundSchema;
  /** @deprecated use `V2GetInstanceRequest$Outbound` instead. */
  export type Outbound = V2GetInstanceRequest$Outbound;
}

export function v2GetInstanceRequestToJSON(
  v2GetInstanceRequest: V2GetInstanceRequest,
): string {
  return JSON.stringify(
    V2GetInstanceRequest$outboundSchema.parse(v2GetInstanceRequest),
  );
}

export function v2GetInstanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2GetInstanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetInstanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetInstanceRequest' from JSON`,
  );
}

/** @internal */
export const V2GetInstanceResponse$inboundSchema: z.ZodType<
  V2GetInstanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2GetWorkflowInstanceResponse: shared
    .V2GetWorkflowInstanceResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2GetWorkflowInstanceResponse": "v2GetWorkflowInstanceResponse",
  });
});

/** @internal */
export type V2GetInstanceResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2GetWorkflowInstanceResponse?:
    | shared.V2GetWorkflowInstanceResponse$Outbound
    | undefined;
};

/** @internal */
export const V2GetInstanceResponse$outboundSchema: z.ZodType<
  V2GetInstanceResponse$Outbound,
  z.ZodTypeDef,
  V2GetInstanceResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2GetWorkflowInstanceResponse: shared
    .V2GetWorkflowInstanceResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2GetWorkflowInstanceResponse: "V2GetWorkflowInstanceResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetInstanceResponse$ {
  /** @deprecated use `V2GetInstanceResponse$inboundSchema` instead. */
  export const inboundSchema = V2GetInstanceResponse$inboundSchema;
  /** @deprecated use `V2GetInstanceResponse$outboundSchema` instead. */
  export const outboundSchema = V2GetInstanceResponse$outboundSchema;
  /** @deprecated use `V2GetInstanceResponse$Outbound` instead. */
  export type Outbound = V2GetInstanceResponse$Outbound;
}

export function v2GetInstanceResponseToJSON(
  v2GetInstanceResponse: V2GetInstanceResponse,
): string {
  return JSON.stringify(
    V2GetInstanceResponse$outboundSchema.parse(v2GetInstanceResponse),
  );
}

export function v2GetInstanceResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2GetInstanceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetInstanceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetInstanceResponse' from JSON`,
  );
}
