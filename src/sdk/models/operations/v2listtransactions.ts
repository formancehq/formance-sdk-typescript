/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export enum Order {
  Effective = "effective",
}

export type V2ListTransactionsRequest = {
  /**
   * Parameter used in pagination requests. Maximum page size is set to 15.
   *
   * @remarks
   * Set to the value of next for the next page of results.
   * Set to the value of previous for the previous page of results.
   * No other parameters can be set when this parameter is set.
   */
  cursor?: string | undefined;
  expand?: string | undefined;
  /**
   * Name of the ledger.
   */
  ledger: string;
  order?: Order | undefined;
  /**
   * The maximum number of results to return per page.
   *
   * @remarks
   */
  pageSize?: number | undefined;
  pit?: Date | undefined;
  query?: { [k: string]: any } | undefined;
  reverse?: boolean | undefined;
};

export type V2ListTransactionsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v2TransactionsCursorResponse?:
    | shared.V2TransactionsCursorResponse
    | undefined;
};

/** @internal */
export const Order$inboundSchema: z.ZodNativeEnum<typeof Order> = z.nativeEnum(
  Order,
);

/** @internal */
export const Order$outboundSchema: z.ZodNativeEnum<typeof Order> =
  Order$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
}

/** @internal */
export const V2ListTransactionsRequest$inboundSchema: z.ZodType<
  V2ListTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  expand: z.string().optional(),
  ledger: z.string(),
  order: Order$inboundSchema.optional(),
  pageSize: z.number().int().optional(),
  pit: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  query: z.record(z.any()).optional(),
  reverse: z.boolean().optional(),
});

/** @internal */
export type V2ListTransactionsRequest$Outbound = {
  cursor?: string | undefined;
  expand?: string | undefined;
  ledger: string;
  order?: string | undefined;
  pageSize?: number | undefined;
  pit?: string | undefined;
  query?: { [k: string]: any } | undefined;
  reverse?: boolean | undefined;
};

/** @internal */
export const V2ListTransactionsRequest$outboundSchema: z.ZodType<
  V2ListTransactionsRequest$Outbound,
  z.ZodTypeDef,
  V2ListTransactionsRequest
> = z.object({
  cursor: z.string().optional(),
  expand: z.string().optional(),
  ledger: z.string(),
  order: Order$outboundSchema.optional(),
  pageSize: z.number().int().optional(),
  pit: z.date().transform(v => v.toISOString()).optional(),
  query: z.record(z.any()).optional(),
  reverse: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListTransactionsRequest$ {
  /** @deprecated use `V2ListTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = V2ListTransactionsRequest$inboundSchema;
  /** @deprecated use `V2ListTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = V2ListTransactionsRequest$outboundSchema;
  /** @deprecated use `V2ListTransactionsRequest$Outbound` instead. */
  export type Outbound = V2ListTransactionsRequest$Outbound;
}

/** @internal */
export const V2ListTransactionsResponse$inboundSchema: z.ZodType<
  V2ListTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2TransactionsCursorResponse: shared
    .V2TransactionsCursorResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2TransactionsCursorResponse": "v2TransactionsCursorResponse",
  });
});

/** @internal */
export type V2ListTransactionsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2TransactionsCursorResponse?:
    | shared.V2TransactionsCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V2ListTransactionsResponse$outboundSchema: z.ZodType<
  V2ListTransactionsResponse$Outbound,
  z.ZodTypeDef,
  V2ListTransactionsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2TransactionsCursorResponse: shared
    .V2TransactionsCursorResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2TransactionsCursorResponse: "V2TransactionsCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListTransactionsResponse$ {
  /** @deprecated use `V2ListTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = V2ListTransactionsResponse$inboundSchema;
  /** @deprecated use `V2ListTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = V2ListTransactionsResponse$outboundSchema;
  /** @deprecated use `V2ListTransactionsResponse$Outbound` instead. */
  export type Outbound = V2ListTransactionsResponse$Outbound;
}
