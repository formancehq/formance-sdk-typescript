/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type ReadTriggerRequest = {
  /**
   * The trigger id
   */
  triggerID: string;
};

export type ReadTriggerResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * A specific trigger
   */
  readTriggerResponse?: shared.ReadTriggerResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ReadTriggerRequest$inboundSchema: z.ZodType<
  ReadTriggerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  triggerID: z.string(),
});

/** @internal */
export type ReadTriggerRequest$Outbound = {
  triggerID: string;
};

/** @internal */
export const ReadTriggerRequest$outboundSchema: z.ZodType<
  ReadTriggerRequest$Outbound,
  z.ZodTypeDef,
  ReadTriggerRequest
> = z.object({
  triggerID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadTriggerRequest$ {
  /** @deprecated use `ReadTriggerRequest$inboundSchema` instead. */
  export const inboundSchema = ReadTriggerRequest$inboundSchema;
  /** @deprecated use `ReadTriggerRequest$outboundSchema` instead. */
  export const outboundSchema = ReadTriggerRequest$outboundSchema;
  /** @deprecated use `ReadTriggerRequest$Outbound` instead. */
  export type Outbound = ReadTriggerRequest$Outbound;
}

/** @internal */
export const ReadTriggerResponse$inboundSchema: z.ZodType<
  ReadTriggerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ReadTriggerResponse: shared.ReadTriggerResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "ReadTriggerResponse": "readTriggerResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ReadTriggerResponse$Outbound = {
  ContentType: string;
  ReadTriggerResponse?: shared.ReadTriggerResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ReadTriggerResponse$outboundSchema: z.ZodType<
  ReadTriggerResponse$Outbound,
  z.ZodTypeDef,
  ReadTriggerResponse
> = z.object({
  contentType: z.string(),
  readTriggerResponse: shared.ReadTriggerResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    readTriggerResponse: "ReadTriggerResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadTriggerResponse$ {
  /** @deprecated use `ReadTriggerResponse$inboundSchema` instead. */
  export const inboundSchema = ReadTriggerResponse$inboundSchema;
  /** @deprecated use `ReadTriggerResponse$outboundSchema` instead. */
  export const outboundSchema = ReadTriggerResponse$outboundSchema;
  /** @deprecated use `ReadTriggerResponse$Outbound` instead. */
  export type Outbound = ReadTriggerResponse$Outbound;
}
