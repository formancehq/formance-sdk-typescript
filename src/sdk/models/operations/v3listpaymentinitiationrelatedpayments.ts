/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ListPaymentInitiationRelatedPaymentsRequest = {
  /**
   * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
   *
   * @remarks
   */
  cursor?: string | undefined;
  /**
   * The number of items to return
   */
  pageSize?: number | undefined;
  /**
   * The payment initiation ID
   */
  paymentInitiationID: string;
  query?: { [k: string]: any } | undefined;
};

export type V3ListPaymentInitiationRelatedPaymentsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3PaymentInitiationRelatedPaymentsCursorResponse?:
    | shared.V3PaymentInitiationRelatedPaymentsCursorResponse
    | undefined;
};

/** @internal */
export const V3ListPaymentInitiationRelatedPaymentsRequest$inboundSchema:
  z.ZodType<
    V3ListPaymentInitiationRelatedPaymentsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    cursor: z.string().optional(),
    pageSize: z.number().int().optional(),
    paymentInitiationID: z.string(),
    query: z.record(z.any()).optional(),
  });

/** @internal */
export type V3ListPaymentInitiationRelatedPaymentsRequest$Outbound = {
  cursor?: string | undefined;
  pageSize?: number | undefined;
  paymentInitiationID: string;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const V3ListPaymentInitiationRelatedPaymentsRequest$outboundSchema:
  z.ZodType<
    V3ListPaymentInitiationRelatedPaymentsRequest$Outbound,
    z.ZodTypeDef,
    V3ListPaymentInitiationRelatedPaymentsRequest
  > = z.object({
    cursor: z.string().optional(),
    pageSize: z.number().int().optional(),
    paymentInitiationID: z.string(),
    query: z.record(z.any()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentInitiationRelatedPaymentsRequest$ {
  /** @deprecated use `V3ListPaymentInitiationRelatedPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3ListPaymentInitiationRelatedPaymentsRequest$inboundSchema;
  /** @deprecated use `V3ListPaymentInitiationRelatedPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3ListPaymentInitiationRelatedPaymentsRequest$outboundSchema;
  /** @deprecated use `V3ListPaymentInitiationRelatedPaymentsRequest$Outbound` instead. */
  export type Outbound = V3ListPaymentInitiationRelatedPaymentsRequest$Outbound;
}

export function v3ListPaymentInitiationRelatedPaymentsRequestToJSON(
  v3ListPaymentInitiationRelatedPaymentsRequest:
    V3ListPaymentInitiationRelatedPaymentsRequest,
): string {
  return JSON.stringify(
    V3ListPaymentInitiationRelatedPaymentsRequest$outboundSchema.parse(
      v3ListPaymentInitiationRelatedPaymentsRequest,
    ),
  );
}

export function v3ListPaymentInitiationRelatedPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ListPaymentInitiationRelatedPaymentsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ListPaymentInitiationRelatedPaymentsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ListPaymentInitiationRelatedPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const V3ListPaymentInitiationRelatedPaymentsResponse$inboundSchema:
  z.ZodType<
    V3ListPaymentInitiationRelatedPaymentsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    V3PaymentInitiationRelatedPaymentsCursorResponse: shared
      .V3PaymentInitiationRelatedPaymentsCursorResponse$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "V3PaymentInitiationRelatedPaymentsCursorResponse":
        "v3PaymentInitiationRelatedPaymentsCursorResponse",
    });
  });

/** @internal */
export type V3ListPaymentInitiationRelatedPaymentsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3PaymentInitiationRelatedPaymentsCursorResponse?:
    | shared.V3PaymentInitiationRelatedPaymentsCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ListPaymentInitiationRelatedPaymentsResponse$outboundSchema:
  z.ZodType<
    V3ListPaymentInitiationRelatedPaymentsResponse$Outbound,
    z.ZodTypeDef,
    V3ListPaymentInitiationRelatedPaymentsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    v3PaymentInitiationRelatedPaymentsCursorResponse: shared
      .V3PaymentInitiationRelatedPaymentsCursorResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      v3PaymentInitiationRelatedPaymentsCursorResponse:
        "V3PaymentInitiationRelatedPaymentsCursorResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListPaymentInitiationRelatedPaymentsResponse$ {
  /** @deprecated use `V3ListPaymentInitiationRelatedPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3ListPaymentInitiationRelatedPaymentsResponse$inboundSchema;
  /** @deprecated use `V3ListPaymentInitiationRelatedPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ListPaymentInitiationRelatedPaymentsResponse$outboundSchema;
  /** @deprecated use `V3ListPaymentInitiationRelatedPaymentsResponse$Outbound` instead. */
  export type Outbound =
    V3ListPaymentInitiationRelatedPaymentsResponse$Outbound;
}

export function v3ListPaymentInitiationRelatedPaymentsResponseToJSON(
  v3ListPaymentInitiationRelatedPaymentsResponse:
    V3ListPaymentInitiationRelatedPaymentsResponse,
): string {
  return JSON.stringify(
    V3ListPaymentInitiationRelatedPaymentsResponse$outboundSchema.parse(
      v3ListPaymentInitiationRelatedPaymentsResponse,
    ),
  );
}

export function v3ListPaymentInitiationRelatedPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3ListPaymentInitiationRelatedPaymentsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3ListPaymentInitiationRelatedPaymentsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3ListPaymentInitiationRelatedPaymentsResponse' from JSON`,
  );
}
