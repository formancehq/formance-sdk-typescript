/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ForwardBankAccountRequest = {
  v3ForwardBankAccountRequest?: shared.V3ForwardBankAccountRequest | undefined;
  /**
   * The bank account ID
   */
  bankAccountID: string;
};

export type V3ForwardBankAccountResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Accepted
   */
  v3ForwardBankAccountResponse?:
    | shared.V3ForwardBankAccountResponse
    | undefined;
};

/** @internal */
export const V3ForwardBankAccountRequest$inboundSchema: z.ZodType<
  V3ForwardBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  V3ForwardBankAccountRequest: shared.V3ForwardBankAccountRequest$inboundSchema
    .optional(),
  bankAccountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "V3ForwardBankAccountRequest": "v3ForwardBankAccountRequest",
  });
});

/** @internal */
export type V3ForwardBankAccountRequest$Outbound = {
  V3ForwardBankAccountRequest?:
    | shared.V3ForwardBankAccountRequest$Outbound
    | undefined;
  bankAccountID: string;
};

/** @internal */
export const V3ForwardBankAccountRequest$outboundSchema: z.ZodType<
  V3ForwardBankAccountRequest$Outbound,
  z.ZodTypeDef,
  V3ForwardBankAccountRequest
> = z.object({
  v3ForwardBankAccountRequest: shared.V3ForwardBankAccountRequest$outboundSchema
    .optional(),
  bankAccountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    v3ForwardBankAccountRequest: "V3ForwardBankAccountRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ForwardBankAccountRequest$ {
  /** @deprecated use `V3ForwardBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = V3ForwardBankAccountRequest$inboundSchema;
  /** @deprecated use `V3ForwardBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = V3ForwardBankAccountRequest$outboundSchema;
  /** @deprecated use `V3ForwardBankAccountRequest$Outbound` instead. */
  export type Outbound = V3ForwardBankAccountRequest$Outbound;
}

export function v3ForwardBankAccountRequestToJSON(
  v3ForwardBankAccountRequest: V3ForwardBankAccountRequest,
): string {
  return JSON.stringify(
    V3ForwardBankAccountRequest$outboundSchema.parse(
      v3ForwardBankAccountRequest,
    ),
  );
}

export function v3ForwardBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ForwardBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ForwardBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ForwardBankAccountRequest' from JSON`,
  );
}

/** @internal */
export const V3ForwardBankAccountResponse$inboundSchema: z.ZodType<
  V3ForwardBankAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3ForwardBankAccountResponse: shared
    .V3ForwardBankAccountResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3ForwardBankAccountResponse": "v3ForwardBankAccountResponse",
  });
});

/** @internal */
export type V3ForwardBankAccountResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3ForwardBankAccountResponse?:
    | shared.V3ForwardBankAccountResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ForwardBankAccountResponse$outboundSchema: z.ZodType<
  V3ForwardBankAccountResponse$Outbound,
  z.ZodTypeDef,
  V3ForwardBankAccountResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3ForwardBankAccountResponse: shared
    .V3ForwardBankAccountResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3ForwardBankAccountResponse: "V3ForwardBankAccountResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ForwardBankAccountResponse$ {
  /** @deprecated use `V3ForwardBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema = V3ForwardBankAccountResponse$inboundSchema;
  /** @deprecated use `V3ForwardBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema = V3ForwardBankAccountResponse$outboundSchema;
  /** @deprecated use `V3ForwardBankAccountResponse$Outbound` instead. */
  export type Outbound = V3ForwardBankAccountResponse$Outbound;
}

export function v3ForwardBankAccountResponseToJSON(
  v3ForwardBankAccountResponse: V3ForwardBankAccountResponse,
): string {
  return JSON.stringify(
    V3ForwardBankAccountResponse$outboundSchema.parse(
      v3ForwardBankAccountResponse,
    ),
  );
}

export function v3ForwardBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ForwardBankAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ForwardBankAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ForwardBankAccountResponse' from JSON`,
  );
}
