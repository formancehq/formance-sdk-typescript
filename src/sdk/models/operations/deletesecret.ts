/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSecretRequest = {
  /**
   * Client ID
   */
  clientId: string;
  /**
   * Secret ID
   */
  secretId: string;
};

export type DeleteSecretResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DeleteSecretRequest$inboundSchema: z.ZodType<
  DeleteSecretRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string(),
  secretId: z.string(),
});

/** @internal */
export type DeleteSecretRequest$Outbound = {
  clientId: string;
  secretId: string;
};

/** @internal */
export const DeleteSecretRequest$outboundSchema: z.ZodType<
  DeleteSecretRequest$Outbound,
  z.ZodTypeDef,
  DeleteSecretRequest
> = z.object({
  clientId: z.string(),
  secretId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSecretRequest$ {
  /** @deprecated use `DeleteSecretRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSecretRequest$inboundSchema;
  /** @deprecated use `DeleteSecretRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSecretRequest$outboundSchema;
  /** @deprecated use `DeleteSecretRequest$Outbound` instead. */
  export type Outbound = DeleteSecretRequest$Outbound;
}

export function deleteSecretRequestToJSON(
  deleteSecretRequest: DeleteSecretRequest,
): string {
  return JSON.stringify(
    DeleteSecretRequest$outboundSchema.parse(deleteSecretRequest),
  );
}

export function deleteSecretRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSecretRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSecretRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSecretRequest' from JSON`,
  );
}

/** @internal */
export const DeleteSecretResponse$inboundSchema: z.ZodType<
  DeleteSecretResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteSecretResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DeleteSecretResponse$outboundSchema: z.ZodType<
  DeleteSecretResponse$Outbound,
  z.ZodTypeDef,
  DeleteSecretResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSecretResponse$ {
  /** @deprecated use `DeleteSecretResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteSecretResponse$inboundSchema;
  /** @deprecated use `DeleteSecretResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteSecretResponse$outboundSchema;
  /** @deprecated use `DeleteSecretResponse$Outbound` instead. */
  export type Outbound = DeleteSecretResponse$Outbound;
}

export function deleteSecretResponseToJSON(
  deleteSecretResponse: DeleteSecretResponse,
): string {
  return JSON.stringify(
    DeleteSecretResponse$outboundSchema.parse(deleteSecretResponse),
  );
}

export function deleteSecretResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSecretResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSecretResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSecretResponse' from JSON`,
  );
}
