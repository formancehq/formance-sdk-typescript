/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ReadStatsRequest = {
  /**
   * name of the ledger
   */
  ledger: string;
};

export type ReadStatsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * OK
   */
  statsResponse?: shared.StatsResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ReadStatsRequest$inboundSchema: z.ZodType<
  ReadStatsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ledger: z.string(),
});

/** @internal */
export type ReadStatsRequest$Outbound = {
  ledger: string;
};

/** @internal */
export const ReadStatsRequest$outboundSchema: z.ZodType<
  ReadStatsRequest$Outbound,
  z.ZodTypeDef,
  ReadStatsRequest
> = z.object({
  ledger: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadStatsRequest$ {
  /** @deprecated use `ReadStatsRequest$inboundSchema` instead. */
  export const inboundSchema = ReadStatsRequest$inboundSchema;
  /** @deprecated use `ReadStatsRequest$outboundSchema` instead. */
  export const outboundSchema = ReadStatsRequest$outboundSchema;
  /** @deprecated use `ReadStatsRequest$Outbound` instead. */
  export type Outbound = ReadStatsRequest$Outbound;
}

export function readStatsRequestToJSON(
  readStatsRequest: ReadStatsRequest,
): string {
  return JSON.stringify(
    ReadStatsRequest$outboundSchema.parse(readStatsRequest),
  );
}

export function readStatsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadStatsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadStatsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadStatsRequest' from JSON`,
  );
}

/** @internal */
export const ReadStatsResponse$inboundSchema: z.ZodType<
  ReadStatsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatsResponse: shared.StatsResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatsResponse": "statsResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ReadStatsResponse$Outbound = {
  ContentType: string;
  StatsResponse?: shared.StatsResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ReadStatsResponse$outboundSchema: z.ZodType<
  ReadStatsResponse$Outbound,
  z.ZodTypeDef,
  ReadStatsResponse
> = z.object({
  contentType: z.string(),
  statsResponse: shared.StatsResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statsResponse: "StatsResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadStatsResponse$ {
  /** @deprecated use `ReadStatsResponse$inboundSchema` instead. */
  export const inboundSchema = ReadStatsResponse$inboundSchema;
  /** @deprecated use `ReadStatsResponse$outboundSchema` instead. */
  export const outboundSchema = ReadStatsResponse$outboundSchema;
  /** @deprecated use `ReadStatsResponse$Outbound` instead. */
  export type Outbound = ReadStatsResponse$Outbound;
}

export function readStatsResponseToJSON(
  readStatsResponse: ReadStatsResponse,
): string {
  return JSON.stringify(
    ReadStatsResponse$outboundSchema.parse(readStatsResponse),
  );
}

export function readStatsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadStatsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadStatsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadStatsResponse' from JSON`,
  );
}
