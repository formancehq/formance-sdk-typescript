/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2DeleteAccountMetadataRequest = {
  /**
   * Use an idempotency key
   */
  idempotencyKey?: string | undefined;
  /**
   * Account address
   */
  address: string;
  /**
   * The key to remove.
   */
  key: string;
  /**
   * Name of the ledger.
   */
  ledger: string;
};

export type V2DeleteAccountMetadataResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V2DeleteAccountMetadataRequest$inboundSchema: z.ZodType<
  V2DeleteAccountMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Idempotency-Key": z.string().optional(),
  address: z.string(),
  key: z.string(),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
  });
});

/** @internal */
export type V2DeleteAccountMetadataRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
  address: string;
  key: string;
  ledger: string;
};

/** @internal */
export const V2DeleteAccountMetadataRequest$outboundSchema: z.ZodType<
  V2DeleteAccountMetadataRequest$Outbound,
  z.ZodTypeDef,
  V2DeleteAccountMetadataRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  address: z.string(),
  key: z.string(),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2DeleteAccountMetadataRequest$ {
  /** @deprecated use `V2DeleteAccountMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = V2DeleteAccountMetadataRequest$inboundSchema;
  /** @deprecated use `V2DeleteAccountMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = V2DeleteAccountMetadataRequest$outboundSchema;
  /** @deprecated use `V2DeleteAccountMetadataRequest$Outbound` instead. */
  export type Outbound = V2DeleteAccountMetadataRequest$Outbound;
}

export function v2DeleteAccountMetadataRequestToJSON(
  v2DeleteAccountMetadataRequest: V2DeleteAccountMetadataRequest,
): string {
  return JSON.stringify(
    V2DeleteAccountMetadataRequest$outboundSchema.parse(
      v2DeleteAccountMetadataRequest,
    ),
  );
}

export function v2DeleteAccountMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2DeleteAccountMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2DeleteAccountMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2DeleteAccountMetadataRequest' from JSON`,
  );
}

/** @internal */
export const V2DeleteAccountMetadataResponse$inboundSchema: z.ZodType<
  V2DeleteAccountMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2DeleteAccountMetadataResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V2DeleteAccountMetadataResponse$outboundSchema: z.ZodType<
  V2DeleteAccountMetadataResponse$Outbound,
  z.ZodTypeDef,
  V2DeleteAccountMetadataResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2DeleteAccountMetadataResponse$ {
  /** @deprecated use `V2DeleteAccountMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = V2DeleteAccountMetadataResponse$inboundSchema;
  /** @deprecated use `V2DeleteAccountMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = V2DeleteAccountMetadataResponse$outboundSchema;
  /** @deprecated use `V2DeleteAccountMetadataResponse$Outbound` instead. */
  export type Outbound = V2DeleteAccountMetadataResponse$Outbound;
}

export function v2DeleteAccountMetadataResponseToJSON(
  v2DeleteAccountMetadataResponse: V2DeleteAccountMetadataResponse,
): string {
  return JSON.stringify(
    V2DeleteAccountMetadataResponse$outboundSchema.parse(
      v2DeleteAccountMetadataResponse,
    ),
  );
}

export function v2DeleteAccountMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2DeleteAccountMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2DeleteAccountMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2DeleteAccountMetadataResponse' from JSON`,
  );
}
