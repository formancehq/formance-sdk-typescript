/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2GetAccountRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Exact address of the account. It must match the following regular expressions pattern:
     *
     * @remarks
     * ```
     * ^\w+(:\w+)*$
     * ```
     *
     */
    address: string;
    expand?: string | undefined;
    pit?: Date | undefined;
};

/** @internal */
export namespace V2GetAccountRequest$ {
    export const inboundSchema: z.ZodType<V2GetAccountRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            address: z.string(),
            expand: z.string().optional(),
            pit: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                address: v.address,
                ...(v.expand === undefined ? null : { expand: v.expand }),
                ...(v.pit === undefined ? null : { pit: v.pit }),
            };
        });

    export type Outbound = {
        ledger: string;
        address: string;
        expand?: string | undefined;
        pit?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetAccountRequest> = z
        .object({
            ledger: z.string(),
            address: z.string(),
            expand: z.string().optional(),
            pit: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                address: v.address,
                ...(v.expand === undefined ? null : { expand: v.expand }),
                ...(v.pit === undefined ? null : { pit: v.pit }),
            };
        });
}
