/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type GetPoolBalancesRequest = {
    /**
     * Filter balances by date.
     *
     * @remarks
     *
     */
    at: Date;
    /**
     * The pool ID.
     */
    poolId: string;
};

export type GetPoolBalancesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    poolBalancesResponse?: shared.PoolBalancesResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetPoolBalancesRequest$ {
    export const inboundSchema: z.ZodType<GetPoolBalancesRequest, z.ZodTypeDef, unknown> = z.object(
        {
            at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            poolId: z.string(),
        }
    );

    export type Outbound = {
        at: string;
        poolId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPoolBalancesRequest> =
        z.object({
            at: z.date().transform((v) => v.toISOString()),
            poolId: z.string(),
        });
}

/** @internal */
export namespace GetPoolBalancesResponse$ {
    export const inboundSchema: z.ZodType<GetPoolBalancesResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            PoolBalancesResponse: shared.PoolBalancesResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                PoolBalancesResponse: "poolBalancesResponse",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        PoolBalancesResponse?: shared.PoolBalancesResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPoolBalancesResponse> = z
        .object({
            contentType: z.string(),
            poolBalancesResponse: shared.PoolBalancesResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                poolBalancesResponse: "PoolBalancesResponse",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
