/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetPoolBalancesRequest = {
  /**
   * Filter balances by date.
   *
   * @remarks
   */
  at: Date;
  /**
   * The pool ID.
   */
  poolId: string;
};

export type GetPoolBalancesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * OK
   */
  poolBalancesResponse?: shared.PoolBalancesResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetPoolBalancesRequest$inboundSchema: z.ZodType<
  GetPoolBalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  poolId: z.string(),
});

/** @internal */
export type GetPoolBalancesRequest$Outbound = {
  at: string;
  poolId: string;
};

/** @internal */
export const GetPoolBalancesRequest$outboundSchema: z.ZodType<
  GetPoolBalancesRequest$Outbound,
  z.ZodTypeDef,
  GetPoolBalancesRequest
> = z.object({
  at: z.date().transform(v => v.toISOString()),
  poolId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPoolBalancesRequest$ {
  /** @deprecated use `GetPoolBalancesRequest$inboundSchema` instead. */
  export const inboundSchema = GetPoolBalancesRequest$inboundSchema;
  /** @deprecated use `GetPoolBalancesRequest$outboundSchema` instead. */
  export const outboundSchema = GetPoolBalancesRequest$outboundSchema;
  /** @deprecated use `GetPoolBalancesRequest$Outbound` instead. */
  export type Outbound = GetPoolBalancesRequest$Outbound;
}

export function getPoolBalancesRequestToJSON(
  getPoolBalancesRequest: GetPoolBalancesRequest,
): string {
  return JSON.stringify(
    GetPoolBalancesRequest$outboundSchema.parse(getPoolBalancesRequest),
  );
}

export function getPoolBalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPoolBalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPoolBalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPoolBalancesRequest' from JSON`,
  );
}

/** @internal */
export const GetPoolBalancesResponse$inboundSchema: z.ZodType<
  GetPoolBalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PoolBalancesResponse: shared.PoolBalancesResponse$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "PoolBalancesResponse": "poolBalancesResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetPoolBalancesResponse$Outbound = {
  ContentType: string;
  PoolBalancesResponse?: shared.PoolBalancesResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetPoolBalancesResponse$outboundSchema: z.ZodType<
  GetPoolBalancesResponse$Outbound,
  z.ZodTypeDef,
  GetPoolBalancesResponse
> = z.object({
  contentType: z.string(),
  poolBalancesResponse: shared.PoolBalancesResponse$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    poolBalancesResponse: "PoolBalancesResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPoolBalancesResponse$ {
  /** @deprecated use `GetPoolBalancesResponse$inboundSchema` instead. */
  export const inboundSchema = GetPoolBalancesResponse$inboundSchema;
  /** @deprecated use `GetPoolBalancesResponse$outboundSchema` instead. */
  export const outboundSchema = GetPoolBalancesResponse$outboundSchema;
  /** @deprecated use `GetPoolBalancesResponse$Outbound` instead. */
  export type Outbound = GetPoolBalancesResponse$Outbound;
}

export function getPoolBalancesResponseToJSON(
  getPoolBalancesResponse: GetPoolBalancesResponse,
): string {
  return JSON.stringify(
    GetPoolBalancesResponse$outboundSchema.parse(getPoolBalancesResponse),
  );
}

export function getPoolBalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPoolBalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPoolBalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPoolBalancesResponse' from JSON`,
  );
}
