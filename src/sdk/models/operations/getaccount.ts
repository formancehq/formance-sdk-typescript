/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as errors from "../../../sdk/models/errors";
import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetAccountRequest = {
    /**
     * Exact address of the account. It must match the following regular expressions pattern:
     *
     * @remarks
     * ```
     * ^\w+(:\w+)*$
     * ```
     *
     */
    address: string;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type GetAccountResponse = {
    /**
     * OK
     */
    accountResponse?: shared.AccountResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Error
     */
    errorResponse?: errors.ErrorResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetAccountRequest$ {
    export type Inbound = {
        address: string;
        ledger: string;
    };

    export const inboundSchema: z.ZodType<GetAccountRequest, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string(),
            ledger: z.string(),
        })
        .transform((v) => {
            return {
                address: v.address,
                ledger: v.ledger,
            };
        });

    export type Outbound = {
        address: string;
        ledger: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountRequest> = z
        .object({
            address: z.string(),
            ledger: z.string(),
        })
        .transform((v) => {
            return {
                address: v.address,
                ledger: v.ledger,
            };
        });
}

/** @internal */
export namespace GetAccountResponse$ {
    export type Inbound = {
        AccountResponse?: shared.AccountResponse$.Inbound | undefined;
        ContentType: string;
        ErrorResponse?: errors.ErrorResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetAccountResponse, z.ZodTypeDef, Inbound> = z
        .object({
            AccountResponse: shared.AccountResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            ErrorResponse: errors.ErrorResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.AccountResponse === undefined
                    ? null
                    : { accountResponse: v.AccountResponse }),
                contentType: v.ContentType,
                ...(v.ErrorResponse === undefined ? null : { errorResponse: v.ErrorResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        AccountResponse?: shared.AccountResponse$.Outbound | undefined;
        ContentType: string;
        ErrorResponse?: errors.ErrorResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountResponse> = z
        .object({
            accountResponse: shared.AccountResponse$.outboundSchema.optional(),
            contentType: z.string(),
            errorResponse: errors.ErrorResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.accountResponse === undefined
                    ? null
                    : { AccountResponse: v.accountResponse }),
                ContentType: v.contentType,
                ...(v.errorResponse === undefined ? null : { ErrorResponse: v.errorResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
