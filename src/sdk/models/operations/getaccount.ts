/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetAccountRequest = {
  /**
   * Exact address of the account. It must match the following regular expressions pattern:
   *
   * @remarks
   * ```
   * ^\w+(:\w+)*$
   * ```
   */
  address: string;
  /**
   * Name of the ledger.
   */
  ledger: string;
};

export type GetAccountResponse = {
  /**
   * OK
   */
  accountResponse?: shared.AccountResponse | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetAccountRequest$inboundSchema: z.ZodType<
  GetAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  ledger: z.string(),
});

/** @internal */
export type GetAccountRequest$Outbound = {
  address: string;
  ledger: string;
};

/** @internal */
export const GetAccountRequest$outboundSchema: z.ZodType<
  GetAccountRequest$Outbound,
  z.ZodTypeDef,
  GetAccountRequest
> = z.object({
  address: z.string(),
  ledger: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountRequest$ {
  /** @deprecated use `GetAccountRequest$inboundSchema` instead. */
  export const inboundSchema = GetAccountRequest$inboundSchema;
  /** @deprecated use `GetAccountRequest$outboundSchema` instead. */
  export const outboundSchema = GetAccountRequest$outboundSchema;
  /** @deprecated use `GetAccountRequest$Outbound` instead. */
  export type Outbound = GetAccountRequest$Outbound;
}

export function getAccountRequestToJSON(
  getAccountRequest: GetAccountRequest,
): string {
  return JSON.stringify(
    GetAccountRequest$outboundSchema.parse(getAccountRequest),
  );
}

export function getAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountRequest' from JSON`,
  );
}

/** @internal */
export const GetAccountResponse$inboundSchema: z.ZodType<
  GetAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AccountResponse: shared.AccountResponse$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "AccountResponse": "accountResponse",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetAccountResponse$Outbound = {
  AccountResponse?: shared.AccountResponse$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetAccountResponse$outboundSchema: z.ZodType<
  GetAccountResponse$Outbound,
  z.ZodTypeDef,
  GetAccountResponse
> = z.object({
  accountResponse: shared.AccountResponse$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    accountResponse: "AccountResponse",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountResponse$ {
  /** @deprecated use `GetAccountResponse$inboundSchema` instead. */
  export const inboundSchema = GetAccountResponse$inboundSchema;
  /** @deprecated use `GetAccountResponse$outboundSchema` instead. */
  export const outboundSchema = GetAccountResponse$outboundSchema;
  /** @deprecated use `GetAccountResponse$Outbound` instead. */
  export type Outbound = GetAccountResponse$Outbound;
}

export function getAccountResponseToJSON(
  getAccountResponse: GetAccountResponse,
): string {
  return JSON.stringify(
    GetAccountResponse$outboundSchema.parse(getAccountResponse),
  );
}

export function getAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountResponse' from JSON`,
  );
}
