/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ForwardBankAccountRequest = {
  forwardBankAccountRequest: shared.ForwardBankAccountRequest;
  /**
   * The bank account ID.
   */
  bankAccountId: string;
};

export type ForwardBankAccountResponse = {
  /**
   * OK
   */
  bankAccountResponse?: shared.BankAccountResponse | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ForwardBankAccountRequest$inboundSchema: z.ZodType<
  ForwardBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ForwardBankAccountRequest: shared.ForwardBankAccountRequest$inboundSchema,
  bankAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ForwardBankAccountRequest": "forwardBankAccountRequest",
  });
});

/** @internal */
export type ForwardBankAccountRequest$Outbound = {
  ForwardBankAccountRequest: shared.ForwardBankAccountRequest$Outbound;
  bankAccountId: string;
};

/** @internal */
export const ForwardBankAccountRequest$outboundSchema: z.ZodType<
  ForwardBankAccountRequest$Outbound,
  z.ZodTypeDef,
  ForwardBankAccountRequest
> = z.object({
  forwardBankAccountRequest: shared.ForwardBankAccountRequest$outboundSchema,
  bankAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    forwardBankAccountRequest: "ForwardBankAccountRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForwardBankAccountRequest$ {
  /** @deprecated use `ForwardBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = ForwardBankAccountRequest$inboundSchema;
  /** @deprecated use `ForwardBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = ForwardBankAccountRequest$outboundSchema;
  /** @deprecated use `ForwardBankAccountRequest$Outbound` instead. */
  export type Outbound = ForwardBankAccountRequest$Outbound;
}

export function forwardBankAccountRequestToJSON(
  forwardBankAccountRequest: ForwardBankAccountRequest,
): string {
  return JSON.stringify(
    ForwardBankAccountRequest$outboundSchema.parse(forwardBankAccountRequest),
  );
}

export function forwardBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<ForwardBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForwardBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForwardBankAccountRequest' from JSON`,
  );
}

/** @internal */
export const ForwardBankAccountResponse$inboundSchema: z.ZodType<
  ForwardBankAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BankAccountResponse: shared.BankAccountResponse$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "BankAccountResponse": "bankAccountResponse",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ForwardBankAccountResponse$Outbound = {
  BankAccountResponse?: shared.BankAccountResponse$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ForwardBankAccountResponse$outboundSchema: z.ZodType<
  ForwardBankAccountResponse$Outbound,
  z.ZodTypeDef,
  ForwardBankAccountResponse
> = z.object({
  bankAccountResponse: shared.BankAccountResponse$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    bankAccountResponse: "BankAccountResponse",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForwardBankAccountResponse$ {
  /** @deprecated use `ForwardBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema = ForwardBankAccountResponse$inboundSchema;
  /** @deprecated use `ForwardBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema = ForwardBankAccountResponse$outboundSchema;
  /** @deprecated use `ForwardBankAccountResponse$Outbound` instead. */
  export type Outbound = ForwardBankAccountResponse$Outbound;
}

export function forwardBankAccountResponseToJSON(
  forwardBankAccountResponse: ForwardBankAccountResponse,
): string {
  return JSON.stringify(
    ForwardBankAccountResponse$outboundSchema.parse(forwardBankAccountResponse),
  );
}

export function forwardBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<ForwardBankAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForwardBankAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForwardBankAccountResponse' from JSON`,
  );
}
