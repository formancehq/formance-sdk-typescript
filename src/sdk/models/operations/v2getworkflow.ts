/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type V2GetWorkflowRequest = {
    /**
     * The flow id
     */
    flowId: string;
};

export type V2GetWorkflowResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The workflow
     */
    v2GetWorkflowResponse?: shared.V2GetWorkflowResponse | undefined;
};

/** @internal */
export const V2GetWorkflowRequest$inboundSchema: z.ZodType<
    V2GetWorkflowRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    flowId: z.string(),
});

/** @internal */
export type V2GetWorkflowRequest$Outbound = {
    flowId: string;
};

/** @internal */
export const V2GetWorkflowRequest$outboundSchema: z.ZodType<
    V2GetWorkflowRequest$Outbound,
    z.ZodTypeDef,
    V2GetWorkflowRequest
> = z.object({
    flowId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetWorkflowRequest$ {
    /** @deprecated use `V2GetWorkflowRequest$inboundSchema` instead. */
    export const inboundSchema = V2GetWorkflowRequest$inboundSchema;
    /** @deprecated use `V2GetWorkflowRequest$outboundSchema` instead. */
    export const outboundSchema = V2GetWorkflowRequest$outboundSchema;
    /** @deprecated use `V2GetWorkflowRequest$Outbound` instead. */
    export type Outbound = V2GetWorkflowRequest$Outbound;
}

/** @internal */
export const V2GetWorkflowResponse$inboundSchema: z.ZodType<
    V2GetWorkflowResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        V2GetWorkflowResponse: shared.V2GetWorkflowResponse$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            V2GetWorkflowResponse: "v2GetWorkflowResponse",
        });
    });

/** @internal */
export type V2GetWorkflowResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    V2GetWorkflowResponse?: shared.V2GetWorkflowResponse$Outbound | undefined;
};

/** @internal */
export const V2GetWorkflowResponse$outboundSchema: z.ZodType<
    V2GetWorkflowResponse$Outbound,
    z.ZodTypeDef,
    V2GetWorkflowResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        v2GetWorkflowResponse: shared.V2GetWorkflowResponse$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            v2GetWorkflowResponse: "V2GetWorkflowResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetWorkflowResponse$ {
    /** @deprecated use `V2GetWorkflowResponse$inboundSchema` instead. */
    export const inboundSchema = V2GetWorkflowResponse$inboundSchema;
    /** @deprecated use `V2GetWorkflowResponse$outboundSchema` instead. */
    export const outboundSchema = V2GetWorkflowResponse$outboundSchema;
    /** @deprecated use `V2GetWorkflowResponse$Outbound` instead. */
    export type Outbound = V2GetWorkflowResponse$Outbound;
}
