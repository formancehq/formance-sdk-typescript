/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type V2GetInstanceStageHistoryRequest = {
    /**
     * The instance id
     */
    instanceID: string;
    /**
     * The stage number
     */
    number: number;
};

export type V2GetInstanceStageHistoryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The workflow instance stage history
     */
    v2GetWorkflowInstanceHistoryStageResponse?:
        | shared.V2GetWorkflowInstanceHistoryStageResponse
        | undefined;
};

/** @internal */
export namespace V2GetInstanceStageHistoryRequest$ {
    export const inboundSchema: z.ZodType<V2GetInstanceStageHistoryRequest, z.ZodTypeDef, unknown> =
        z.object({
            instanceID: z.string(),
            number: z.number().int(),
        });

    export type Outbound = {
        instanceID: string;
        number: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2GetInstanceStageHistoryRequest
    > = z.object({
        instanceID: z.string(),
        number: z.number().int(),
    });
}

/** @internal */
export namespace V2GetInstanceStageHistoryResponse$ {
    export const inboundSchema: z.ZodType<
        V2GetInstanceStageHistoryResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            V2GetWorkflowInstanceHistoryStageResponse:
                shared.V2GetWorkflowInstanceHistoryStageResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                V2GetWorkflowInstanceHistoryStageResponse:
                    "v2GetWorkflowInstanceHistoryStageResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2GetWorkflowInstanceHistoryStageResponse?:
            | shared.V2GetWorkflowInstanceHistoryStageResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V2GetInstanceStageHistoryResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            v2GetWorkflowInstanceHistoryStageResponse:
                shared.V2GetWorkflowInstanceHistoryStageResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                v2GetWorkflowInstanceHistoryStageResponse:
                    "V2GetWorkflowInstanceHistoryStageResponse",
            });
        });
}
