/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3GetAccountBalancesRequest = {
  /**
   * The account ID
   */
  accountID: string;
  /**
   * The asset to filter by
   */
  asset?: string | undefined;
  /**
   * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
   *
   * @remarks
   */
  cursor?: string | undefined;
  /**
   * The start of the time range to filter by
   */
  fromTimestamp?: Date | undefined;
  /**
   * The number of items to return
   */
  pageSize?: number | undefined;
  /**
   * The end of the time range to filter by
   */
  toTimestamp?: Date | undefined;
};

export type V3GetAccountBalancesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3BalancesCursorResponse?: shared.V3BalancesCursorResponse | undefined;
};

/** @internal */
export const V3GetAccountBalancesRequest$inboundSchema: z.ZodType<
  V3GetAccountBalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountID: z.string(),
  asset: z.string().optional(),
  cursor: z.string().optional(),
  fromTimestamp: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  pageSize: z.number().int().optional(),
  toTimestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type V3GetAccountBalancesRequest$Outbound = {
  accountID: string;
  asset?: string | undefined;
  cursor?: string | undefined;
  fromTimestamp?: string | undefined;
  pageSize?: number | undefined;
  toTimestamp?: string | undefined;
};

/** @internal */
export const V3GetAccountBalancesRequest$outboundSchema: z.ZodType<
  V3GetAccountBalancesRequest$Outbound,
  z.ZodTypeDef,
  V3GetAccountBalancesRequest
> = z.object({
  accountID: z.string(),
  asset: z.string().optional(),
  cursor: z.string().optional(),
  fromTimestamp: z.date().transform(v => v.toISOString()).optional(),
  pageSize: z.number().int().optional(),
  toTimestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetAccountBalancesRequest$ {
  /** @deprecated use `V3GetAccountBalancesRequest$inboundSchema` instead. */
  export const inboundSchema = V3GetAccountBalancesRequest$inboundSchema;
  /** @deprecated use `V3GetAccountBalancesRequest$outboundSchema` instead. */
  export const outboundSchema = V3GetAccountBalancesRequest$outboundSchema;
  /** @deprecated use `V3GetAccountBalancesRequest$Outbound` instead. */
  export type Outbound = V3GetAccountBalancesRequest$Outbound;
}

export function v3GetAccountBalancesRequestToJSON(
  v3GetAccountBalancesRequest: V3GetAccountBalancesRequest,
): string {
  return JSON.stringify(
    V3GetAccountBalancesRequest$outboundSchema.parse(
      v3GetAccountBalancesRequest,
    ),
  );
}

export function v3GetAccountBalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GetAccountBalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetAccountBalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetAccountBalancesRequest' from JSON`,
  );
}

/** @internal */
export const V3GetAccountBalancesResponse$inboundSchema: z.ZodType<
  V3GetAccountBalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3BalancesCursorResponse: shared.V3BalancesCursorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3BalancesCursorResponse": "v3BalancesCursorResponse",
  });
});

/** @internal */
export type V3GetAccountBalancesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3BalancesCursorResponse?:
    | shared.V3BalancesCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3GetAccountBalancesResponse$outboundSchema: z.ZodType<
  V3GetAccountBalancesResponse$Outbound,
  z.ZodTypeDef,
  V3GetAccountBalancesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3BalancesCursorResponse: shared.V3BalancesCursorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3BalancesCursorResponse: "V3BalancesCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetAccountBalancesResponse$ {
  /** @deprecated use `V3GetAccountBalancesResponse$inboundSchema` instead. */
  export const inboundSchema = V3GetAccountBalancesResponse$inboundSchema;
  /** @deprecated use `V3GetAccountBalancesResponse$outboundSchema` instead. */
  export const outboundSchema = V3GetAccountBalancesResponse$outboundSchema;
  /** @deprecated use `V3GetAccountBalancesResponse$Outbound` instead. */
  export type Outbound = V3GetAccountBalancesResponse$Outbound;
}

export function v3GetAccountBalancesResponseToJSON(
  v3GetAccountBalancesResponse: V3GetAccountBalancesResponse,
): string {
  return JSON.stringify(
    V3GetAccountBalancesResponse$outboundSchema.parse(
      v3GetAccountBalancesResponse,
    ),
  );
}

export function v3GetAccountBalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GetAccountBalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetAccountBalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetAccountBalancesResponse' from JSON`,
  );
}
