/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type V2AddMetadataToAccountRequest = {
  /**
   * Use an idempotency key
   */
  idempotencyKey?: string | undefined;
  /**
   * metadata
   */
  requestBody: { [k: string]: string };
  /**
   * Exact address of the account. It must match the following regular expressions pattern:
   *
   * @remarks
   * ```
   * ^\w+(:\w+)*$
   * ```
   */
  address: string;
  /**
   * Set the dry run mode. Dry run mode doesn't add the logs to the database or publish a message to the message broker.
   */
  dryRun?: boolean | undefined;
  /**
   * Name of the ledger.
   */
  ledger: string;
};

export type V2AddMetadataToAccountResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V2AddMetadataToAccountRequest$inboundSchema: z.ZodType<
  V2AddMetadataToAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Idempotency-Key": z.string().optional(),
  RequestBody: z.record(z.string()),
  address: z.string(),
  dryRun: z.boolean().optional(),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type V2AddMetadataToAccountRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
  RequestBody: { [k: string]: string };
  address: string;
  dryRun?: boolean | undefined;
  ledger: string;
};

/** @internal */
export const V2AddMetadataToAccountRequest$outboundSchema: z.ZodType<
  V2AddMetadataToAccountRequest$Outbound,
  z.ZodTypeDef,
  V2AddMetadataToAccountRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  requestBody: z.record(z.string()),
  address: z.string(),
  dryRun: z.boolean().optional(),
  ledger: z.string(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2AddMetadataToAccountRequest$ {
  /** @deprecated use `V2AddMetadataToAccountRequest$inboundSchema` instead. */
  export const inboundSchema = V2AddMetadataToAccountRequest$inboundSchema;
  /** @deprecated use `V2AddMetadataToAccountRequest$outboundSchema` instead. */
  export const outboundSchema = V2AddMetadataToAccountRequest$outboundSchema;
  /** @deprecated use `V2AddMetadataToAccountRequest$Outbound` instead. */
  export type Outbound = V2AddMetadataToAccountRequest$Outbound;
}

/** @internal */
export const V2AddMetadataToAccountResponse$inboundSchema: z.ZodType<
  V2AddMetadataToAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2AddMetadataToAccountResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V2AddMetadataToAccountResponse$outboundSchema: z.ZodType<
  V2AddMetadataToAccountResponse$Outbound,
  z.ZodTypeDef,
  V2AddMetadataToAccountResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2AddMetadataToAccountResponse$ {
  /** @deprecated use `V2AddMetadataToAccountResponse$inboundSchema` instead. */
  export const inboundSchema = V2AddMetadataToAccountResponse$inboundSchema;
  /** @deprecated use `V2AddMetadataToAccountResponse$outboundSchema` instead. */
  export const outboundSchema = V2AddMetadataToAccountResponse$outboundSchema;
  /** @deprecated use `V2AddMetadataToAccountResponse$Outbound` instead. */
  export type Outbound = V2AddMetadataToAccountResponse$Outbound;
}
