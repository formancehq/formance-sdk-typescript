/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type V2AddMetadataToAccountRequest = {
    /**
     * Use an idempotency key
     */
    idempotencyKey?: string | undefined;
    /**
     * metadata
     */
    requestBody: { [k: string]: string };
    /**
     * Exact address of the account. It must match the following regular expressions pattern:
     *
     * @remarks
     * ```
     * ^\w+(:\w+)*$
     * ```
     *
     */
    address: string;
    /**
     * Set the dry run mode. Dry run mode doesn't add the logs to the database or publish a message to the message broker.
     */
    dryRun?: boolean | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type V2AddMetadataToAccountResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace V2AddMetadataToAccountRequest$ {
    export const inboundSchema: z.ZodType<V2AddMetadataToAccountRequest, z.ZodTypeDef, unknown> = z
        .object({
            "Idempotency-Key": z.string().optional(),
            RequestBody: z.record(z.string()),
            address: z.string(),
            dryRun: z.boolean().optional(),
            ledger: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "Idempotency-Key": "idempotencyKey",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        "Idempotency-Key"?: string | undefined;
        RequestBody: { [k: string]: string };
        address: string;
        dryRun?: boolean | undefined;
        ledger: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2AddMetadataToAccountRequest> =
        z
            .object({
                idempotencyKey: z.string().optional(),
                requestBody: z.record(z.string()),
                address: z.string(),
                dryRun: z.boolean().optional(),
                ledger: z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    idempotencyKey: "Idempotency-Key",
                    requestBody: "RequestBody",
                });
            });
}

/** @internal */
export namespace V2AddMetadataToAccountResponse$ {
    export const inboundSchema: z.ZodType<V2AddMetadataToAccountResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2AddMetadataToAccountResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
