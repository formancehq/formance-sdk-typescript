/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2ListExportersCursor2 = {
  data: Array<shared.V2Exporter>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

export type V2ListExportersCursor1 = {
  cursor: V2ListExportersCursor2;
  data?: Array<shared.V2Exporter> | undefined;
};

/**
 * Exporters list
 */
export type V2ListExportersResponseBody = {
  cursor?: V2ListExportersCursor1 | undefined;
};

export type V2ListExportersResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Exporters list
   */
  object?: V2ListExportersResponseBody | undefined;
};

/** @internal */
export const V2ListExportersCursor2$inboundSchema: z.ZodType<
  V2ListExportersCursor2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(shared.V2Exporter$inboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/** @internal */
export type V2ListExportersCursor2$Outbound = {
  data: Array<shared.V2Exporter$Outbound>;
  hasMore: boolean;
  next?: string | undefined;
  pageSize: number;
  previous?: string | undefined;
};

/** @internal */
export const V2ListExportersCursor2$outboundSchema: z.ZodType<
  V2ListExportersCursor2$Outbound,
  z.ZodTypeDef,
  V2ListExportersCursor2
> = z.object({
  data: z.array(shared.V2Exporter$outboundSchema),
  hasMore: z.boolean(),
  next: z.string().optional(),
  pageSize: z.number().int(),
  previous: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListExportersCursor2$ {
  /** @deprecated use `V2ListExportersCursor2$inboundSchema` instead. */
  export const inboundSchema = V2ListExportersCursor2$inboundSchema;
  /** @deprecated use `V2ListExportersCursor2$outboundSchema` instead. */
  export const outboundSchema = V2ListExportersCursor2$outboundSchema;
  /** @deprecated use `V2ListExportersCursor2$Outbound` instead. */
  export type Outbound = V2ListExportersCursor2$Outbound;
}

export function v2ListExportersCursor2ToJSON(
  v2ListExportersCursor2: V2ListExportersCursor2,
): string {
  return JSON.stringify(
    V2ListExportersCursor2$outboundSchema.parse(v2ListExportersCursor2),
  );
}

export function v2ListExportersCursor2FromJSON(
  jsonString: string,
): SafeParseResult<V2ListExportersCursor2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListExportersCursor2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListExportersCursor2' from JSON`,
  );
}

/** @internal */
export const V2ListExportersCursor1$inboundSchema: z.ZodType<
  V2ListExportersCursor1,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V2ListExportersCursor2$inboundSchema),
  data: z.array(shared.V2Exporter$inboundSchema).optional(),
});

/** @internal */
export type V2ListExportersCursor1$Outbound = {
  cursor: V2ListExportersCursor2$Outbound;
  data?: Array<shared.V2Exporter$Outbound> | undefined;
};

/** @internal */
export const V2ListExportersCursor1$outboundSchema: z.ZodType<
  V2ListExportersCursor1$Outbound,
  z.ZodTypeDef,
  V2ListExportersCursor1
> = z.object({
  cursor: z.lazy(() => V2ListExportersCursor2$outboundSchema),
  data: z.array(shared.V2Exporter$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListExportersCursor1$ {
  /** @deprecated use `V2ListExportersCursor1$inboundSchema` instead. */
  export const inboundSchema = V2ListExportersCursor1$inboundSchema;
  /** @deprecated use `V2ListExportersCursor1$outboundSchema` instead. */
  export const outboundSchema = V2ListExportersCursor1$outboundSchema;
  /** @deprecated use `V2ListExportersCursor1$Outbound` instead. */
  export type Outbound = V2ListExportersCursor1$Outbound;
}

export function v2ListExportersCursor1ToJSON(
  v2ListExportersCursor1: V2ListExportersCursor1,
): string {
  return JSON.stringify(
    V2ListExportersCursor1$outboundSchema.parse(v2ListExportersCursor1),
  );
}

export function v2ListExportersCursor1FromJSON(
  jsonString: string,
): SafeParseResult<V2ListExportersCursor1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListExportersCursor1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListExportersCursor1' from JSON`,
  );
}

/** @internal */
export const V2ListExportersResponseBody$inboundSchema: z.ZodType<
  V2ListExportersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.lazy(() => V2ListExportersCursor1$inboundSchema).optional(),
});

/** @internal */
export type V2ListExportersResponseBody$Outbound = {
  cursor?: V2ListExportersCursor1$Outbound | undefined;
};

/** @internal */
export const V2ListExportersResponseBody$outboundSchema: z.ZodType<
  V2ListExportersResponseBody$Outbound,
  z.ZodTypeDef,
  V2ListExportersResponseBody
> = z.object({
  cursor: z.lazy(() => V2ListExportersCursor1$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListExportersResponseBody$ {
  /** @deprecated use `V2ListExportersResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2ListExportersResponseBody$inboundSchema;
  /** @deprecated use `V2ListExportersResponseBody$outboundSchema` instead. */
  export const outboundSchema = V2ListExportersResponseBody$outboundSchema;
  /** @deprecated use `V2ListExportersResponseBody$Outbound` instead. */
  export type Outbound = V2ListExportersResponseBody$Outbound;
}

export function v2ListExportersResponseBodyToJSON(
  v2ListExportersResponseBody: V2ListExportersResponseBody,
): string {
  return JSON.stringify(
    V2ListExportersResponseBody$outboundSchema.parse(
      v2ListExportersResponseBody,
    ),
  );
}

export function v2ListExportersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2ListExportersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListExportersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListExportersResponseBody' from JSON`,
  );
}

/** @internal */
export const V2ListExportersResponse$inboundSchema: z.ZodType<
  V2ListExportersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => V2ListExportersResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2ListExportersResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: V2ListExportersResponseBody$Outbound | undefined;
};

/** @internal */
export const V2ListExportersResponse$outboundSchema: z.ZodType<
  V2ListExportersResponse$Outbound,
  z.ZodTypeDef,
  V2ListExportersResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => V2ListExportersResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListExportersResponse$ {
  /** @deprecated use `V2ListExportersResponse$inboundSchema` instead. */
  export const inboundSchema = V2ListExportersResponse$inboundSchema;
  /** @deprecated use `V2ListExportersResponse$outboundSchema` instead. */
  export const outboundSchema = V2ListExportersResponse$outboundSchema;
  /** @deprecated use `V2ListExportersResponse$Outbound` instead. */
  export type Outbound = V2ListExportersResponse$Outbound;
}

export function v2ListExportersResponseToJSON(
  v2ListExportersResponse: V2ListExportersResponse,
): string {
  return JSON.stringify(
    V2ListExportersResponse$outboundSchema.parse(v2ListExportersResponse),
  );
}

export function v2ListExportersResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2ListExportersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2ListExportersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2ListExportersResponse' from JSON`,
  );
}
