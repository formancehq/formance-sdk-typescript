/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetWalletRequest = {
  id: string;
};

export type GetWalletResponse = {
  /**
   * Wallet
   */
  activityGetWalletOutput?: shared.ActivityGetWalletOutput | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetWalletRequest$inboundSchema: z.ZodType<
  GetWalletRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetWalletRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetWalletRequest$outboundSchema: z.ZodType<
  GetWalletRequest$Outbound,
  z.ZodTypeDef,
  GetWalletRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletRequest$ {
  /** @deprecated use `GetWalletRequest$inboundSchema` instead. */
  export const inboundSchema = GetWalletRequest$inboundSchema;
  /** @deprecated use `GetWalletRequest$outboundSchema` instead. */
  export const outboundSchema = GetWalletRequest$outboundSchema;
  /** @deprecated use `GetWalletRequest$Outbound` instead. */
  export type Outbound = GetWalletRequest$Outbound;
}

export function getWalletRequestToJSON(
  getWalletRequest: GetWalletRequest,
): string {
  return JSON.stringify(
    GetWalletRequest$outboundSchema.parse(getWalletRequest),
  );
}

export function getWalletRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletRequest' from JSON`,
  );
}

/** @internal */
export const GetWalletResponse$inboundSchema: z.ZodType<
  GetWalletResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ActivityGetWalletOutput: shared.ActivityGetWalletOutput$inboundSchema
    .optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ActivityGetWalletOutput": "activityGetWalletOutput",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetWalletResponse$Outbound = {
  ActivityGetWalletOutput?: shared.ActivityGetWalletOutput$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetWalletResponse$outboundSchema: z.ZodType<
  GetWalletResponse$Outbound,
  z.ZodTypeDef,
  GetWalletResponse
> = z.object({
  activityGetWalletOutput: shared.ActivityGetWalletOutput$outboundSchema
    .optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    activityGetWalletOutput: "ActivityGetWalletOutput",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWalletResponse$ {
  /** @deprecated use `GetWalletResponse$inboundSchema` instead. */
  export const inboundSchema = GetWalletResponse$inboundSchema;
  /** @deprecated use `GetWalletResponse$outboundSchema` instead. */
  export const outboundSchema = GetWalletResponse$outboundSchema;
  /** @deprecated use `GetWalletResponse$Outbound` instead. */
  export type Outbound = GetWalletResponse$Outbound;
}

export function getWalletResponseToJSON(
  getWalletResponse: GetWalletResponse,
): string {
  return JSON.stringify(
    GetWalletResponse$outboundSchema.parse(getWalletResponse),
  );
}

export function getWalletResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWalletResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWalletResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWalletResponse' from JSON`,
  );
}
