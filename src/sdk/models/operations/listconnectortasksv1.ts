/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ListConnectorTasksV1Request = {
  /**
   * The name of the connector.
   */
  connector: shared.Connector;
  /**
   * The connector ID.
   */
  connectorId: string;
  /**
   * Parameter used in pagination requests. Maximum page size is set to 15.
   *
   * @remarks
   * Set to the value of next for the next page of results.
   * Set to the value of previous for the previous page of results.
   * No other parameters can be set when this parameter is set.
   */
  cursor?: string | undefined;
  /**
   * The maximum number of results to return per page.
   *
   * @remarks
   */
  pageSize?: number | undefined;
};

export type ListConnectorTasksV1Response = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  tasksCursor?: shared.TasksCursor | undefined;
};

/** @internal */
export const ListConnectorTasksV1Request$inboundSchema: z.ZodType<
  ListConnectorTasksV1Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  connector: shared.Connector$inboundSchema,
  connectorId: z.string(),
  cursor: z.string().optional(),
  pageSize: z.number().int().default(15),
});

/** @internal */
export type ListConnectorTasksV1Request$Outbound = {
  connector: string;
  connectorId: string;
  cursor?: string | undefined;
  pageSize: number;
};

/** @internal */
export const ListConnectorTasksV1Request$outboundSchema: z.ZodType<
  ListConnectorTasksV1Request$Outbound,
  z.ZodTypeDef,
  ListConnectorTasksV1Request
> = z.object({
  connector: shared.Connector$outboundSchema,
  connectorId: z.string(),
  cursor: z.string().optional(),
  pageSize: z.number().int().default(15),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectorTasksV1Request$ {
  /** @deprecated use `ListConnectorTasksV1Request$inboundSchema` instead. */
  export const inboundSchema = ListConnectorTasksV1Request$inboundSchema;
  /** @deprecated use `ListConnectorTasksV1Request$outboundSchema` instead. */
  export const outboundSchema = ListConnectorTasksV1Request$outboundSchema;
  /** @deprecated use `ListConnectorTasksV1Request$Outbound` instead. */
  export type Outbound = ListConnectorTasksV1Request$Outbound;
}

export function listConnectorTasksV1RequestToJSON(
  listConnectorTasksV1Request: ListConnectorTasksV1Request,
): string {
  return JSON.stringify(
    ListConnectorTasksV1Request$outboundSchema.parse(
      listConnectorTasksV1Request,
    ),
  );
}

export function listConnectorTasksV1RequestFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectorTasksV1Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectorTasksV1Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectorTasksV1Request' from JSON`,
  );
}

/** @internal */
export const ListConnectorTasksV1Response$inboundSchema: z.ZodType<
  ListConnectorTasksV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  TasksCursor: shared.TasksCursor$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "TasksCursor": "tasksCursor",
  });
});

/** @internal */
export type ListConnectorTasksV1Response$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  TasksCursor?: shared.TasksCursor$Outbound | undefined;
};

/** @internal */
export const ListConnectorTasksV1Response$outboundSchema: z.ZodType<
  ListConnectorTasksV1Response$Outbound,
  z.ZodTypeDef,
  ListConnectorTasksV1Response
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  tasksCursor: shared.TasksCursor$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    tasksCursor: "TasksCursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListConnectorTasksV1Response$ {
  /** @deprecated use `ListConnectorTasksV1Response$inboundSchema` instead. */
  export const inboundSchema = ListConnectorTasksV1Response$inboundSchema;
  /** @deprecated use `ListConnectorTasksV1Response$outboundSchema` instead. */
  export const outboundSchema = ListConnectorTasksV1Response$outboundSchema;
  /** @deprecated use `ListConnectorTasksV1Response$Outbound` instead. */
  export type Outbound = ListConnectorTasksV1Response$Outbound;
}

export function listConnectorTasksV1ResponseToJSON(
  listConnectorTasksV1Response: ListConnectorTasksV1Response,
): string {
  return JSON.stringify(
    ListConnectorTasksV1Response$outboundSchema.parse(
      listConnectorTasksV1Response,
    ),
  );
}

export function listConnectorTasksV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListConnectorTasksV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListConnectorTasksV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListConnectorTasksV1Response' from JSON`,
  );
}
