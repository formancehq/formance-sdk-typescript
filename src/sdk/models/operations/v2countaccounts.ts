/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2CountAccountsRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    pit?: Date | undefined;
    query?: Record<string, any> | undefined;
};

export type V2CountAccountsResponse = {
    headers: Record<string, Array<string>>;
};

/** @internal */
export namespace V2CountAccountsRequest$ {
    export const inboundSchema: z.ZodType<V2CountAccountsRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            pit: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            query: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.pit === undefined ? null : { pit: v.pit }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });

    export type Outbound = {
        ledger: string;
        pit?: string | undefined;
        query?: Record<string, any> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2CountAccountsRequest> = z
        .object({
            ledger: z.string(),
            pit: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            query: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.pit === undefined ? null : { pit: v.pit }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });
}

/** @internal */
export namespace V2CountAccountsResponse$ {
    export const inboundSchema: z.ZodType<V2CountAccountsResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                headers: v.Headers,
            };
        });

    export type Outbound = {
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2CountAccountsResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                Headers: v.headers,
            };
        });
}
