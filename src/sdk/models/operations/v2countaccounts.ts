/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2CountAccountsRequest = {
  /**
   * Name of the ledger.
   */
  ledger: string;
  pit?: Date | undefined;
  query?: { [k: string]: any } | undefined;
};

export type V2CountAccountsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V2CountAccountsRequest$inboundSchema: z.ZodType<
  V2CountAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ledger: z.string(),
  pit: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  query: z.record(z.any()).optional(),
});

/** @internal */
export type V2CountAccountsRequest$Outbound = {
  ledger: string;
  pit?: string | undefined;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const V2CountAccountsRequest$outboundSchema: z.ZodType<
  V2CountAccountsRequest$Outbound,
  z.ZodTypeDef,
  V2CountAccountsRequest
> = z.object({
  ledger: z.string(),
  pit: z.date().transform(v => v.toISOString()).optional(),
  query: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CountAccountsRequest$ {
  /** @deprecated use `V2CountAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = V2CountAccountsRequest$inboundSchema;
  /** @deprecated use `V2CountAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = V2CountAccountsRequest$outboundSchema;
  /** @deprecated use `V2CountAccountsRequest$Outbound` instead. */
  export type Outbound = V2CountAccountsRequest$Outbound;
}

export function v2CountAccountsRequestToJSON(
  v2CountAccountsRequest: V2CountAccountsRequest,
): string {
  return JSON.stringify(
    V2CountAccountsRequest$outboundSchema.parse(v2CountAccountsRequest),
  );
}

export function v2CountAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2CountAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CountAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CountAccountsRequest' from JSON`,
  );
}

/** @internal */
export const V2CountAccountsResponse$inboundSchema: z.ZodType<
  V2CountAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2CountAccountsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V2CountAccountsResponse$outboundSchema: z.ZodType<
  V2CountAccountsResponse$Outbound,
  z.ZodTypeDef,
  V2CountAccountsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CountAccountsResponse$ {
  /** @deprecated use `V2CountAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = V2CountAccountsResponse$inboundSchema;
  /** @deprecated use `V2CountAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = V2CountAccountsResponse$outboundSchema;
  /** @deprecated use `V2CountAccountsResponse$Outbound` instead. */
  export type Outbound = V2CountAccountsResponse$Outbound;
}

export function v2CountAccountsResponseToJSON(
  v2CountAccountsResponse: V2CountAccountsResponse,
): string {
  return JSON.stringify(
    V2CountAccountsResponse$outboundSchema.parse(v2CountAccountsResponse),
  );
}

export function v2CountAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2CountAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CountAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CountAccountsResponse' from JSON`,
  );
}
