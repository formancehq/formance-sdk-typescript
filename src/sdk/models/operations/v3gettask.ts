/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3GetTaskRequest = {
  /**
   * The task ID
   */
  taskID: string;
};

export type V3GetTaskResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3GetTaskResponse?: shared.V3GetTaskResponse | undefined;
};

/** @internal */
export const V3GetTaskRequest$inboundSchema: z.ZodType<
  V3GetTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  taskID: z.string(),
});

/** @internal */
export type V3GetTaskRequest$Outbound = {
  taskID: string;
};

/** @internal */
export const V3GetTaskRequest$outboundSchema: z.ZodType<
  V3GetTaskRequest$Outbound,
  z.ZodTypeDef,
  V3GetTaskRequest
> = z.object({
  taskID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetTaskRequest$ {
  /** @deprecated use `V3GetTaskRequest$inboundSchema` instead. */
  export const inboundSchema = V3GetTaskRequest$inboundSchema;
  /** @deprecated use `V3GetTaskRequest$outboundSchema` instead. */
  export const outboundSchema = V3GetTaskRequest$outboundSchema;
  /** @deprecated use `V3GetTaskRequest$Outbound` instead. */
  export type Outbound = V3GetTaskRequest$Outbound;
}

export function v3GetTaskRequestToJSON(
  v3GetTaskRequest: V3GetTaskRequest,
): string {
  return JSON.stringify(
    V3GetTaskRequest$outboundSchema.parse(v3GetTaskRequest),
  );
}

export function v3GetTaskRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GetTaskRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetTaskRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetTaskRequest' from JSON`,
  );
}

/** @internal */
export const V3GetTaskResponse$inboundSchema: z.ZodType<
  V3GetTaskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3GetTaskResponse: shared.V3GetTaskResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3GetTaskResponse": "v3GetTaskResponse",
  });
});

/** @internal */
export type V3GetTaskResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3GetTaskResponse?: shared.V3GetTaskResponse$Outbound | undefined;
};

/** @internal */
export const V3GetTaskResponse$outboundSchema: z.ZodType<
  V3GetTaskResponse$Outbound,
  z.ZodTypeDef,
  V3GetTaskResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3GetTaskResponse: shared.V3GetTaskResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3GetTaskResponse: "V3GetTaskResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GetTaskResponse$ {
  /** @deprecated use `V3GetTaskResponse$inboundSchema` instead. */
  export const inboundSchema = V3GetTaskResponse$inboundSchema;
  /** @deprecated use `V3GetTaskResponse$outboundSchema` instead. */
  export const outboundSchema = V3GetTaskResponse$outboundSchema;
  /** @deprecated use `V3GetTaskResponse$Outbound` instead. */
  export type Outbound = V3GetTaskResponse$Outbound;
}

export function v3GetTaskResponseToJSON(
  v3GetTaskResponse: V3GetTaskResponse,
): string {
  return JSON.stringify(
    V3GetTaskResponse$outboundSchema.parse(v3GetTaskResponse),
  );
}

export function v3GetTaskResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GetTaskResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GetTaskResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GetTaskResponse' from JSON`,
  );
}
