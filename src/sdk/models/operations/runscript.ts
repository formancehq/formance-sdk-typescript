/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type RunScriptRequest = {
    script: shared.Script;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    preview?: boolean | undefined;
};

export type RunScriptResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * On success, it will return a 200 status code, and the resulting transaction under the `transaction` field.
     *
     * @remarks
     *
     * On failure, it will also return a 200 status code, and the following fields:
     *   - `details`: contains a URL. When there is an error parsing Numscript, the result can be difficult to readâ€”the provided URL will render the error in an easy-to-read format.
     *   - `errorCode` and `error_code` (deprecated): contains the string code of the error
     *   - `errorMessage` and `error_message` (deprecated): contains a human-readable indication of what went wrong, for example that an account had insufficient funds, or that there was an error in the provided Numscript.
     *
     */
    scriptResponse?: shared.ScriptResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace RunScriptRequest$ {
    export type Inbound = {
        Script: shared.Script$.Inbound;
        ledger: string;
        preview?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<RunScriptRequest, z.ZodTypeDef, Inbound> = z
        .object({
            Script: shared.Script$.inboundSchema,
            ledger: z.string(),
            preview: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                script: v.Script,
                ledger: v.ledger,
                ...(v.preview === undefined ? null : { preview: v.preview }),
            };
        });

    export type Outbound = {
        Script: shared.Script$.Outbound;
        ledger: string;
        preview?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunScriptRequest> = z
        .object({
            script: shared.Script$.outboundSchema,
            ledger: z.string(),
            preview: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                Script: v.script,
                ledger: v.ledger,
                ...(v.preview === undefined ? null : { preview: v.preview }),
            };
        });
}

/** @internal */
export namespace RunScriptResponse$ {
    export type Inbound = {
        ContentType: string;
        ScriptResponse?: shared.ScriptResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<RunScriptResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            ScriptResponse: shared.ScriptResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ScriptResponse === undefined ? null : { scriptResponse: v.ScriptResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ScriptResponse?: shared.ScriptResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunScriptResponse> = z
        .object({
            contentType: z.string(),
            scriptResponse: shared.ScriptResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.scriptResponse === undefined ? null : { ScriptResponse: v.scriptResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
