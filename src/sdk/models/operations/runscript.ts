/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type RunScriptRequest = {
    script: shared.Script;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    preview?: boolean | undefined;
};

export type RunScriptResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * On success, it will return a 200 status code, and the resulting transaction under the `transaction` field.
     *
     * @remarks
     *
     * On failure, it will also return a 200 status code, and the following fields:
     *   - `details`: contains a URL. When there is an error parsing Numscript, the result can be difficult to readâ€”the provided URL will render the error in an easy-to-read format.
     *   - `errorCode` and `error_code` (deprecated): contains the string code of the error
     *   - `errorMessage` and `error_message` (deprecated): contains a human-readable indication of what went wrong, for example that an account had insufficient funds, or that there was an error in the provided Numscript.
     *
     */
    scriptResponse?: shared.ScriptResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const RunScriptRequest$inboundSchema: z.ZodType<RunScriptRequest, z.ZodTypeDef, unknown> = z
    .object({
        Script: shared.Script$inboundSchema,
        ledger: z.string(),
        preview: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Script: "script",
        });
    });

/** @internal */
export type RunScriptRequest$Outbound = {
    Script: shared.Script$Outbound;
    ledger: string;
    preview?: boolean | undefined;
};

/** @internal */
export const RunScriptRequest$outboundSchema: z.ZodType<
    RunScriptRequest$Outbound,
    z.ZodTypeDef,
    RunScriptRequest
> = z
    .object({
        script: shared.Script$outboundSchema,
        ledger: z.string(),
        preview: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            script: "Script",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunScriptRequest$ {
    /** @deprecated use `RunScriptRequest$inboundSchema` instead. */
    export const inboundSchema = RunScriptRequest$inboundSchema;
    /** @deprecated use `RunScriptRequest$outboundSchema` instead. */
    export const outboundSchema = RunScriptRequest$outboundSchema;
    /** @deprecated use `RunScriptRequest$Outbound` instead. */
    export type Outbound = RunScriptRequest$Outbound;
}

/** @internal */
export const RunScriptResponse$inboundSchema: z.ZodType<RunScriptResponse, z.ZodTypeDef, unknown> =
    z
        .object({
            ContentType: z.string(),
            ScriptResponse: shared.ScriptResponse$inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                ScriptResponse: "scriptResponse",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

/** @internal */
export type RunScriptResponse$Outbound = {
    ContentType: string;
    ScriptResponse?: shared.ScriptResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const RunScriptResponse$outboundSchema: z.ZodType<
    RunScriptResponse$Outbound,
    z.ZodTypeDef,
    RunScriptResponse
> = z
    .object({
        contentType: z.string(),
        scriptResponse: shared.ScriptResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            scriptResponse: "ScriptResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunScriptResponse$ {
    /** @deprecated use `RunScriptResponse$inboundSchema` instead. */
    export const inboundSchema = RunScriptResponse$inboundSchema;
    /** @deprecated use `RunScriptResponse$outboundSchema` instead. */
    export const outboundSchema = RunScriptResponse$outboundSchema;
    /** @deprecated use `RunScriptResponse$Outbound` instead. */
    export type Outbound = RunScriptResponse$Outbound;
}
