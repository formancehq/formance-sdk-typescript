/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type V2CreateBulkRequest = {
    requestBody?: Array<shared.V2BulkElement> | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type V2CreateBulkResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2BulkResponse?: shared.V2BulkResponse | undefined;
};

/** @internal */
export const V2CreateBulkRequest$inboundSchema: z.ZodType<
    V2CreateBulkRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.array(shared.V2BulkElement$inboundSchema).optional(),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type V2CreateBulkRequest$Outbound = {
    RequestBody?: Array<shared.V2BulkElement$Outbound> | undefined;
    ledger: string;
};

/** @internal */
export const V2CreateBulkRequest$outboundSchema: z.ZodType<
    V2CreateBulkRequest$Outbound,
    z.ZodTypeDef,
    V2CreateBulkRequest
> = z
    .object({
        requestBody: z.array(shared.V2BulkElement$outboundSchema).optional(),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateBulkRequest$ {
    /** @deprecated use `V2CreateBulkRequest$inboundSchema` instead. */
    export const inboundSchema = V2CreateBulkRequest$inboundSchema;
    /** @deprecated use `V2CreateBulkRequest$outboundSchema` instead. */
    export const outboundSchema = V2CreateBulkRequest$outboundSchema;
    /** @deprecated use `V2CreateBulkRequest$Outbound` instead. */
    export type Outbound = V2CreateBulkRequest$Outbound;
}

/** @internal */
export const V2CreateBulkResponse$inboundSchema: z.ZodType<
    V2CreateBulkResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        V2BulkResponse: shared.V2BulkResponse$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            V2BulkResponse: "v2BulkResponse",
        });
    });

/** @internal */
export type V2CreateBulkResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    V2BulkResponse?: shared.V2BulkResponse$Outbound | undefined;
};

/** @internal */
export const V2CreateBulkResponse$outboundSchema: z.ZodType<
    V2CreateBulkResponse$Outbound,
    z.ZodTypeDef,
    V2CreateBulkResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        v2BulkResponse: shared.V2BulkResponse$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            v2BulkResponse: "V2BulkResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateBulkResponse$ {
    /** @deprecated use `V2CreateBulkResponse$inboundSchema` instead. */
    export const inboundSchema = V2CreateBulkResponse$inboundSchema;
    /** @deprecated use `V2CreateBulkResponse$outboundSchema` instead. */
    export const outboundSchema = V2CreateBulkResponse$outboundSchema;
    /** @deprecated use `V2CreateBulkResponse$Outbound` instead. */
    export type Outbound = V2CreateBulkResponse$Outbound;
}
