/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type V2CreateBulkRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    requestBody?: Array<shared.V2BulkElement> | undefined;
};

/** @internal */
export namespace V2CreateBulkRequest$ {
    export const inboundSchema: z.ZodType<V2CreateBulkRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            RequestBody: z.array(shared.V2BulkElement$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        ledger: string;
        RequestBody?: Array<shared.V2BulkElement$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2CreateBulkRequest> = z
        .object({
            ledger: z.string(),
            requestBody: z.array(shared.V2BulkElement$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}
