/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2CreateBulkRequest = {
  requestBody?: Array<shared.V2BulkElement> | undefined;
  /**
   * Make bulk atomic
   */
  atomic?: boolean | undefined;
  /**
   * Continue on failure
   */
  continueOnFailure?: boolean | undefined;
  /**
   * Name of the ledger.
   */
  ledger: string;
  /**
   * Process bulk elements in parallel
   */
  parallel?: boolean | undefined;
};

export type V2CreateBulkResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v2BulkResponse?: shared.V2BulkResponse | undefined;
};

/** @internal */
export const V2CreateBulkRequest$inboundSchema: z.ZodType<
  V2CreateBulkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.array(shared.V2BulkElement$inboundSchema).optional(),
  atomic: z.boolean().optional(),
  continueOnFailure: z.boolean().optional(),
  ledger: z.string(),
  parallel: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type V2CreateBulkRequest$Outbound = {
  RequestBody?: Array<shared.V2BulkElement$Outbound> | undefined;
  atomic?: boolean | undefined;
  continueOnFailure?: boolean | undefined;
  ledger: string;
  parallel?: boolean | undefined;
};

/** @internal */
export const V2CreateBulkRequest$outboundSchema: z.ZodType<
  V2CreateBulkRequest$Outbound,
  z.ZodTypeDef,
  V2CreateBulkRequest
> = z.object({
  requestBody: z.array(shared.V2BulkElement$outboundSchema).optional(),
  atomic: z.boolean().optional(),
  continueOnFailure: z.boolean().optional(),
  ledger: z.string(),
  parallel: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateBulkRequest$ {
  /** @deprecated use `V2CreateBulkRequest$inboundSchema` instead. */
  export const inboundSchema = V2CreateBulkRequest$inboundSchema;
  /** @deprecated use `V2CreateBulkRequest$outboundSchema` instead. */
  export const outboundSchema = V2CreateBulkRequest$outboundSchema;
  /** @deprecated use `V2CreateBulkRequest$Outbound` instead. */
  export type Outbound = V2CreateBulkRequest$Outbound;
}

export function v2CreateBulkRequestToJSON(
  v2CreateBulkRequest: V2CreateBulkRequest,
): string {
  return JSON.stringify(
    V2CreateBulkRequest$outboundSchema.parse(v2CreateBulkRequest),
  );
}

export function v2CreateBulkRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2CreateBulkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreateBulkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreateBulkRequest' from JSON`,
  );
}

/** @internal */
export const V2CreateBulkResponse$inboundSchema: z.ZodType<
  V2CreateBulkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2BulkResponse: shared.V2BulkResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2BulkResponse": "v2BulkResponse",
  });
});

/** @internal */
export type V2CreateBulkResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2BulkResponse?: shared.V2BulkResponse$Outbound | undefined;
};

/** @internal */
export const V2CreateBulkResponse$outboundSchema: z.ZodType<
  V2CreateBulkResponse$Outbound,
  z.ZodTypeDef,
  V2CreateBulkResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2BulkResponse: shared.V2BulkResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2BulkResponse: "V2BulkResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateBulkResponse$ {
  /** @deprecated use `V2CreateBulkResponse$inboundSchema` instead. */
  export const inboundSchema = V2CreateBulkResponse$inboundSchema;
  /** @deprecated use `V2CreateBulkResponse$outboundSchema` instead. */
  export const outboundSchema = V2CreateBulkResponse$outboundSchema;
  /** @deprecated use `V2CreateBulkResponse$Outbound` instead. */
  export type Outbound = V2CreateBulkResponse$Outbound;
}

export function v2CreateBulkResponseToJSON(
  v2CreateBulkResponse: V2CreateBulkResponse,
): string {
  return JSON.stringify(
    V2CreateBulkResponse$outboundSchema.parse(v2CreateBulkResponse),
  );
}

export function v2CreateBulkResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2CreateBulkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreateBulkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreateBulkResponse' from JSON`,
  );
}
