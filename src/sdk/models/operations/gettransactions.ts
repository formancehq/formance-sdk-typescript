/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetTransactionsRequest = {
  /**
   * Parameter used in pagination requests.
   *
   * @remarks
   * Set to the value of next for the next page of results.
   * Set to the value of previous for the previous page of results.
   * No other parameters can be set when the cursor is set.
   */
  cursor?: string | undefined;
  /**
   * The maximum number of results to return per page
   */
  pageSize?: number | undefined;
  /**
   * A wallet ID to filter on
   */
  walletID?: string | undefined;
};

export type GetTransactionsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * OK
   */
  getTransactionsResponse?: shared.GetTransactionsResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetTransactionsRequest$inboundSchema: z.ZodType<
  GetTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().default(15),
  walletID: z.string().optional(),
});

/** @internal */
export type GetTransactionsRequest$Outbound = {
  cursor?: string | undefined;
  pageSize: number;
  walletID?: string | undefined;
};

/** @internal */
export const GetTransactionsRequest$outboundSchema: z.ZodType<
  GetTransactionsRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsRequest
> = z.object({
  cursor: z.string().optional(),
  pageSize: z.number().int().default(15),
  walletID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsRequest$ {
  /** @deprecated use `GetTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsRequest$inboundSchema;
  /** @deprecated use `GetTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsRequest$outboundSchema;
  /** @deprecated use `GetTransactionsRequest$Outbound` instead. */
  export type Outbound = GetTransactionsRequest$Outbound;
}

export function getTransactionsRequestToJSON(
  getTransactionsRequest: GetTransactionsRequest,
): string {
  return JSON.stringify(
    GetTransactionsRequest$outboundSchema.parse(getTransactionsRequest),
  );
}

export function getTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const GetTransactionsResponse$inboundSchema: z.ZodType<
  GetTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  GetTransactionsResponse: shared.GetTransactionsResponse$inboundSchema
    .optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "GetTransactionsResponse": "getTransactionsResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetTransactionsResponse$Outbound = {
  ContentType: string;
  GetTransactionsResponse?: shared.GetTransactionsResponse$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetTransactionsResponse$outboundSchema: z.ZodType<
  GetTransactionsResponse$Outbound,
  z.ZodTypeDef,
  GetTransactionsResponse
> = z.object({
  contentType: z.string(),
  getTransactionsResponse: shared.GetTransactionsResponse$outboundSchema
    .optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    getTransactionsResponse: "GetTransactionsResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsResponse$ {
  /** @deprecated use `GetTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsResponse$inboundSchema;
  /** @deprecated use `GetTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsResponse$outboundSchema;
  /** @deprecated use `GetTransactionsResponse$Outbound` instead. */
  export type Outbound = GetTransactionsResponse$Outbound;
}

export function getTransactionsResponseToJSON(
  getTransactionsResponse: GetTransactionsResponse,
): string {
  return JSON.stringify(
    GetTransactionsResponse$outboundSchema.parse(getTransactionsResponse),
  );
}

export function getTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsResponse' from JSON`,
  );
}
