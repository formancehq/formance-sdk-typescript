/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as errors from "../errors";
import * as shared from "../shared";
import * as z from "zod";

export type GetTransactionsRequest = {
    /**
     * Parameter used in pagination requests.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when the cursor is set.
     *
     */
    cursor?: string | undefined;
    /**
     * The maximum number of results to return per page
     */
    pageSize?: number | undefined;
    /**
     * A wallet ID to filter on
     */
    walletID?: string | undefined;
};

export type GetTransactionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    getTransactionsResponse?: shared.GetTransactionsResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    walletsErrorResponse?: errors.WalletsErrorResponse | undefined;
};

/** @internal */
export namespace GetTransactionsRequest$ {
    export type Inbound = {
        cursor?: string | undefined;
        pageSize?: number | undefined;
        walletID?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransactionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            pageSize: z.number().int().default(15),
            walletID: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                pageSize: v.pageSize,
                ...(v.walletID === undefined ? null : { walletID: v.walletID }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        pageSize: number;
        walletID?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionsRequest> = z
        .object({
            cursor: z.string().optional(),
            pageSize: z.number().int().default(15),
            walletID: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                pageSize: v.pageSize,
                ...(v.walletID === undefined ? null : { walletID: v.walletID }),
            };
        });
}

/** @internal */
export namespace GetTransactionsResponse$ {
    export type Inbound = {
        ContentType: string;
        GetTransactionsResponse?: shared.GetTransactionsResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        walletsErrorResponse?: errors.WalletsErrorResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransactionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            GetTransactionsResponse: shared.GetTransactionsResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            walletsErrorResponse: errors.WalletsErrorResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.GetTransactionsResponse === undefined
                    ? null
                    : { getTransactionsResponse: v.GetTransactionsResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.walletsErrorResponse === undefined
                    ? null
                    : { walletsErrorResponse: v.walletsErrorResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        GetTransactionsResponse?: shared.GetTransactionsResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        walletsErrorResponse?: errors.WalletsErrorResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionsResponse> = z
        .object({
            contentType: z.string(),
            getTransactionsResponse: shared.GetTransactionsResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            walletsErrorResponse: errors.WalletsErrorResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.getTransactionsResponse === undefined
                    ? null
                    : { GetTransactionsResponse: v.getTransactionsResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.walletsErrorResponse === undefined
                    ? null
                    : { walletsErrorResponse: v.walletsErrorResponse }),
            };
        });
}
