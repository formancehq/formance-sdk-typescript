/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Created exporter
 */
export type V2CreateExporterResponseBody = {
  data: shared.V2Exporter;
};

export type V2CreateExporterResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Created exporter
   */
  object?: V2CreateExporterResponseBody | undefined;
};

/** @internal */
export const V2CreateExporterResponseBody$inboundSchema: z.ZodType<
  V2CreateExporterResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: shared.V2Exporter$inboundSchema,
});

/** @internal */
export type V2CreateExporterResponseBody$Outbound = {
  data: shared.V2Exporter$Outbound;
};

/** @internal */
export const V2CreateExporterResponseBody$outboundSchema: z.ZodType<
  V2CreateExporterResponseBody$Outbound,
  z.ZodTypeDef,
  V2CreateExporterResponseBody
> = z.object({
  data: shared.V2Exporter$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateExporterResponseBody$ {
  /** @deprecated use `V2CreateExporterResponseBody$inboundSchema` instead. */
  export const inboundSchema = V2CreateExporterResponseBody$inboundSchema;
  /** @deprecated use `V2CreateExporterResponseBody$outboundSchema` instead. */
  export const outboundSchema = V2CreateExporterResponseBody$outboundSchema;
  /** @deprecated use `V2CreateExporterResponseBody$Outbound` instead. */
  export type Outbound = V2CreateExporterResponseBody$Outbound;
}

export function v2CreateExporterResponseBodyToJSON(
  v2CreateExporterResponseBody: V2CreateExporterResponseBody,
): string {
  return JSON.stringify(
    V2CreateExporterResponseBody$outboundSchema.parse(
      v2CreateExporterResponseBody,
    ),
  );
}

export function v2CreateExporterResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2CreateExporterResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreateExporterResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreateExporterResponseBody' from JSON`,
  );
}

/** @internal */
export const V2CreateExporterResponse$inboundSchema: z.ZodType<
  V2CreateExporterResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  object: z.lazy(() => V2CreateExporterResponseBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2CreateExporterResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  object?: V2CreateExporterResponseBody$Outbound | undefined;
};

/** @internal */
export const V2CreateExporterResponse$outboundSchema: z.ZodType<
  V2CreateExporterResponse$Outbound,
  z.ZodTypeDef,
  V2CreateExporterResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  object: z.lazy(() => V2CreateExporterResponseBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateExporterResponse$ {
  /** @deprecated use `V2CreateExporterResponse$inboundSchema` instead. */
  export const inboundSchema = V2CreateExporterResponse$inboundSchema;
  /** @deprecated use `V2CreateExporterResponse$outboundSchema` instead. */
  export const outboundSchema = V2CreateExporterResponse$outboundSchema;
  /** @deprecated use `V2CreateExporterResponse$Outbound` instead. */
  export type Outbound = V2CreateExporterResponse$Outbound;
}

export function v2CreateExporterResponseToJSON(
  v2CreateExporterResponse: V2CreateExporterResponse,
): string {
  return JSON.stringify(
    V2CreateExporterResponse$outboundSchema.parse(v2CreateExporterResponse),
  );
}

export function v2CreateExporterResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2CreateExporterResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2CreateExporterResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2CreateExporterResponse' from JSON`,
  );
}
