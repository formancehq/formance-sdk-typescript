/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type PaymentsgetAccountRequest = {
  /**
   * The account ID.
   */
  accountId: string;
};

export type PaymentsgetAccountResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  paymentsAccountResponse?: shared.PaymentsAccountResponse | undefined;
};

/** @internal */
export const PaymentsgetAccountRequest$inboundSchema: z.ZodType<
  PaymentsgetAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
});

/** @internal */
export type PaymentsgetAccountRequest$Outbound = {
  accountId: string;
};

/** @internal */
export const PaymentsgetAccountRequest$outboundSchema: z.ZodType<
  PaymentsgetAccountRequest$Outbound,
  z.ZodTypeDef,
  PaymentsgetAccountRequest
> = z.object({
  accountId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsgetAccountRequest$ {
  /** @deprecated use `PaymentsgetAccountRequest$inboundSchema` instead. */
  export const inboundSchema = PaymentsgetAccountRequest$inboundSchema;
  /** @deprecated use `PaymentsgetAccountRequest$outboundSchema` instead. */
  export const outboundSchema = PaymentsgetAccountRequest$outboundSchema;
  /** @deprecated use `PaymentsgetAccountRequest$Outbound` instead. */
  export type Outbound = PaymentsgetAccountRequest$Outbound;
}

export function paymentsgetAccountRequestToJSON(
  paymentsgetAccountRequest: PaymentsgetAccountRequest,
): string {
  return JSON.stringify(
    PaymentsgetAccountRequest$outboundSchema.parse(paymentsgetAccountRequest),
  );
}

export function paymentsgetAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsgetAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsgetAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsgetAccountRequest' from JSON`,
  );
}

/** @internal */
export const PaymentsgetAccountResponse$inboundSchema: z.ZodType<
  PaymentsgetAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  paymentsAccountResponse: shared.PaymentsAccountResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type PaymentsgetAccountResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  paymentsAccountResponse?: shared.PaymentsAccountResponse$Outbound | undefined;
};

/** @internal */
export const PaymentsgetAccountResponse$outboundSchema: z.ZodType<
  PaymentsgetAccountResponse$Outbound,
  z.ZodTypeDef,
  PaymentsgetAccountResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  paymentsAccountResponse: shared.PaymentsAccountResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsgetAccountResponse$ {
  /** @deprecated use `PaymentsgetAccountResponse$inboundSchema` instead. */
  export const inboundSchema = PaymentsgetAccountResponse$inboundSchema;
  /** @deprecated use `PaymentsgetAccountResponse$outboundSchema` instead. */
  export const outboundSchema = PaymentsgetAccountResponse$outboundSchema;
  /** @deprecated use `PaymentsgetAccountResponse$Outbound` instead. */
  export type Outbound = PaymentsgetAccountResponse$Outbound;
}

export function paymentsgetAccountResponseToJSON(
  paymentsgetAccountResponse: PaymentsgetAccountResponse,
): string {
  return JSON.stringify(
    PaymentsgetAccountResponse$outboundSchema.parse(paymentsgetAccountResponse),
  );
}

export function paymentsgetAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsgetAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsgetAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsgetAccountResponse' from JSON`,
  );
}
