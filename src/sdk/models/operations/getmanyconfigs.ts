/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type GetManyConfigsRequest = {
  /**
   * Optional filter by endpoint URL
   */
  endpoint?: string | undefined;
  /**
   * Optional filter by Config ID
   */
  id?: string | undefined;
};

export type GetManyConfigsResponse = {
  /**
   * OK
   */
  configsResponse?: shared.ConfigsResponse | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetManyConfigsRequest$inboundSchema: z.ZodType<
  GetManyConfigsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  endpoint: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type GetManyConfigsRequest$Outbound = {
  endpoint?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetManyConfigsRequest$outboundSchema: z.ZodType<
  GetManyConfigsRequest$Outbound,
  z.ZodTypeDef,
  GetManyConfigsRequest
> = z.object({
  endpoint: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetManyConfigsRequest$ {
  /** @deprecated use `GetManyConfigsRequest$inboundSchema` instead. */
  export const inboundSchema = GetManyConfigsRequest$inboundSchema;
  /** @deprecated use `GetManyConfigsRequest$outboundSchema` instead. */
  export const outboundSchema = GetManyConfigsRequest$outboundSchema;
  /** @deprecated use `GetManyConfigsRequest$Outbound` instead. */
  export type Outbound = GetManyConfigsRequest$Outbound;
}

/** @internal */
export const GetManyConfigsResponse$inboundSchema: z.ZodType<
  GetManyConfigsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ConfigsResponse: shared.ConfigsResponse$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ConfigsResponse": "configsResponse",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetManyConfigsResponse$Outbound = {
  ConfigsResponse?: shared.ConfigsResponse$Outbound | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetManyConfigsResponse$outboundSchema: z.ZodType<
  GetManyConfigsResponse$Outbound,
  z.ZodTypeDef,
  GetManyConfigsResponse
> = z.object({
  configsResponse: shared.ConfigsResponse$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    configsResponse: "ConfigsResponse",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetManyConfigsResponse$ {
  /** @deprecated use `GetManyConfigsResponse$inboundSchema` instead. */
  export const inboundSchema = GetManyConfigsResponse$inboundSchema;
  /** @deprecated use `GetManyConfigsResponse$outboundSchema` instead. */
  export const outboundSchema = GetManyConfigsResponse$outboundSchema;
  /** @deprecated use `GetManyConfigsResponse$Outbound` instead. */
  export type Outbound = GetManyConfigsResponse$Outbound;
}
