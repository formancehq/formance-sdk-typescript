/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3InstallConnectorRequest = {
  v3InstallConnectorRequest?: shared.V3InstallConnectorRequest | undefined;
  /**
   * The connector to filter by
   */
  connector: string;
};

export type V3InstallConnectorResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Accepted
   */
  v3InstallConnectorResponse?: shared.V3InstallConnectorResponse | undefined;
};

/** @internal */
export const V3InstallConnectorRequest$inboundSchema: z.ZodType<
  V3InstallConnectorRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  V3InstallConnectorRequest: shared.V3InstallConnectorRequest$inboundSchema
    .optional(),
  connector: z.string(),
}).transform((v) => {
  return remap$(v, {
    "V3InstallConnectorRequest": "v3InstallConnectorRequest",
  });
});

/** @internal */
export type V3InstallConnectorRequest$Outbound = {
  V3InstallConnectorRequest?:
    | shared.V3InstallConnectorRequest$Outbound
    | undefined;
  connector: string;
};

/** @internal */
export const V3InstallConnectorRequest$outboundSchema: z.ZodType<
  V3InstallConnectorRequest$Outbound,
  z.ZodTypeDef,
  V3InstallConnectorRequest
> = z.object({
  v3InstallConnectorRequest: shared.V3InstallConnectorRequest$outboundSchema
    .optional(),
  connector: z.string(),
}).transform((v) => {
  return remap$(v, {
    v3InstallConnectorRequest: "V3InstallConnectorRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3InstallConnectorRequest$ {
  /** @deprecated use `V3InstallConnectorRequest$inboundSchema` instead. */
  export const inboundSchema = V3InstallConnectorRequest$inboundSchema;
  /** @deprecated use `V3InstallConnectorRequest$outboundSchema` instead. */
  export const outboundSchema = V3InstallConnectorRequest$outboundSchema;
  /** @deprecated use `V3InstallConnectorRequest$Outbound` instead. */
  export type Outbound = V3InstallConnectorRequest$Outbound;
}

export function v3InstallConnectorRequestToJSON(
  v3InstallConnectorRequest: V3InstallConnectorRequest,
): string {
  return JSON.stringify(
    V3InstallConnectorRequest$outboundSchema.parse(v3InstallConnectorRequest),
  );
}

export function v3InstallConnectorRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3InstallConnectorRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3InstallConnectorRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3InstallConnectorRequest' from JSON`,
  );
}

/** @internal */
export const V3InstallConnectorResponse$inboundSchema: z.ZodType<
  V3InstallConnectorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3InstallConnectorResponse: shared.V3InstallConnectorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3InstallConnectorResponse": "v3InstallConnectorResponse",
  });
});

/** @internal */
export type V3InstallConnectorResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3InstallConnectorResponse?:
    | shared.V3InstallConnectorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3InstallConnectorResponse$outboundSchema: z.ZodType<
  V3InstallConnectorResponse$Outbound,
  z.ZodTypeDef,
  V3InstallConnectorResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3InstallConnectorResponse: shared.V3InstallConnectorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3InstallConnectorResponse: "V3InstallConnectorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3InstallConnectorResponse$ {
  /** @deprecated use `V3InstallConnectorResponse$inboundSchema` instead. */
  export const inboundSchema = V3InstallConnectorResponse$inboundSchema;
  /** @deprecated use `V3InstallConnectorResponse$outboundSchema` instead. */
  export const outboundSchema = V3InstallConnectorResponse$outboundSchema;
  /** @deprecated use `V3InstallConnectorResponse$Outbound` instead. */
  export type Outbound = V3InstallConnectorResponse$Outbound;
}

export function v3InstallConnectorResponseToJSON(
  v3InstallConnectorResponse: V3InstallConnectorResponse,
): string {
  return JSON.stringify(
    V3InstallConnectorResponse$outboundSchema.parse(v3InstallConnectorResponse),
  );
}

export function v3InstallConnectorResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3InstallConnectorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3InstallConnectorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3InstallConnectorResponse' from JSON`,
  );
}
