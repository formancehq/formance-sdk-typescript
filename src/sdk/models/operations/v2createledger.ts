/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type V2CreateLedgerRequest = {
    v2CreateLedgerRequest?: shared.V2CreateLedgerRequest | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type V2CreateLedgerResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const V2CreateLedgerRequest$inboundSchema: z.ZodType<
    V2CreateLedgerRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        V2CreateLedgerRequest: shared.V2CreateLedgerRequest$inboundSchema.optional(),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            V2CreateLedgerRequest: "v2CreateLedgerRequest",
        });
    });

/** @internal */
export type V2CreateLedgerRequest$Outbound = {
    V2CreateLedgerRequest?: shared.V2CreateLedgerRequest$Outbound | undefined;
    ledger: string;
};

/** @internal */
export const V2CreateLedgerRequest$outboundSchema: z.ZodType<
    V2CreateLedgerRequest$Outbound,
    z.ZodTypeDef,
    V2CreateLedgerRequest
> = z
    .object({
        v2CreateLedgerRequest: shared.V2CreateLedgerRequest$outboundSchema.optional(),
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            v2CreateLedgerRequest: "V2CreateLedgerRequest",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateLedgerRequest$ {
    /** @deprecated use `V2CreateLedgerRequest$inboundSchema` instead. */
    export const inboundSchema = V2CreateLedgerRequest$inboundSchema;
    /** @deprecated use `V2CreateLedgerRequest$outboundSchema` instead. */
    export const outboundSchema = V2CreateLedgerRequest$outboundSchema;
    /** @deprecated use `V2CreateLedgerRequest$Outbound` instead. */
    export type Outbound = V2CreateLedgerRequest$Outbound;
}

/** @internal */
export const V2CreateLedgerResponse$inboundSchema: z.ZodType<
    V2CreateLedgerResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type V2CreateLedgerResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const V2CreateLedgerResponse$outboundSchema: z.ZodType<
    V2CreateLedgerResponse$Outbound,
    z.ZodTypeDef,
    V2CreateLedgerResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2CreateLedgerResponse$ {
    /** @deprecated use `V2CreateLedgerResponse$inboundSchema` instead. */
    export const inboundSchema = V2CreateLedgerResponse$inboundSchema;
    /** @deprecated use `V2CreateLedgerResponse$outboundSchema` instead. */
    export const outboundSchema = V2CreateLedgerResponse$outboundSchema;
    /** @deprecated use `V2CreateLedgerResponse$Outbound` instead. */
    export type Outbound = V2CreateLedgerResponse$Outbound;
}
