/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetInstanceRequest = {
  /**
   * The instance id
   */
  instanceID: string;
};

export type GetInstanceResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * The workflow instance
   */
  getWorkflowInstanceResponse?: shared.GetWorkflowInstanceResponse | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetInstanceRequest$inboundSchema: z.ZodType<
  GetInstanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  instanceID: z.string(),
});

/** @internal */
export type GetInstanceRequest$Outbound = {
  instanceID: string;
};

/** @internal */
export const GetInstanceRequest$outboundSchema: z.ZodType<
  GetInstanceRequest$Outbound,
  z.ZodTypeDef,
  GetInstanceRequest
> = z.object({
  instanceID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstanceRequest$ {
  /** @deprecated use `GetInstanceRequest$inboundSchema` instead. */
  export const inboundSchema = GetInstanceRequest$inboundSchema;
  /** @deprecated use `GetInstanceRequest$outboundSchema` instead. */
  export const outboundSchema = GetInstanceRequest$outboundSchema;
  /** @deprecated use `GetInstanceRequest$Outbound` instead. */
  export type Outbound = GetInstanceRequest$Outbound;
}

export function getInstanceRequestToJSON(
  getInstanceRequest: GetInstanceRequest,
): string {
  return JSON.stringify(
    GetInstanceRequest$outboundSchema.parse(getInstanceRequest),
  );
}

export function getInstanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInstanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstanceRequest' from JSON`,
  );
}

/** @internal */
export const GetInstanceResponse$inboundSchema: z.ZodType<
  GetInstanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  GetWorkflowInstanceResponse: shared.GetWorkflowInstanceResponse$inboundSchema
    .optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "GetWorkflowInstanceResponse": "getWorkflowInstanceResponse",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetInstanceResponse$Outbound = {
  ContentType: string;
  GetWorkflowInstanceResponse?:
    | shared.GetWorkflowInstanceResponse$Outbound
    | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetInstanceResponse$outboundSchema: z.ZodType<
  GetInstanceResponse$Outbound,
  z.ZodTypeDef,
  GetInstanceResponse
> = z.object({
  contentType: z.string(),
  getWorkflowInstanceResponse: shared.GetWorkflowInstanceResponse$outboundSchema
    .optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    getWorkflowInstanceResponse: "GetWorkflowInstanceResponse",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstanceResponse$ {
  /** @deprecated use `GetInstanceResponse$inboundSchema` instead. */
  export const inboundSchema = GetInstanceResponse$inboundSchema;
  /** @deprecated use `GetInstanceResponse$outboundSchema` instead. */
  export const outboundSchema = GetInstanceResponse$outboundSchema;
  /** @deprecated use `GetInstanceResponse$Outbound` instead. */
  export type Outbound = GetInstanceResponse$Outbound;
}

export function getInstanceResponseToJSON(
  getInstanceResponse: GetInstanceResponse,
): string {
  return JSON.stringify(
    GetInstanceResponse$outboundSchema.parse(getInstanceResponse),
  );
}

export function getInstanceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInstanceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstanceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstanceResponse' from JSON`,
  );
}
