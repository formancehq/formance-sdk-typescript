/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V2SendEventRequestBody = {
  name: string;
};

export type V2SendEventRequest = {
  requestBody?: V2SendEventRequestBody | undefined;
  /**
   * The instance id
   */
  instanceID: string;
};

export type V2SendEventResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V2SendEventRequestBody$inboundSchema: z.ZodType<
  V2SendEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type V2SendEventRequestBody$Outbound = {
  name: string;
};

/** @internal */
export const V2SendEventRequestBody$outboundSchema: z.ZodType<
  V2SendEventRequestBody$Outbound,
  z.ZodTypeDef,
  V2SendEventRequestBody
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2SendEventRequestBody$ {
  /** @deprecated use `V2SendEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = V2SendEventRequestBody$inboundSchema;
  /** @deprecated use `V2SendEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = V2SendEventRequestBody$outboundSchema;
  /** @deprecated use `V2SendEventRequestBody$Outbound` instead. */
  export type Outbound = V2SendEventRequestBody$Outbound;
}

export function v2SendEventRequestBodyToJSON(
  v2SendEventRequestBody: V2SendEventRequestBody,
): string {
  return JSON.stringify(
    V2SendEventRequestBody$outboundSchema.parse(v2SendEventRequestBody),
  );
}

export function v2SendEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<V2SendEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2SendEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2SendEventRequestBody' from JSON`,
  );
}

/** @internal */
export const V2SendEventRequest$inboundSchema: z.ZodType<
  V2SendEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => V2SendEventRequestBody$inboundSchema).optional(),
  instanceID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type V2SendEventRequest$Outbound = {
  RequestBody?: V2SendEventRequestBody$Outbound | undefined;
  instanceID: string;
};

/** @internal */
export const V2SendEventRequest$outboundSchema: z.ZodType<
  V2SendEventRequest$Outbound,
  z.ZodTypeDef,
  V2SendEventRequest
> = z.object({
  requestBody: z.lazy(() => V2SendEventRequestBody$outboundSchema).optional(),
  instanceID: z.string(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2SendEventRequest$ {
  /** @deprecated use `V2SendEventRequest$inboundSchema` instead. */
  export const inboundSchema = V2SendEventRequest$inboundSchema;
  /** @deprecated use `V2SendEventRequest$outboundSchema` instead. */
  export const outboundSchema = V2SendEventRequest$outboundSchema;
  /** @deprecated use `V2SendEventRequest$Outbound` instead. */
  export type Outbound = V2SendEventRequest$Outbound;
}

export function v2SendEventRequestToJSON(
  v2SendEventRequest: V2SendEventRequest,
): string {
  return JSON.stringify(
    V2SendEventRequest$outboundSchema.parse(v2SendEventRequest),
  );
}

export function v2SendEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2SendEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2SendEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2SendEventRequest' from JSON`,
  );
}

/** @internal */
export const V2SendEventResponse$inboundSchema: z.ZodType<
  V2SendEventResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V2SendEventResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V2SendEventResponse$outboundSchema: z.ZodType<
  V2SendEventResponse$Outbound,
  z.ZodTypeDef,
  V2SendEventResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2SendEventResponse$ {
  /** @deprecated use `V2SendEventResponse$inboundSchema` instead. */
  export const inboundSchema = V2SendEventResponse$inboundSchema;
  /** @deprecated use `V2SendEventResponse$outboundSchema` instead. */
  export const outboundSchema = V2SendEventResponse$outboundSchema;
  /** @deprecated use `V2SendEventResponse$Outbound` instead. */
  export type Outbound = V2SendEventResponse$Outbound;
}

export function v2SendEventResponseToJSON(
  v2SendEventResponse: V2SendEventResponse,
): string {
  return JSON.stringify(
    V2SendEventResponse$outboundSchema.parse(v2SendEventResponse),
  );
}

export function v2SendEventResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2SendEventResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2SendEventResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2SendEventResponse' from JSON`,
  );
}
