/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2SendEventRequestBody = {
    name: string;
};

export type V2SendEventRequest = {
    requestBody?: V2SendEventRequestBody | undefined;
    /**
     * The instance id
     */
    instanceID: string;
};

export type V2SendEventResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace V2SendEventRequestBody$ {
    export type Inbound = {
        name: string;
    };

    export const inboundSchema: z.ZodType<V2SendEventRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });

    export type Outbound = {
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2SendEventRequestBody> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });
}

/** @internal */
export namespace V2SendEventRequest$ {
    export type Inbound = {
        RequestBody?: V2SendEventRequestBody$.Inbound | undefined;
        instanceID: string;
    };

    export const inboundSchema: z.ZodType<V2SendEventRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.lazy(() => V2SendEventRequestBody$.inboundSchema).optional(),
            instanceID: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                instanceID: v.instanceID,
            };
        });

    export type Outbound = {
        RequestBody?: V2SendEventRequestBody$.Outbound | undefined;
        instanceID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2SendEventRequest> = z
        .object({
            requestBody: z.lazy(() => V2SendEventRequestBody$.outboundSchema).optional(),
            instanceID: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                instanceID: v.instanceID,
            };
        });
}

/** @internal */
export namespace V2SendEventResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<V2SendEventResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2SendEventResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
