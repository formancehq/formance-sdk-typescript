/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type V2DeleteTransactionMetadataRequest = {
    /**
     * Transaction ID.
     */
    id: bigint;
    /**
     * The key to remove.
     */
    key: string;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type V2DeleteTransactionMetadataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const V2DeleteTransactionMetadataRequest$inboundSchema: z.ZodType<
    V2DeleteTransactionMetadataRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.number().transform((v) => BigInt(v)),
    key: z.string(),
    ledger: z.string(),
});

/** @internal */
export type V2DeleteTransactionMetadataRequest$Outbound = {
    id: number;
    key: string;
    ledger: string;
};

/** @internal */
export const V2DeleteTransactionMetadataRequest$outboundSchema: z.ZodType<
    V2DeleteTransactionMetadataRequest$Outbound,
    z.ZodTypeDef,
    V2DeleteTransactionMetadataRequest
> = z.object({
    id: z.bigint().transform((v) => Number(v)),
    key: z.string(),
    ledger: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2DeleteTransactionMetadataRequest$ {
    /** @deprecated use `V2DeleteTransactionMetadataRequest$inboundSchema` instead. */
    export const inboundSchema = V2DeleteTransactionMetadataRequest$inboundSchema;
    /** @deprecated use `V2DeleteTransactionMetadataRequest$outboundSchema` instead. */
    export const outboundSchema = V2DeleteTransactionMetadataRequest$outboundSchema;
    /** @deprecated use `V2DeleteTransactionMetadataRequest$Outbound` instead. */
    export type Outbound = V2DeleteTransactionMetadataRequest$Outbound;
}

/** @internal */
export const V2DeleteTransactionMetadataResponse$inboundSchema: z.ZodType<
    V2DeleteTransactionMetadataResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type V2DeleteTransactionMetadataResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const V2DeleteTransactionMetadataResponse$outboundSchema: z.ZodType<
    V2DeleteTransactionMetadataResponse$Outbound,
    z.ZodTypeDef,
    V2DeleteTransactionMetadataResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2DeleteTransactionMetadataResponse$ {
    /** @deprecated use `V2DeleteTransactionMetadataResponse$inboundSchema` instead. */
    export const inboundSchema = V2DeleteTransactionMetadataResponse$inboundSchema;
    /** @deprecated use `V2DeleteTransactionMetadataResponse$outboundSchema` instead. */
    export const outboundSchema = V2DeleteTransactionMetadataResponse$outboundSchema;
    /** @deprecated use `V2DeleteTransactionMetadataResponse$Outbound` instead. */
    export type Outbound = V2DeleteTransactionMetadataResponse$Outbound;
}
