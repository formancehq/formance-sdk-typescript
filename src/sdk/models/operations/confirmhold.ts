/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type ConfirmHoldRequest = {
  confirmHoldRequest?: shared.ConfirmHoldRequest | undefined;
  /**
   * Use an idempotency key
   */
  idempotencyKey?: string | undefined;
  holdId: string;
};

export type ConfirmHoldResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ConfirmHoldRequest$inboundSchema: z.ZodType<
  ConfirmHoldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ConfirmHoldRequest: shared.ConfirmHoldRequest$inboundSchema.optional(),
  "Idempotency-Key": z.string().optional(),
  hold_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ConfirmHoldRequest": "confirmHoldRequest",
    "Idempotency-Key": "idempotencyKey",
    "hold_id": "holdId",
  });
});

/** @internal */
export type ConfirmHoldRequest$Outbound = {
  ConfirmHoldRequest?: shared.ConfirmHoldRequest$Outbound | undefined;
  "Idempotency-Key"?: string | undefined;
  hold_id: string;
};

/** @internal */
export const ConfirmHoldRequest$outboundSchema: z.ZodType<
  ConfirmHoldRequest$Outbound,
  z.ZodTypeDef,
  ConfirmHoldRequest
> = z.object({
  confirmHoldRequest: shared.ConfirmHoldRequest$outboundSchema.optional(),
  idempotencyKey: z.string().optional(),
  holdId: z.string(),
}).transform((v) => {
  return remap$(v, {
    confirmHoldRequest: "ConfirmHoldRequest",
    idempotencyKey: "Idempotency-Key",
    holdId: "hold_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfirmHoldRequest$ {
  /** @deprecated use `ConfirmHoldRequest$inboundSchema` instead. */
  export const inboundSchema = ConfirmHoldRequest$inboundSchema;
  /** @deprecated use `ConfirmHoldRequest$outboundSchema` instead. */
  export const outboundSchema = ConfirmHoldRequest$outboundSchema;
  /** @deprecated use `ConfirmHoldRequest$Outbound` instead. */
  export type Outbound = ConfirmHoldRequest$Outbound;
}

/** @internal */
export const ConfirmHoldResponse$inboundSchema: z.ZodType<
  ConfirmHoldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ConfirmHoldResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ConfirmHoldResponse$outboundSchema: z.ZodType<
  ConfirmHoldResponse$Outbound,
  z.ZodTypeDef,
  ConfirmHoldResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfirmHoldResponse$ {
  /** @deprecated use `ConfirmHoldResponse$inboundSchema` instead. */
  export const inboundSchema = ConfirmHoldResponse$inboundSchema;
  /** @deprecated use `ConfirmHoldResponse$outboundSchema` instead. */
  export const outboundSchema = ConfirmHoldResponse$outboundSchema;
  /** @deprecated use `ConfirmHoldResponse$Outbound` instead. */
  export type Outbound = ConfirmHoldResponse$Outbound;
}
