/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type CreateTransactionsRequest = {
    transactions: shared.Transactions;
    /**
     * Name of the ledger.
     */
    ledger: string;
};

export type CreateTransactionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    transactionsResponse?: shared.TransactionsResponse | undefined;
};

/** @internal */
export const CreateTransactionsRequest$inboundSchema: z.ZodType<
    CreateTransactionsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Transactions: shared.Transactions$inboundSchema,
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            Transactions: "transactions",
        });
    });

/** @internal */
export type CreateTransactionsRequest$Outbound = {
    Transactions: shared.Transactions$Outbound;
    ledger: string;
};

/** @internal */
export const CreateTransactionsRequest$outboundSchema: z.ZodType<
    CreateTransactionsRequest$Outbound,
    z.ZodTypeDef,
    CreateTransactionsRequest
> = z
    .object({
        transactions: shared.Transactions$outboundSchema,
        ledger: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            transactions: "Transactions",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionsRequest$ {
    /** @deprecated use `CreateTransactionsRequest$inboundSchema` instead. */
    export const inboundSchema = CreateTransactionsRequest$inboundSchema;
    /** @deprecated use `CreateTransactionsRequest$outboundSchema` instead. */
    export const outboundSchema = CreateTransactionsRequest$outboundSchema;
    /** @deprecated use `CreateTransactionsRequest$Outbound` instead. */
    export type Outbound = CreateTransactionsRequest$Outbound;
}

/** @internal */
export const CreateTransactionsResponse$inboundSchema: z.ZodType<
    CreateTransactionsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        TransactionsResponse: shared.TransactionsResponse$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            TransactionsResponse: "transactionsResponse",
        });
    });

/** @internal */
export type CreateTransactionsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    TransactionsResponse?: shared.TransactionsResponse$Outbound | undefined;
};

/** @internal */
export const CreateTransactionsResponse$outboundSchema: z.ZodType<
    CreateTransactionsResponse$Outbound,
    z.ZodTypeDef,
    CreateTransactionsResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        transactionsResponse: shared.TransactionsResponse$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            transactionsResponse: "TransactionsResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionsResponse$ {
    /** @deprecated use `CreateTransactionsResponse$inboundSchema` instead. */
    export const inboundSchema = CreateTransactionsResponse$inboundSchema;
    /** @deprecated use `CreateTransactionsResponse$outboundSchema` instead. */
    export const outboundSchema = CreateTransactionsResponse$outboundSchema;
    /** @deprecated use `CreateTransactionsResponse$Outbound` instead. */
    export type Outbound = CreateTransactionsResponse$Outbound;
}
