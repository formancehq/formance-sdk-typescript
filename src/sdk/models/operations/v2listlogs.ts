/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2ListLogsRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    pit?: Date | undefined;
    query?: Record<string, any> | undefined;
};

/** @internal */
export namespace V2ListLogsRequest$ {
    export const inboundSchema: z.ZodType<V2ListLogsRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            pageSize: z.number().int().optional(),
            cursor: z.string().optional(),
            pit: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            query: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.pit === undefined ? null : { pit: v.pit }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });

    export type Outbound = {
        ledger: string;
        pageSize?: number | undefined;
        cursor?: string | undefined;
        pit?: string | undefined;
        query?: Record<string, any> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ListLogsRequest> = z
        .object({
            ledger: z.string(),
            pageSize: z.number().int().optional(),
            cursor: z.string().optional(),
            pit: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            query: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.pit === undefined ? null : { pit: v.pit }),
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });
}
