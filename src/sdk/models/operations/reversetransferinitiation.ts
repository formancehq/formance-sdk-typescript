/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ReverseTransferInitiationRequest = {
  reverseTransferInitiationRequest: shared.ReverseTransferInitiationRequest;
  /**
   * The transfer ID.
   */
  transferId: string;
};

export type ReverseTransferInitiationResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const ReverseTransferInitiationRequest$inboundSchema: z.ZodType<
  ReverseTransferInitiationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ReverseTransferInitiationRequest:
    shared.ReverseTransferInitiationRequest$inboundSchema,
  transferId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ReverseTransferInitiationRequest": "reverseTransferInitiationRequest",
  });
});

/** @internal */
export type ReverseTransferInitiationRequest$Outbound = {
  ReverseTransferInitiationRequest:
    shared.ReverseTransferInitiationRequest$Outbound;
  transferId: string;
};

/** @internal */
export const ReverseTransferInitiationRequest$outboundSchema: z.ZodType<
  ReverseTransferInitiationRequest$Outbound,
  z.ZodTypeDef,
  ReverseTransferInitiationRequest
> = z.object({
  reverseTransferInitiationRequest:
    shared.ReverseTransferInitiationRequest$outboundSchema,
  transferId: z.string(),
}).transform((v) => {
  return remap$(v, {
    reverseTransferInitiationRequest: "ReverseTransferInitiationRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReverseTransferInitiationRequest$ {
  /** @deprecated use `ReverseTransferInitiationRequest$inboundSchema` instead. */
  export const inboundSchema = ReverseTransferInitiationRequest$inboundSchema;
  /** @deprecated use `ReverseTransferInitiationRequest$outboundSchema` instead. */
  export const outboundSchema = ReverseTransferInitiationRequest$outboundSchema;
  /** @deprecated use `ReverseTransferInitiationRequest$Outbound` instead. */
  export type Outbound = ReverseTransferInitiationRequest$Outbound;
}

export function reverseTransferInitiationRequestToJSON(
  reverseTransferInitiationRequest: ReverseTransferInitiationRequest,
): string {
  return JSON.stringify(
    ReverseTransferInitiationRequest$outboundSchema.parse(
      reverseTransferInitiationRequest,
    ),
  );
}

export function reverseTransferInitiationRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReverseTransferInitiationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReverseTransferInitiationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReverseTransferInitiationRequest' from JSON`,
  );
}

/** @internal */
export const ReverseTransferInitiationResponse$inboundSchema: z.ZodType<
  ReverseTransferInitiationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ReverseTransferInitiationResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const ReverseTransferInitiationResponse$outboundSchema: z.ZodType<
  ReverseTransferInitiationResponse$Outbound,
  z.ZodTypeDef,
  ReverseTransferInitiationResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReverseTransferInitiationResponse$ {
  /** @deprecated use `ReverseTransferInitiationResponse$inboundSchema` instead. */
  export const inboundSchema = ReverseTransferInitiationResponse$inboundSchema;
  /** @deprecated use `ReverseTransferInitiationResponse$outboundSchema` instead. */
  export const outboundSchema =
    ReverseTransferInitiationResponse$outboundSchema;
  /** @deprecated use `ReverseTransferInitiationResponse$Outbound` instead. */
  export type Outbound = ReverseTransferInitiationResponse$Outbound;
}

export function reverseTransferInitiationResponseToJSON(
  reverseTransferInitiationResponse: ReverseTransferInitiationResponse,
): string {
  return JSON.stringify(
    ReverseTransferInitiationResponse$outboundSchema.parse(
      reverseTransferInitiationResponse,
    ),
  );
}

export function reverseTransferInitiationResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReverseTransferInitiationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReverseTransferInitiationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReverseTransferInitiationResponse' from JSON`,
  );
}
