/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3ListConnectorSchedulesRequest = {
  /**
   * The connector ID
   */
  connectorID: string;
  /**
   * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
   *
   * @remarks
   */
  cursor?: string | undefined;
  /**
   * The number of items to return
   */
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

export type V3ListConnectorSchedulesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v3ConnectorSchedulesCursorResponse?:
    | shared.V3ConnectorSchedulesCursorResponse
    | undefined;
};

/** @internal */
export const V3ListConnectorSchedulesRequest$inboundSchema: z.ZodType<
  V3ListConnectorSchedulesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectorID: z.string(),
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/** @internal */
export type V3ListConnectorSchedulesRequest$Outbound = {
  connectorID: string;
  cursor?: string | undefined;
  pageSize?: number | undefined;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const V3ListConnectorSchedulesRequest$outboundSchema: z.ZodType<
  V3ListConnectorSchedulesRequest$Outbound,
  z.ZodTypeDef,
  V3ListConnectorSchedulesRequest
> = z.object({
  connectorID: z.string(),
  cursor: z.string().optional(),
  pageSize: z.number().int().optional(),
  query: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListConnectorSchedulesRequest$ {
  /** @deprecated use `V3ListConnectorSchedulesRequest$inboundSchema` instead. */
  export const inboundSchema = V3ListConnectorSchedulesRequest$inboundSchema;
  /** @deprecated use `V3ListConnectorSchedulesRequest$outboundSchema` instead. */
  export const outboundSchema = V3ListConnectorSchedulesRequest$outboundSchema;
  /** @deprecated use `V3ListConnectorSchedulesRequest$Outbound` instead. */
  export type Outbound = V3ListConnectorSchedulesRequest$Outbound;
}

export function v3ListConnectorSchedulesRequestToJSON(
  v3ListConnectorSchedulesRequest: V3ListConnectorSchedulesRequest,
): string {
  return JSON.stringify(
    V3ListConnectorSchedulesRequest$outboundSchema.parse(
      v3ListConnectorSchedulesRequest,
    ),
  );
}

export function v3ListConnectorSchedulesRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ListConnectorSchedulesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListConnectorSchedulesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListConnectorSchedulesRequest' from JSON`,
  );
}

/** @internal */
export const V3ListConnectorSchedulesResponse$inboundSchema: z.ZodType<
  V3ListConnectorSchedulesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V3ConnectorSchedulesCursorResponse: shared
    .V3ConnectorSchedulesCursorResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V3ConnectorSchedulesCursorResponse": "v3ConnectorSchedulesCursorResponse",
  });
});

/** @internal */
export type V3ListConnectorSchedulesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V3ConnectorSchedulesCursorResponse?:
    | shared.V3ConnectorSchedulesCursorResponse$Outbound
    | undefined;
};

/** @internal */
export const V3ListConnectorSchedulesResponse$outboundSchema: z.ZodType<
  V3ListConnectorSchedulesResponse$Outbound,
  z.ZodTypeDef,
  V3ListConnectorSchedulesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v3ConnectorSchedulesCursorResponse: shared
    .V3ConnectorSchedulesCursorResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v3ConnectorSchedulesCursorResponse: "V3ConnectorSchedulesCursorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ListConnectorSchedulesResponse$ {
  /** @deprecated use `V3ListConnectorSchedulesResponse$inboundSchema` instead. */
  export const inboundSchema = V3ListConnectorSchedulesResponse$inboundSchema;
  /** @deprecated use `V3ListConnectorSchedulesResponse$outboundSchema` instead. */
  export const outboundSchema = V3ListConnectorSchedulesResponse$outboundSchema;
  /** @deprecated use `V3ListConnectorSchedulesResponse$Outbound` instead. */
  export type Outbound = V3ListConnectorSchedulesResponse$Outbound;
}

export function v3ListConnectorSchedulesResponseToJSON(
  v3ListConnectorSchedulesResponse: V3ListConnectorSchedulesResponse,
): string {
  return JSON.stringify(
    V3ListConnectorSchedulesResponse$outboundSchema.parse(
      v3ListConnectorSchedulesResponse,
    ),
  );
}

export function v3ListConnectorSchedulesResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ListConnectorSchedulesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ListConnectorSchedulesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ListConnectorSchedulesResponse' from JSON`,
  );
}
