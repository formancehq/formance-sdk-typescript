/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type InstallConnectorRequest = {
    connectorConfig: shared.ConnectorConfig;
    /**
     * The name of the connector.
     */
    connector: shared.Connector;
};

export type InstallConnectorResponse = {
    /**
     * OK
     */
    connectorResponse?: shared.ConnectorResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const InstallConnectorRequest$inboundSchema: z.ZodType<
    InstallConnectorRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ConnectorConfig: shared.ConnectorConfig$inboundSchema,
        connector: shared.Connector$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            ConnectorConfig: "connectorConfig",
        });
    });

/** @internal */
export type InstallConnectorRequest$Outbound = {
    ConnectorConfig: shared.ConnectorConfig$Outbound;
    connector: string;
};

/** @internal */
export const InstallConnectorRequest$outboundSchema: z.ZodType<
    InstallConnectorRequest$Outbound,
    z.ZodTypeDef,
    InstallConnectorRequest
> = z
    .object({
        connectorConfig: shared.ConnectorConfig$outboundSchema,
        connector: shared.Connector$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            connectorConfig: "ConnectorConfig",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstallConnectorRequest$ {
    /** @deprecated use `InstallConnectorRequest$inboundSchema` instead. */
    export const inboundSchema = InstallConnectorRequest$inboundSchema;
    /** @deprecated use `InstallConnectorRequest$outboundSchema` instead. */
    export const outboundSchema = InstallConnectorRequest$outboundSchema;
    /** @deprecated use `InstallConnectorRequest$Outbound` instead. */
    export type Outbound = InstallConnectorRequest$Outbound;
}

/** @internal */
export const InstallConnectorResponse$inboundSchema: z.ZodType<
    InstallConnectorResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ConnectorResponse: shared.ConnectorResponse$inboundSchema.optional(),
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ConnectorResponse: "connectorResponse",
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type InstallConnectorResponse$Outbound = {
    ConnectorResponse?: shared.ConnectorResponse$Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const InstallConnectorResponse$outboundSchema: z.ZodType<
    InstallConnectorResponse$Outbound,
    z.ZodTypeDef,
    InstallConnectorResponse
> = z
    .object({
        connectorResponse: shared.ConnectorResponse$outboundSchema.optional(),
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            connectorResponse: "ConnectorResponse",
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstallConnectorResponse$ {
    /** @deprecated use `InstallConnectorResponse$inboundSchema` instead. */
    export const inboundSchema = InstallConnectorResponse$inboundSchema;
    /** @deprecated use `InstallConnectorResponse$outboundSchema` instead. */
    export const outboundSchema = InstallConnectorResponse$outboundSchema;
    /** @deprecated use `InstallConnectorResponse$Outbound` instead. */
    export type Outbound = InstallConnectorResponse$Outbound;
}
