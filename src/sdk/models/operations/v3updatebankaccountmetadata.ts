/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V3UpdateBankAccountMetadataRequest = {
  v3UpdateBankAccountMetadataRequest?:
    | shared.V3UpdateBankAccountMetadataRequest
    | undefined;
  /**
   * The bank account ID
   */
  bankAccountID: string;
};

export type V3UpdateBankAccountMetadataResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V3UpdateBankAccountMetadataRequest$inboundSchema: z.ZodType<
  V3UpdateBankAccountMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  V3UpdateBankAccountMetadataRequest: shared
    .V3UpdateBankAccountMetadataRequest$inboundSchema.optional(),
  bankAccountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "V3UpdateBankAccountMetadataRequest": "v3UpdateBankAccountMetadataRequest",
  });
});

/** @internal */
export type V3UpdateBankAccountMetadataRequest$Outbound = {
  V3UpdateBankAccountMetadataRequest?:
    | shared.V3UpdateBankAccountMetadataRequest$Outbound
    | undefined;
  bankAccountID: string;
};

/** @internal */
export const V3UpdateBankAccountMetadataRequest$outboundSchema: z.ZodType<
  V3UpdateBankAccountMetadataRequest$Outbound,
  z.ZodTypeDef,
  V3UpdateBankAccountMetadataRequest
> = z.object({
  v3UpdateBankAccountMetadataRequest: shared
    .V3UpdateBankAccountMetadataRequest$outboundSchema.optional(),
  bankAccountID: z.string(),
}).transform((v) => {
  return remap$(v, {
    v3UpdateBankAccountMetadataRequest: "V3UpdateBankAccountMetadataRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3UpdateBankAccountMetadataRequest$ {
  /** @deprecated use `V3UpdateBankAccountMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = V3UpdateBankAccountMetadataRequest$inboundSchema;
  /** @deprecated use `V3UpdateBankAccountMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3UpdateBankAccountMetadataRequest$outboundSchema;
  /** @deprecated use `V3UpdateBankAccountMetadataRequest$Outbound` instead. */
  export type Outbound = V3UpdateBankAccountMetadataRequest$Outbound;
}

export function v3UpdateBankAccountMetadataRequestToJSON(
  v3UpdateBankAccountMetadataRequest: V3UpdateBankAccountMetadataRequest,
): string {
  return JSON.stringify(
    V3UpdateBankAccountMetadataRequest$outboundSchema.parse(
      v3UpdateBankAccountMetadataRequest,
    ),
  );
}

export function v3UpdateBankAccountMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3UpdateBankAccountMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3UpdateBankAccountMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3UpdateBankAccountMetadataRequest' from JSON`,
  );
}

/** @internal */
export const V3UpdateBankAccountMetadataResponse$inboundSchema: z.ZodType<
  V3UpdateBankAccountMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type V3UpdateBankAccountMetadataResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V3UpdateBankAccountMetadataResponse$outboundSchema: z.ZodType<
  V3UpdateBankAccountMetadataResponse$Outbound,
  z.ZodTypeDef,
  V3UpdateBankAccountMetadataResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3UpdateBankAccountMetadataResponse$ {
  /** @deprecated use `V3UpdateBankAccountMetadataResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3UpdateBankAccountMetadataResponse$inboundSchema;
  /** @deprecated use `V3UpdateBankAccountMetadataResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3UpdateBankAccountMetadataResponse$outboundSchema;
  /** @deprecated use `V3UpdateBankAccountMetadataResponse$Outbound` instead. */
  export type Outbound = V3UpdateBankAccountMetadataResponse$Outbound;
}

export function v3UpdateBankAccountMetadataResponseToJSON(
  v3UpdateBankAccountMetadataResponse: V3UpdateBankAccountMetadataResponse,
): string {
  return JSON.stringify(
    V3UpdateBankAccountMetadataResponse$outboundSchema.parse(
      v3UpdateBankAccountMetadataResponse,
    ),
  );
}

export function v3UpdateBankAccountMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3UpdateBankAccountMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3UpdateBankAccountMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3UpdateBankAccountMetadataResponse' from JSON`,
  );
}
