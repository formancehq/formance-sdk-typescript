/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type V2ListWorkflowsRequest = {
    /**
     * Parameter used in pagination requests.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
};

export type V2ListWorkflowsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of workflows
     */
    v2ListWorkflowsResponse?: shared.V2ListWorkflowsResponse | undefined;
};

/** @internal */
export const V2ListWorkflowsRequest$inboundSchema: z.ZodType<
    V2ListWorkflowsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    cursor: z.string().optional(),
    pageSize: z.number().int().optional(),
});

/** @internal */
export type V2ListWorkflowsRequest$Outbound = {
    cursor?: string | undefined;
    pageSize?: number | undefined;
};

/** @internal */
export const V2ListWorkflowsRequest$outboundSchema: z.ZodType<
    V2ListWorkflowsRequest$Outbound,
    z.ZodTypeDef,
    V2ListWorkflowsRequest
> = z.object({
    cursor: z.string().optional(),
    pageSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListWorkflowsRequest$ {
    /** @deprecated use `V2ListWorkflowsRequest$inboundSchema` instead. */
    export const inboundSchema = V2ListWorkflowsRequest$inboundSchema;
    /** @deprecated use `V2ListWorkflowsRequest$outboundSchema` instead. */
    export const outboundSchema = V2ListWorkflowsRequest$outboundSchema;
    /** @deprecated use `V2ListWorkflowsRequest$Outbound` instead. */
    export type Outbound = V2ListWorkflowsRequest$Outbound;
}

/** @internal */
export const V2ListWorkflowsResponse$inboundSchema: z.ZodType<
    V2ListWorkflowsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        V2ListWorkflowsResponse: shared.V2ListWorkflowsResponse$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
            V2ListWorkflowsResponse: "v2ListWorkflowsResponse",
        });
    });

/** @internal */
export type V2ListWorkflowsResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    V2ListWorkflowsResponse?: shared.V2ListWorkflowsResponse$Outbound | undefined;
};

/** @internal */
export const V2ListWorkflowsResponse$outboundSchema: z.ZodType<
    V2ListWorkflowsResponse$Outbound,
    z.ZodTypeDef,
    V2ListWorkflowsResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        v2ListWorkflowsResponse: shared.V2ListWorkflowsResponse$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
            v2ListWorkflowsResponse: "V2ListWorkflowsResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ListWorkflowsResponse$ {
    /** @deprecated use `V2ListWorkflowsResponse$inboundSchema` instead. */
    export const inboundSchema = V2ListWorkflowsResponse$inboundSchema;
    /** @deprecated use `V2ListWorkflowsResponse$outboundSchema` instead. */
    export const outboundSchema = V2ListWorkflowsResponse$outboundSchema;
    /** @deprecated use `V2ListWorkflowsResponse$Outbound` instead. */
    export type Outbound = V2ListWorkflowsResponse$Outbound;
}
