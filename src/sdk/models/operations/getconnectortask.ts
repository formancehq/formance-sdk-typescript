/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetConnectorTaskRequest = {
    /**
     * The name of the connector.
     */
    connector: shared.Connector;
    /**
     * The task ID.
     */
    taskId: string;
};

export type GetConnectorTaskResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    taskResponse?: shared.TaskResponse | undefined;
};

/** @internal */
export namespace GetConnectorTaskRequest$ {
    export const inboundSchema: z.ZodType<GetConnectorTaskRequest, z.ZodTypeDef, unknown> = z
        .object({
            connector: shared.Connector$.inboundSchema,
            taskId: z.string(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                taskId: v.taskId,
            };
        });

    export type Outbound = {
        connector: string;
        taskId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetConnectorTaskRequest> = z
        .object({
            connector: shared.Connector$.outboundSchema,
            taskId: z.string(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                taskId: v.taskId,
            };
        });
}

/** @internal */
export namespace GetConnectorTaskResponse$ {
    export const inboundSchema: z.ZodType<GetConnectorTaskResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TaskResponse: shared.TaskResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TaskResponse === undefined ? null : { taskResponse: v.TaskResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TaskResponse?: shared.TaskResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetConnectorTaskResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            taskResponse: shared.TaskResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.taskResponse === undefined ? null : { TaskResponse: v.taskResponse }),
            };
        });
}
