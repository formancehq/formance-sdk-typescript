/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetPaymentRequest = {
    /**
     * The payment ID.
     */
    paymentId: string;
};

export type GetPaymentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    paymentResponse?: shared.PaymentResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const GetPaymentRequest$inboundSchema: z.ZodType<GetPaymentRequest, z.ZodTypeDef, unknown> =
    z.object({
        paymentId: z.string(),
    });

/** @internal */
export type GetPaymentRequest$Outbound = {
    paymentId: string;
};

/** @internal */
export const GetPaymentRequest$outboundSchema: z.ZodType<
    GetPaymentRequest$Outbound,
    z.ZodTypeDef,
    GetPaymentRequest
> = z.object({
    paymentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentRequest$ {
    /** @deprecated use `GetPaymentRequest$inboundSchema` instead. */
    export const inboundSchema = GetPaymentRequest$inboundSchema;
    /** @deprecated use `GetPaymentRequest$outboundSchema` instead. */
    export const outboundSchema = GetPaymentRequest$outboundSchema;
    /** @deprecated use `GetPaymentRequest$Outbound` instead. */
    export type Outbound = GetPaymentRequest$Outbound;
}

/** @internal */
export const GetPaymentResponse$inboundSchema: z.ZodType<
    GetPaymentResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        PaymentResponse: shared.PaymentResponse$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            PaymentResponse: "paymentResponse",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetPaymentResponse$Outbound = {
    ContentType: string;
    PaymentResponse?: shared.PaymentResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetPaymentResponse$outboundSchema: z.ZodType<
    GetPaymentResponse$Outbound,
    z.ZodTypeDef,
    GetPaymentResponse
> = z
    .object({
        contentType: z.string(),
        paymentResponse: shared.PaymentResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            paymentResponse: "PaymentResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentResponse$ {
    /** @deprecated use `GetPaymentResponse$inboundSchema` instead. */
    export const inboundSchema = GetPaymentResponse$inboundSchema;
    /** @deprecated use `GetPaymentResponse$outboundSchema` instead. */
    export const outboundSchema = GetPaymentResponse$outboundSchema;
    /** @deprecated use `GetPaymentResponse$Outbound` instead. */
    export type Outbound = GetPaymentResponse$Outbound;
}
