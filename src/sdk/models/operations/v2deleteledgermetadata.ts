/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2DeleteLedgerMetadataRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Key to remove.
     */
    key: string;
};

export type V2DeleteLedgerMetadataResponse = {};

/** @internal */
export namespace V2DeleteLedgerMetadataRequest$ {
    export const inboundSchema: z.ZodType<V2DeleteLedgerMetadataRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            key: z.string(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                key: v.key,
            };
        });

    export type Outbound = {
        ledger: string;
        key: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2DeleteLedgerMetadataRequest> =
        z
            .object({
                ledger: z.string(),
                key: z.string(),
            })
            .transform((v) => {
                return {
                    ledger: v.ledger,
                    key: v.key,
                };
            });
}

/** @internal */
export namespace V2DeleteLedgerMetadataResponse$ {
    export const inboundSchema: z.ZodType<V2DeleteLedgerMetadataResponse, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2DeleteLedgerMetadataResponse> =
        z.object({});
}
