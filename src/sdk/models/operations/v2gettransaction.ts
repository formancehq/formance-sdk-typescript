/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type V2GetTransactionRequest = {
  expand?: string | undefined;
  /**
   * Transaction ID.
   */
  id: bigint;
  /**
   * Name of the ledger.
   */
  ledger: string;
  pit?: Date | undefined;
};

export type V2GetTransactionResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  v2GetTransactionResponse?: shared.V2GetTransactionResponse | undefined;
};

/** @internal */
export const V2GetTransactionRequest$inboundSchema: z.ZodType<
  V2GetTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expand: z.string().optional(),
  id: z.number().transform(v => BigInt(v)),
  ledger: z.string(),
  pit: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type V2GetTransactionRequest$Outbound = {
  expand?: string | undefined;
  id: number;
  ledger: string;
  pit?: string | undefined;
};

/** @internal */
export const V2GetTransactionRequest$outboundSchema: z.ZodType<
  V2GetTransactionRequest$Outbound,
  z.ZodTypeDef,
  V2GetTransactionRequest
> = z.object({
  expand: z.string().optional(),
  id: z.bigint().transform(v => Number(v)),
  ledger: z.string(),
  pit: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetTransactionRequest$ {
  /** @deprecated use `V2GetTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = V2GetTransactionRequest$inboundSchema;
  /** @deprecated use `V2GetTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = V2GetTransactionRequest$outboundSchema;
  /** @deprecated use `V2GetTransactionRequest$Outbound` instead. */
  export type Outbound = V2GetTransactionRequest$Outbound;
}

export function v2GetTransactionRequestToJSON(
  v2GetTransactionRequest: V2GetTransactionRequest,
): string {
  return JSON.stringify(
    V2GetTransactionRequest$outboundSchema.parse(v2GetTransactionRequest),
  );
}

export function v2GetTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<V2GetTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetTransactionRequest' from JSON`,
  );
}

/** @internal */
export const V2GetTransactionResponse$inboundSchema: z.ZodType<
  V2GetTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  V2GetTransactionResponse: shared.V2GetTransactionResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "V2GetTransactionResponse": "v2GetTransactionResponse",
  });
});

/** @internal */
export type V2GetTransactionResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  V2GetTransactionResponse?:
    | shared.V2GetTransactionResponse$Outbound
    | undefined;
};

/** @internal */
export const V2GetTransactionResponse$outboundSchema: z.ZodType<
  V2GetTransactionResponse$Outbound,
  z.ZodTypeDef,
  V2GetTransactionResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  v2GetTransactionResponse: shared.V2GetTransactionResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    v2GetTransactionResponse: "V2GetTransactionResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2GetTransactionResponse$ {
  /** @deprecated use `V2GetTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = V2GetTransactionResponse$inboundSchema;
  /** @deprecated use `V2GetTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = V2GetTransactionResponse$outboundSchema;
  /** @deprecated use `V2GetTransactionResponse$Outbound` instead. */
  export type Outbound = V2GetTransactionResponse$Outbound;
}

export function v2GetTransactionResponseToJSON(
  v2GetTransactionResponse: V2GetTransactionResponse,
): string {
  return JSON.stringify(
    V2GetTransactionResponse$outboundSchema.parse(v2GetTransactionResponse),
  );
}

export function v2GetTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<V2GetTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V2GetTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V2GetTransactionResponse' from JSON`,
  );
}
