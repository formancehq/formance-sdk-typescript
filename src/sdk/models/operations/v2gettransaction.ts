/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2GetTransactionRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Transaction ID.
     */
    id: bigint;
    expand?: string | undefined;
    pit?: Date | undefined;
};

/** @internal */
export namespace V2GetTransactionRequest$ {
    export const inboundSchema: z.ZodType<V2GetTransactionRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            id: z.number().transform((v) => BigInt(v)),
            expand: z.string().optional(),
            pit: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                id: v.id,
                ...(v.expand === undefined ? null : { expand: v.expand }),
                ...(v.pit === undefined ? null : { pit: v.pit }),
            };
        });

    export type Outbound = {
        ledger: string;
        id: number;
        expand?: string | undefined;
        pit?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetTransactionRequest> = z
        .object({
            ledger: z.string(),
            id: z.bigint().transform((v) => Number(v)),
            expand: z.string().optional(),
            pit: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                id: v.id,
                ...(v.expand === undefined ? null : { expand: v.expand }),
                ...(v.pit === undefined ? null : { pit: v.pit }),
            };
        });
}
