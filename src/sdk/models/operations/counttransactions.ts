/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
 */
export type Metadata = {};

export type CountTransactionsRequest = {
  /**
   * Filter transactions with postings involving given account, either as source or destination (regular expression placed between ^ and $).
   */
  account?: string | undefined;
  /**
   * Filter transactions with postings involving given account at destination (regular expression placed between ^ and $).
   */
  destination?: string | undefined;
  /**
   * Filter transactions that occurred before this timestamp.
   *
   * @remarks
   * The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
   */
  endTime?: Date | undefined;
  /**
   * Name of the ledger.
   */
  ledger: string;
  /**
   * Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
   */
  metadata?: Metadata | undefined;
  /**
   * Filter transactions by reference field.
   */
  reference?: string | undefined;
  /**
   * Filter transactions with postings involving given account at source (regular expression placed between ^ and $).
   */
  source?: string | undefined;
  /**
   * Filter transactions that occurred after this timestamp.
   *
   * @remarks
   * The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
   */
  startTime?: Date | undefined;
};

export type CountTransactionsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  headers: { [k: string]: Array<string> };
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Metadata$Outbound = {};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const CountTransactionsRequest$inboundSchema: z.ZodType<
  CountTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account: z.string().optional(),
  destination: z.string().optional(),
  endTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ledger: z.string(),
  metadata: z.lazy(() => Metadata$inboundSchema).optional(),
  reference: z.string().optional(),
  source: z.string().optional(),
  startTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CountTransactionsRequest$Outbound = {
  account?: string | undefined;
  destination?: string | undefined;
  endTime?: string | undefined;
  ledger: string;
  metadata?: Metadata$Outbound | undefined;
  reference?: string | undefined;
  source?: string | undefined;
  startTime?: string | undefined;
};

/** @internal */
export const CountTransactionsRequest$outboundSchema: z.ZodType<
  CountTransactionsRequest$Outbound,
  z.ZodTypeDef,
  CountTransactionsRequest
> = z.object({
  account: z.string().optional(),
  destination: z.string().optional(),
  endTime: z.date().transform(v => v.toISOString()).optional(),
  ledger: z.string(),
  metadata: z.lazy(() => Metadata$outboundSchema).optional(),
  reference: z.string().optional(),
  source: z.string().optional(),
  startTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountTransactionsRequest$ {
  /** @deprecated use `CountTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = CountTransactionsRequest$inboundSchema;
  /** @deprecated use `CountTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = CountTransactionsRequest$outboundSchema;
  /** @deprecated use `CountTransactionsRequest$Outbound` instead. */
  export type Outbound = CountTransactionsRequest$Outbound;
}

export function countTransactionsRequestToJSON(
  countTransactionsRequest: CountTransactionsRequest,
): string {
  return JSON.stringify(
    CountTransactionsRequest$outboundSchema.parse(countTransactionsRequest),
  );
}

export function countTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<CountTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const CountTransactionsResponse$inboundSchema: z.ZodType<
  CountTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Headers": "headers",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type CountTransactionsResponse$Outbound = {
  ContentType: string;
  Headers: { [k: string]: Array<string> };
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const CountTransactionsResponse$outboundSchema: z.ZodType<
  CountTransactionsResponse$Outbound,
  z.ZodTypeDef,
  CountTransactionsResponse
> = z.object({
  contentType: z.string(),
  headers: z.record(z.array(z.string())),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    headers: "Headers",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountTransactionsResponse$ {
  /** @deprecated use `CountTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = CountTransactionsResponse$inboundSchema;
  /** @deprecated use `CountTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = CountTransactionsResponse$outboundSchema;
  /** @deprecated use `CountTransactionsResponse$Outbound` instead. */
  export type Outbound = CountTransactionsResponse$Outbound;
}

export function countTransactionsResponseToJSON(
  countTransactionsResponse: CountTransactionsResponse,
): string {
  return JSON.stringify(
    CountTransactionsResponse$outboundSchema.parse(countTransactionsResponse),
  );
}

export function countTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<CountTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountTransactionsResponse' from JSON`,
  );
}
