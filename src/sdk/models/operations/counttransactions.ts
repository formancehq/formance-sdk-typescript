/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
 */
export type Metadata = {};

export type CountTransactionsRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Filter transactions by reference field.
     */
    reference?: string | undefined;
    /**
     * Filter transactions with postings involving given account, either as source or destination (regular expression placed between ^ and $).
     */
    account?: string | undefined;
    /**
     * Filter transactions with postings involving given account at source (regular expression placed between ^ and $).
     */
    source?: string | undefined;
    /**
     * Filter transactions with postings involving given account at destination (regular expression placed between ^ and $).
     */
    destination?: string | undefined;
    /**
     * Filter transactions that occurred after this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
     *
     */
    startTime?: Date | undefined;
    /**
     * Filter transactions that occurred before this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
     *
     */
    endTime?: Date | undefined;
    /**
     * Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
     */
    metadata?: Metadata | undefined;
};

export type CountTransactionsResponse = {
    headers: Record<string, Array<string>>;
};

/** @internal */
export namespace Metadata$ {
    export const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metadata> = z.object({});
}

/** @internal */
export namespace CountTransactionsRequest$ {
    export const inboundSchema: z.ZodType<CountTransactionsRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            reference: z.string().optional(),
            account: z.string().optional(),
            source: z.string().optional(),
            destination: z.string().optional(),
            startTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            endTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            metadata: z.lazy(() => Metadata$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        ledger: string;
        reference?: string | undefined;
        account?: string | undefined;
        source?: string | undefined;
        destination?: string | undefined;
        startTime?: string | undefined;
        endTime?: string | undefined;
        metadata?: Metadata$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountTransactionsRequest> = z
        .object({
            ledger: z.string(),
            reference: z.string().optional(),
            account: z.string().optional(),
            source: z.string().optional(),
            destination: z.string().optional(),
            startTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            endTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            metadata: z.lazy(() => Metadata$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace CountTransactionsResponse$ {
    export const inboundSchema: z.ZodType<CountTransactionsResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                headers: v.Headers,
            };
        });

    export type Outbound = {
        Headers: Record<string, Array<string>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountTransactionsResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                Headers: v.headers,
            };
        });
}
