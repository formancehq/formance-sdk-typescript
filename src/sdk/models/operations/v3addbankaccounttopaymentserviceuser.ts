/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3AddBankAccountToPaymentServiceUserRequest = {
  /**
   * The bank account ID
   */
  bankAccountID: string;
  /**
   * The payment service user ID
   */
  paymentServiceUserID: string;
};

export type V3AddBankAccountToPaymentServiceUserResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const V3AddBankAccountToPaymentServiceUserRequest$inboundSchema:
  z.ZodType<
    V3AddBankAccountToPaymentServiceUserRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bankAccountID: z.string(),
    paymentServiceUserID: z.string(),
  });

/** @internal */
export type V3AddBankAccountToPaymentServiceUserRequest$Outbound = {
  bankAccountID: string;
  paymentServiceUserID: string;
};

/** @internal */
export const V3AddBankAccountToPaymentServiceUserRequest$outboundSchema:
  z.ZodType<
    V3AddBankAccountToPaymentServiceUserRequest$Outbound,
    z.ZodTypeDef,
    V3AddBankAccountToPaymentServiceUserRequest
  > = z.object({
    bankAccountID: z.string(),
    paymentServiceUserID: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3AddBankAccountToPaymentServiceUserRequest$ {
  /** @deprecated use `V3AddBankAccountToPaymentServiceUserRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3AddBankAccountToPaymentServiceUserRequest$inboundSchema;
  /** @deprecated use `V3AddBankAccountToPaymentServiceUserRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3AddBankAccountToPaymentServiceUserRequest$outboundSchema;
  /** @deprecated use `V3AddBankAccountToPaymentServiceUserRequest$Outbound` instead. */
  export type Outbound = V3AddBankAccountToPaymentServiceUserRequest$Outbound;
}

export function v3AddBankAccountToPaymentServiceUserRequestToJSON(
  v3AddBankAccountToPaymentServiceUserRequest:
    V3AddBankAccountToPaymentServiceUserRequest,
): string {
  return JSON.stringify(
    V3AddBankAccountToPaymentServiceUserRequest$outboundSchema.parse(
      v3AddBankAccountToPaymentServiceUserRequest,
    ),
  );
}

export function v3AddBankAccountToPaymentServiceUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3AddBankAccountToPaymentServiceUserRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3AddBankAccountToPaymentServiceUserRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3AddBankAccountToPaymentServiceUserRequest' from JSON`,
  );
}

/** @internal */
export const V3AddBankAccountToPaymentServiceUserResponse$inboundSchema:
  z.ZodType<
    V3AddBankAccountToPaymentServiceUserResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type V3AddBankAccountToPaymentServiceUserResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const V3AddBankAccountToPaymentServiceUserResponse$outboundSchema:
  z.ZodType<
    V3AddBankAccountToPaymentServiceUserResponse$Outbound,
    z.ZodTypeDef,
    V3AddBankAccountToPaymentServiceUserResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3AddBankAccountToPaymentServiceUserResponse$ {
  /** @deprecated use `V3AddBankAccountToPaymentServiceUserResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3AddBankAccountToPaymentServiceUserResponse$inboundSchema;
  /** @deprecated use `V3AddBankAccountToPaymentServiceUserResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3AddBankAccountToPaymentServiceUserResponse$outboundSchema;
  /** @deprecated use `V3AddBankAccountToPaymentServiceUserResponse$Outbound` instead. */
  export type Outbound = V3AddBankAccountToPaymentServiceUserResponse$Outbound;
}

export function v3AddBankAccountToPaymentServiceUserResponseToJSON(
  v3AddBankAccountToPaymentServiceUserResponse:
    V3AddBankAccountToPaymentServiceUserResponse,
): string {
  return JSON.stringify(
    V3AddBankAccountToPaymentServiceUserResponse$outboundSchema.parse(
      v3AddBankAccountToPaymentServiceUserResponse,
    ),
  );
}

export function v3AddBankAccountToPaymentServiceUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3AddBankAccountToPaymentServiceUserResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3AddBankAccountToPaymentServiceUserResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3AddBankAccountToPaymentServiceUserResponse' from JSON`,
  );
}
