/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type ListPoolsRequest = {
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Filters used to filter resources.
     *
     * @remarks
     *
     */
    query?: string | undefined;
    /**
     * Fields used to sort payments (default is date:desc).
     */
    sort?: Array<string> | undefined;
};

export type ListPoolsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    poolsCursor?: shared.PoolsCursor | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ListPoolsRequest$ {
    export type Inbound = {
        cursor?: string | undefined;
        pageSize?: number | undefined;
        query?: string | undefined;
        sort?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<ListPoolsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
            query: z.string().optional(),
            sort: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        pageSize?: number | undefined;
        query?: string | undefined;
        sort?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPoolsRequest> = z
        .object({
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
            query: z.string().optional(),
            sort: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });
}

/** @internal */
export namespace ListPoolsResponse$ {
    export type Inbound = {
        ContentType: string;
        PoolsCursor?: shared.PoolsCursor$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<ListPoolsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            PoolsCursor: shared.PoolsCursor$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.PoolsCursor === undefined ? null : { poolsCursor: v.PoolsCursor }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        PoolsCursor?: shared.PoolsCursor$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListPoolsResponse> = z
        .object({
            contentType: z.string(),
            poolsCursor: shared.PoolsCursor$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.poolsCursor === undefined ? null : { PoolsCursor: v.poolsCursor }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
