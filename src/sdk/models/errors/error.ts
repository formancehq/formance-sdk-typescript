/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum ErrorCode {
    Validation = "VALIDATION",
    NotFound = "NOT_FOUND",
    Internal = "INTERNAL",
}

/**
 * General error
 */
export type ErrorTData = {
    errorCode: ErrorCode;
    errorMessage: string;
};

/**
 * General error
 */
export class ErrorT extends Error {
    errorCode: ErrorCode;
    errorMessage: string;

    /** The original data that was passed to this error instance. */
    data$: ErrorTData;

    constructor(err: ErrorTData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.errorCode = err.errorCode;
        this.errorMessage = err.errorMessage;

        this.name = "ErrorT";
    }
}

/** @internal */
export const ErrorCode$inboundSchema: z.ZodNativeEnum<typeof ErrorCode> = z.nativeEnum(ErrorCode);

/** @internal */
export const ErrorCode$outboundSchema: z.ZodNativeEnum<typeof ErrorCode> = ErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorCode$ {
    /** @deprecated use `ErrorCode$inboundSchema` instead. */
    export const inboundSchema = ErrorCode$inboundSchema;
    /** @deprecated use `ErrorCode$outboundSchema` instead. */
    export const outboundSchema = ErrorCode$outboundSchema;
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
    .object({
        errorCode: ErrorCode$inboundSchema,
        errorMessage: z.string(),
    })
    .transform((v) => {
        return new ErrorT(v);
    });

/** @internal */
export type ErrorT$Outbound = {
    errorCode: string;
    errorMessage: string;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<ErrorT$Outbound, z.ZodTypeDef, ErrorT> = z
    .instanceof(ErrorT)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            errorCode: ErrorCode$outboundSchema,
            errorMessage: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    export const inboundSchema = ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    export const outboundSchema = ErrorT$outboundSchema;
    /** @deprecated use `ErrorT$Outbound` instead. */
    export type Outbound = ErrorT$Outbound;
}
