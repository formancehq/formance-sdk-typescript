/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as shared from "../shared/index.js";

/**
 * Error
 */
export type PaymentsErrorResponseData = {
  errorCode: shared.PaymentsErrorsEnum;
  errorMessage: string;
};

/**
 * Error
 */
export class PaymentsErrorResponse extends Error {
  errorCode: shared.PaymentsErrorsEnum;
  errorMessage: string;

  /** The original data that was passed to this error instance. */
  data$: PaymentsErrorResponseData;

  constructor(err: PaymentsErrorResponseData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.errorCode = err.errorCode;
    this.errorMessage = err.errorMessage;

    this.name = "PaymentsErrorResponse";
  }
}

/** @internal */
export const PaymentsErrorResponse$inboundSchema: z.ZodType<
  PaymentsErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: shared.PaymentsErrorsEnum$inboundSchema,
  errorMessage: z.string(),
})
  .transform((v) => {
    return new PaymentsErrorResponse(v);
  });

/** @internal */
export type PaymentsErrorResponse$Outbound = {
  errorCode: string;
  errorMessage: string;
};

/** @internal */
export const PaymentsErrorResponse$outboundSchema: z.ZodType<
  PaymentsErrorResponse$Outbound,
  z.ZodTypeDef,
  PaymentsErrorResponse
> = z.instanceof(PaymentsErrorResponse)
  .transform(v => v.data$)
  .pipe(z.object({
    errorCode: shared.PaymentsErrorsEnum$outboundSchema,
    errorMessage: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsErrorResponse$ {
  /** @deprecated use `PaymentsErrorResponse$inboundSchema` instead. */
  export const inboundSchema = PaymentsErrorResponse$inboundSchema;
  /** @deprecated use `PaymentsErrorResponse$outboundSchema` instead. */
  export const outboundSchema = PaymentsErrorResponse$outboundSchema;
  /** @deprecated use `PaymentsErrorResponse$Outbound` instead. */
  export type Outbound = PaymentsErrorResponse$Outbound;
}
