/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as shared from "../shared/index.js";
import * as z from "zod";

/**
 * Error
 */
export type WebhooksErrorResponseData = {
    details?: string | undefined;
    errorCode: shared.WebhooksErrorsEnum;
    errorMessage: string;
};

/**
 * Error
 */
export class WebhooksErrorResponse extends Error {
    details?: string | undefined;
    errorCode: shared.WebhooksErrorsEnum;
    errorMessage: string;

    /** The original data that was passed to this error instance. */
    data$: WebhooksErrorResponseData;

    constructor(err: WebhooksErrorResponseData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.details != null) {
            this.details = err.details;
        }
        this.errorCode = err.errorCode;
        this.errorMessage = err.errorMessage;

        this.name = "WebhooksErrorResponse";
    }
}

/** @internal */
export const WebhooksErrorResponse$inboundSchema: z.ZodType<
    WebhooksErrorResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        details: z.string().optional(),
        errorCode: shared.WebhooksErrorsEnum$inboundSchema,
        errorMessage: z.string(),
    })
    .transform((v) => {
        return new WebhooksErrorResponse(v);
    });

/** @internal */
export type WebhooksErrorResponse$Outbound = {
    details?: string | undefined;
    errorCode: string;
    errorMessage: string;
};

/** @internal */
export const WebhooksErrorResponse$outboundSchema: z.ZodType<
    WebhooksErrorResponse$Outbound,
    z.ZodTypeDef,
    WebhooksErrorResponse
> = z
    .instanceof(WebhooksErrorResponse)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            details: z.string().optional(),
            errorCode: shared.WebhooksErrorsEnum$outboundSchema,
            errorMessage: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhooksErrorResponse$ {
    /** @deprecated use `WebhooksErrorResponse$inboundSchema` instead. */
    export const inboundSchema = WebhooksErrorResponse$inboundSchema;
    /** @deprecated use `WebhooksErrorResponse$outboundSchema` instead. */
    export const outboundSchema = WebhooksErrorResponse$outboundSchema;
    /** @deprecated use `WebhooksErrorResponse$Outbound` instead. */
    export type Outbound = WebhooksErrorResponse$Outbound;
}
