/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Error response
 */
export type ReconciliationErrorResponseData = {
    details?: string | undefined;
    errorCode: string;
    errorMessage: string;
};

/**
 * Error response
 */
export class ReconciliationErrorResponse extends Error {
    details?: string | undefined;
    errorCode: string;
    errorMessage: string;

    /** The original data that was passed to this error instance. */
    data$: ReconciliationErrorResponseData;

    constructor(err: ReconciliationErrorResponseData) {
        super("");
        this.data$ = err;

        if (err.details != null) {
            this.details = err.details;
        }
        this.errorCode = err.errorCode;
        this.errorMessage = err.errorMessage;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ReconciliationErrorResponse";
    }
}

/** @internal */
export namespace ReconciliationErrorResponse$ {
    export const inboundSchema: z.ZodType<ReconciliationErrorResponse, z.ZodTypeDef, unknown> = z
        .object({
            details: z.string().optional(),
            errorCode: z.string(),
            errorMessage: z.string(),
        })
        .transform((v) => {
            return new ReconciliationErrorResponse(v);
        });

    export type Outbound = {
        details?: string | undefined;
        errorCode: string;
        errorMessage: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReconciliationErrorResponse> = z
        .instanceof(ReconciliationErrorResponse)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                details: z.string().optional(),
                errorCode: z.string(),
                errorMessage: z.string(),
            })
        );
}
