/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as shared from "../shared/index.js";
import { SDKBaseError } from "./sdkbaseerror.js";

export type V3ErrorResponseData = {
  details?: string | undefined;
  errorCode: shared.V3ErrorsEnum;
  errorMessage: string;
};

export class V3ErrorResponse extends SDKBaseError {
  details?: string | undefined;
  errorCode: shared.V3ErrorsEnum;
  errorMessage: string;

  /** The original data that was passed to this error instance. */
  data$: V3ErrorResponseData;

  constructor(
    err: V3ErrorResponseData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.details != null) this.details = err.details;
    this.errorCode = err.errorCode;
    this.errorMessage = err.errorMessage;

    this.name = "V3ErrorResponse";
  }
}

/** @internal */
export const V3ErrorResponse$inboundSchema: z.ZodType<
  V3ErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  details: z.string().optional(),
  errorCode: shared.V3ErrorsEnum$inboundSchema,
  errorMessage: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new V3ErrorResponse(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type V3ErrorResponse$Outbound = {
  details?: string | undefined;
  errorCode: string;
  errorMessage: string;
};

/** @internal */
export const V3ErrorResponse$outboundSchema: z.ZodType<
  V3ErrorResponse$Outbound,
  z.ZodTypeDef,
  V3ErrorResponse
> = z.instanceof(V3ErrorResponse)
  .transform(v => v.data$)
  .pipe(z.object({
    details: z.string().optional(),
    errorCode: shared.V3ErrorsEnum$outboundSchema,
    errorMessage: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ErrorResponse$ {
  /** @deprecated use `V3ErrorResponse$inboundSchema` instead. */
  export const inboundSchema = V3ErrorResponse$inboundSchema;
  /** @deprecated use `V3ErrorResponse$outboundSchema` instead. */
  export const outboundSchema = V3ErrorResponse$outboundSchema;
  /** @deprecated use `V3ErrorResponse$Outbound` instead. */
  export type Outbound = V3ErrorResponse$Outbound;
}
