/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as shared from "../shared/index.js";

export type V2ErrorResponseData = {
  details?: string | undefined;
  errorCode: shared.V2ErrorsEnum;
  errorMessage: string;
};

export class V2ErrorResponse extends Error {
  details?: string | undefined;
  errorCode: shared.V2ErrorsEnum;
  errorMessage: string;

  /** The original data that was passed to this error instance. */
  data$: V2ErrorResponseData;

  constructor(err: V2ErrorResponseData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.details != null) this.details = err.details;
    this.errorCode = err.errorCode;
    this.errorMessage = err.errorMessage;

    this.name = "V2ErrorResponse";
  }
}

/** @internal */
export const V2ErrorResponse$inboundSchema: z.ZodType<
  V2ErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  details: z.string().optional(),
  errorCode: shared.V2ErrorsEnum$inboundSchema,
  errorMessage: z.string(),
})
  .transform((v) => {
    return new V2ErrorResponse(v);
  });

/** @internal */
export type V2ErrorResponse$Outbound = {
  details?: string | undefined;
  errorCode: string;
  errorMessage: string;
};

/** @internal */
export const V2ErrorResponse$outboundSchema: z.ZodType<
  V2ErrorResponse$Outbound,
  z.ZodTypeDef,
  V2ErrorResponse
> = z.instanceof(V2ErrorResponse)
  .transform(v => v.data$)
  .pipe(z.object({
    details: z.string().optional(),
    errorCode: shared.V2ErrorsEnum$outboundSchema,
    errorMessage: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V2ErrorResponse$ {
  /** @deprecated use `V2ErrorResponse$inboundSchema` instead. */
  export const inboundSchema = V2ErrorResponse$inboundSchema;
  /** @deprecated use `V2ErrorResponse$outboundSchema` instead. */
  export const outboundSchema = V2ErrorResponse$outboundSchema;
  /** @deprecated use `V2ErrorResponse$Outbound` instead. */
  export type Outbound = V2ErrorResponse$Outbound;
}
