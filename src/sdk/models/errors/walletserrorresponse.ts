/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum SchemasWalletsErrorResponseErrorCode {
    Validation = "VALIDATION",
    InternalError = "INTERNAL_ERROR",
    InsufficientFund = "INSUFFICIENT_FUND",
    HoldClosed = "HOLD_CLOSED",
}

/**
 * Error
 */
export type WalletsErrorResponseData = {
    errorCode: SchemasWalletsErrorResponseErrorCode;
    errorMessage: string;
};

/**
 * Error
 */
export class WalletsErrorResponse extends Error {
    errorCode: SchemasWalletsErrorResponseErrorCode;
    errorMessage: string;

    /** The original data that was passed to this error instance. */
    data$: WalletsErrorResponseData;

    constructor(err: WalletsErrorResponseData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.errorCode = err.errorCode;
        this.errorMessage = err.errorMessage;

        this.name = "WalletsErrorResponse";
    }
}

/** @internal */
export const SchemasWalletsErrorResponseErrorCode$inboundSchema: z.ZodNativeEnum<
    typeof SchemasWalletsErrorResponseErrorCode
> = z.nativeEnum(SchemasWalletsErrorResponseErrorCode);

/** @internal */
export const SchemasWalletsErrorResponseErrorCode$outboundSchema: z.ZodNativeEnum<
    typeof SchemasWalletsErrorResponseErrorCode
> = SchemasWalletsErrorResponseErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasWalletsErrorResponseErrorCode$ {
    /** @deprecated use `SchemasWalletsErrorResponseErrorCode$inboundSchema` instead. */
    export const inboundSchema = SchemasWalletsErrorResponseErrorCode$inboundSchema;
    /** @deprecated use `SchemasWalletsErrorResponseErrorCode$outboundSchema` instead. */
    export const outboundSchema = SchemasWalletsErrorResponseErrorCode$outboundSchema;
}

/** @internal */
export const WalletsErrorResponse$inboundSchema: z.ZodType<
    WalletsErrorResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        errorCode: SchemasWalletsErrorResponseErrorCode$inboundSchema,
        errorMessage: z.string(),
    })
    .transform((v) => {
        return new WalletsErrorResponse(v);
    });

/** @internal */
export type WalletsErrorResponse$Outbound = {
    errorCode: string;
    errorMessage: string;
};

/** @internal */
export const WalletsErrorResponse$outboundSchema: z.ZodType<
    WalletsErrorResponse$Outbound,
    z.ZodTypeDef,
    WalletsErrorResponse
> = z
    .instanceof(WalletsErrorResponse)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            errorCode: SchemasWalletsErrorResponseErrorCode$outboundSchema,
            errorMessage: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletsErrorResponse$ {
    /** @deprecated use `WalletsErrorResponse$inboundSchema` instead. */
    export const inboundSchema = WalletsErrorResponse$inboundSchema;
    /** @deprecated use `WalletsErrorResponse$outboundSchema` instead. */
    export const outboundSchema = WalletsErrorResponse$outboundSchema;
    /** @deprecated use `WalletsErrorResponse$Outbound` instead. */
    export type Outbound = WalletsErrorResponse$Outbound;
}
