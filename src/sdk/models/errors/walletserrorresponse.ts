/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum SchemasWalletsErrorResponseErrorCode {
    Validation = "VALIDATION",
    InternalError = "INTERNAL_ERROR",
    InsufficientFund = "INSUFFICIENT_FUND",
    HoldClosed = "HOLD_CLOSED",
}

/**
 * Error
 */
export type WalletsErrorResponseData = {
    errorCode: SchemasWalletsErrorResponseErrorCode;
    errorMessage: string;
};

/**
 * Error
 */
export class WalletsErrorResponse extends Error {
    errorCode: SchemasWalletsErrorResponseErrorCode;
    errorMessage: string;

    /** The original data that was passed to this error instance. */
    data$: WalletsErrorResponseData;

    constructor(err: WalletsErrorResponseData) {
        super("");
        this.data$ = err;

        this.errorCode = err.errorCode;
        this.errorMessage = err.errorMessage;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "WalletsErrorResponse";
    }
}

/** @internal */
export namespace SchemasWalletsErrorResponseErrorCode$ {
    export const inboundSchema = z.nativeEnum(SchemasWalletsErrorResponseErrorCode);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace WalletsErrorResponse$ {
    export const inboundSchema: z.ZodType<WalletsErrorResponse, z.ZodTypeDef, unknown> = z
        .object({
            errorCode: SchemasWalletsErrorResponseErrorCode$.inboundSchema,
            errorMessage: z.string(),
        })
        .transform((v) => {
            return new WalletsErrorResponse(v);
        });

    export type Outbound = {
        errorCode: string;
        errorMessage: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WalletsErrorResponse> = z
        .instanceof(WalletsErrorResponse)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                errorCode: SchemasWalletsErrorResponseErrorCode$.outboundSchema,
                errorMessage: z.string(),
            })
        );
}
