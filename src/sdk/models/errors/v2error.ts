/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum ErrorCode {
    Validation = "VALIDATION",
    NotFound = "NOT_FOUND",
    Internal = "INTERNAL",
}

/**
 * General error
 */
export type V2ErrorData = {
    errorCode: ErrorCode;
    errorMessage: string;
};

/**
 * General error
 */
export class V2Error extends Error {
    errorCode: ErrorCode;
    errorMessage: string;

    /** The original data that was passed to this error instance. */
    data$: V2ErrorData;

    constructor(err: V2ErrorData) {
        super("");
        this.data$ = err;

        this.errorCode = err.errorCode;
        this.errorMessage = err.errorMessage;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "V2Error";
    }
}

/** @internal */
export const ErrorCode$ = z.nativeEnum(ErrorCode);

/** @internal */
export namespace V2Error$ {
    export type Inbound = {
        errorCode: ErrorCode;
        errorMessage: string;
    };

    export const inboundSchema: z.ZodType<V2Error, z.ZodTypeDef, Inbound> = z
        .object({
            errorCode: ErrorCode$,
            errorMessage: z.string(),
        })
        .transform((v) => {
            return new V2Error({
                errorCode: v.errorCode,
                errorMessage: v.errorMessage,
            });
        });

    export type Outbound = {
        errorCode: ErrorCode;
        errorMessage: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2Error> = z
        .instanceof(V2Error)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errorCode: ErrorCode$,
                    errorMessage: z.string(),
                })
                .transform((v) => {
                    return {
                        errorCode: v.errorCode,
                        errorMessage: v.errorMessage,
                    };
                })
        );
}
