/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Ledger extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create a new batch of transactions to a ledger
     */
    async createTransactions(
        input: operations.CreateTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.CreateTransactionsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.CreateTransactionsRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.Transactions, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/batch")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                TransactionsResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Set the metadata of a transaction by its ID
     */
    async addMetadataOnTransaction(
        input: operations.AddMetadataOnTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.AddMetadataOnTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.AddMetadataOnTransactionRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: enc$.encodeSimple("txid", payload$.txid, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/api/ledger/{ledger}/transactions/{txid}/metadata"
        )(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.AddMetadataOnTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.AddMetadataOnTransactionResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Add metadata to an account
     */
    async addMetadataToAccount(
        input: operations.AddMetadataToAccountRequest,
        options?: RequestOptions
    ): Promise<operations.AddMetadataToAccountResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.AddMetadataToAccountRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            address: enc$.encodeSimple("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts/{address}/metadata")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.AddMetadataToAccountResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.AddMetadataToAccountResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Count the accounts from a ledger
     */
    async countAccounts(
        input: operations.CountAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.CountAccountsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.CountAccountsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts")(pathParams$);

        const query$ = [
            enc$.encodeForm("address", payload$.address, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeDeepObject("metadata", payload$.metadata, { charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            return operations.CountAccountsResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
            });
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.CountAccountsResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Count the transactions from a ledger
     */
    async countTransactions(
        input: operations.CountTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.CountTransactionsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.CountTransactionsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);

        const query$ = [
            enc$.encodeForm("account", payload$.account, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("destination", payload$.destination, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("endTime", payload$.endTime, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeDeepObject("metadata", payload$.metadata, { charEncoding: "percent" }),
            enc$.encodeForm("reference", payload$.reference, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("source", payload$.source, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("startTime", payload$.startTime, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            return operations.CountTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
            });
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.CountTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create a new transaction to a ledger
     */
    async createTransaction(
        input: operations.CreateTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.CreateTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.CreateTransactionRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.PostTransaction, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);

        const query$ = [
            enc$.encodeForm("preview", payload$.preview, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                TransactionsResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get account by its address
     */
    async getAccount(
        input: operations.GetAccountRequest,
        options?: RequestOptions
    ): Promise<operations.GetAccountResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetAccountRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            address: enc$.encodeSimple("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts/{address}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetAccountResponse$.inboundSchema.parse({
                ...responseFields$,
                AccountResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetAccountResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get the balances from a ledger's account
     */
    async getBalances(
        input: operations.GetBalancesRequest,
        options?: RequestOptions
    ): Promise<operations.GetBalancesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetBalancesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/balances")(pathParams$);

        const query$ = [
            enc$.encodeForm("address", payload$.address, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetBalancesResponse$.inboundSchema.parse({
                ...responseFields$,
                BalancesCursorResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetBalancesResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get the aggregated balances from selected accounts
     */
    async getBalancesAggregated(
        input: operations.GetBalancesAggregatedRequest,
        options?: RequestOptions
    ): Promise<operations.GetBalancesAggregatedResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetBalancesAggregatedRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/aggregate/balances")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("address", payload$.address, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("use_insertion_date", payload$.use_insertion_date, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetBalancesAggregatedResponse$.inboundSchema.parse({
                ...responseFields$,
                AggregateBalancesResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetBalancesAggregatedResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Show server information
     */
    async getInfo(options?: RequestOptions): Promise<operations.GetInfoResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/api/ledger/_info")();

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                ConfigInfoResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get information about a ledger
     */
    async getLedgerInfo(
        input: operations.GetLedgerInfoRequest,
        options?: RequestOptions
    ): Promise<operations.GetLedgerInfoResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetLedgerInfoRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/_info")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetLedgerInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                LedgerInfoResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetLedgerInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get the mapping of a ledger
     */
    async getMapping(
        input: operations.GetMappingRequest,
        options?: RequestOptions
    ): Promise<operations.GetMappingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetMappingRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/mapping")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetMappingResponse$.inboundSchema.parse({
                ...responseFields$,
                MappingResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetMappingResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get transaction from a ledger by its ID
     */
    async getTransaction(
        input: operations.GetTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.GetTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTransactionRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: enc$.encodeSimple("txid", payload$.txid, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/{txid}")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                TransactionResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List accounts from a ledger
     *
     * @remarks
     * List accounts from a ledger, sorted by address in descending order.
     */
    async listAccounts(
        input: operations.ListAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.ListAccountsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListAccountsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts")(pathParams$);

        const query$ = [
            enc$.encodeForm("address", payload$.address, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("balance", payload$.balance, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
            enc$.encodeDeepObject("metadata", payload$.metadata, { charEncoding: "percent" }),
            enc$.encodeForm("pageSize", payload$.pageSize, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("pagination_token", payload$.pagination_token, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListAccountsResponse$.inboundSchema.parse({
                ...responseFields$,
                AccountsCursorResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListAccountsResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List the logs from a ledger
     *
     * @remarks
     * List the logs from a ledger, sorted by ID in descending order.
     */
    async listLogs(
        input: operations.ListLogsRequest,
        options?: RequestOptions
    ): Promise<operations.ListLogsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListLogsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/logs")(pathParams$);

        const query$ = [
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("endTime", payload$.endTime, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("pageSize", payload$.pageSize, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("startTime", payload$.startTime, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListLogsResponse$.inboundSchema.parse({
                ...responseFields$,
                LogsCursorResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListLogsResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List transactions from a ledger
     *
     * @remarks
     * List transactions from a ledger, sorted by txid in descending order.
     */
    async listTransactions(
        input: operations.ListTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.ListTransactionsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListTransactionsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);

        const query$ = [
            enc$.encodeForm("account", payload$.account, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("destination", payload$.destination, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("endTime", payload$.endTime, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeDeepObject("metadata", payload$.metadata, { charEncoding: "percent" }),
            enc$.encodeForm("pageSize", payload$.pageSize, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("reference", payload$.reference, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("source", payload$.source, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("startTime", payload$.startTime, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                TransactionsCursorResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    async readStats(
        input: operations.ReadStatsRequest,
        options?: RequestOptions
    ): Promise<operations.ReadStatsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ReadStatsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/stats")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ReadStatsResponse$.inboundSchema.parse({
                ...responseFields$,
                StatsResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.ReadStatsResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Revert a ledger transaction by its ID
     */
    async revertTransaction(
        input: operations.RevertTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.RevertTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.RevertTransactionRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: enc$.encodeSimple("txid", payload$.txid, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/{txid}/revert")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("disableChecks", payload$.disableChecks, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.RevertTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                TransactionResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.RevertTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Execute a Numscript
     *
     * @remarks
     * This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
     *
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async runScript(
        input: operations.RunScriptRequest,
        options?: RequestOptions
    ): Promise<operations.RunScriptResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.RunScriptRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.Script, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/script")(pathParams$);

        const query$ = [
            enc$.encodeForm("preview", payload$.preview, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.RunScriptResponse$.inboundSchema.parse({
                ...responseFields$,
                ScriptResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update the mapping of a ledger
     */
    async updateMapping(
        input: operations.UpdateMappingRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateMappingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateMappingRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.Mapping, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/{ledger}/mapping")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateMappingResponse$.inboundSchema.parse({
                ...responseFields$,
                MappingResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateMappingResponse$.inboundSchema.parse({
                ...responseFields$,
                ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Set the metadata of a transaction by its ID
     */
    async v2AddMetadataOnTransaction(
        input: operations.V2AddMetadataOnTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2AddMetadataOnTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2AddMetadataOnTransactionRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/transactions/{id}/metadata"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("dryRun", payload$.dryRun, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "Idempotency-Key",
            enc$.encodeSimple("Idempotency-Key", payload$["Idempotency-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.V2ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2AddMetadataOnTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.V2AddMetadataOnTransactionResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Add metadata to an account
     */
    async v2AddMetadataToAccount(
        input: operations.V2AddMetadataToAccountRequest,
        options?: RequestOptions
    ): Promise<operations.V2AddMetadataToAccountResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2AddMetadataToAccountRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            address: enc$.encodeSimple("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/accounts/{address}/metadata"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("dryRun", payload$.dryRun, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "Idempotency-Key",
            enc$.encodeSimple("Idempotency-Key", payload$["Idempotency-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.V2ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2AddMetadataToAccountResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.V2AddMetadataToAccountResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Count the accounts from a ledger
     */
    async v2CountAccounts(
        input: operations.V2CountAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.V2CountAccountsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2CountAccountsRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts")(pathParams$);

        const query$ = [
            enc$.encodeForm("pit", payload$.pit, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            return operations.V2CountAccountsResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
            });
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2CountAccountsResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Count the transactions from a ledger
     */
    async v2CountTransactions(
        input: operations.V2CountTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.V2CountTransactionsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2CountTransactionsRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("pit", payload$.pit, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            return operations.V2CountTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
            });
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2CountTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Bulk request
     */
    async v2CreateBulk(
        input: operations.V2CreateBulkRequest,
        options?: RequestOptions
    ): Promise<operations.V2CreateBulkResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2CreateBulkRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/_bulk")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, [200, 400], "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2CreateBulkResponse$.inboundSchema.parse({
                ...responseFields$,
                V2BulkResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2CreateBulkResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create a ledger
     */
    async v2CreateLedger(
        input: operations.V2CreateLedgerRequest,
        options?: RequestOptions
    ): Promise<operations.V2CreateLedgerResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2CreateLedgerRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.V2CreateLedgerRequest, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.V2ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2CreateLedgerResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.V2CreateLedgerResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Create a new transaction to a ledger
     */
    async v2CreateTransaction(
        input: operations.V2CreateTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2CreateTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2CreateTransactionRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.V2PostTransaction, { explode: true });

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("dryRun", payload$.dryRun, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "Idempotency-Key",
            enc$.encodeSimple("Idempotency-Key", payload$["Idempotency-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2CreateTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                V2CreateTransactionResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.V2ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2CreateTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    async v2DeleteAccountMetadata(
        input: operations.V2DeleteAccountMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.V2DeleteAccountMetadataResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = operations.V2DeleteAccountMetadataRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            address: enc$.encodeSimple("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            key: enc$.encodeSimple("key", payload$.key, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/accounts/{address}/metadata/{key}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, "2XX")) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.V2DeleteAccountMetadataResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    async v2DeleteTransactionMetadata(
        input: operations.V2DeleteTransactionMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.V2DeleteTransactionMetadataResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2DeleteTransactionMetadataRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            key: enc$.encodeSimple("key", payload$.key, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/transactions/{id}/metadata/{key}"
        )(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, "2XX")) {
            // fallthrough
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.V2ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2DeleteTransactionMetadataResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.V2DeleteTransactionMetadataResponse$.inboundSchema.parse(responseFields$);
    }

    /**
     * Get account by its address
     */
    async v2GetAccount(
        input: operations.V2GetAccountRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetAccountResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2GetAccountRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            address: enc$.encodeSimple("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts/{address}")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("expand", payload$.expand, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("pit", payload$.pit, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetAccountResponse$.inboundSchema.parse({
                ...responseFields$,
                V2AccountResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetAccountResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Show server information
     */
    async v2GetInfo(options?: RequestOptions): Promise<operations.V2GetInfoResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/api/ledger/v2/_info")();

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ConfigInfoResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a ledger
     */
    async v2GetLedger(
        input: operations.V2GetLedgerRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetLedgerResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2GetLedgerRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetLedgerResponse$.inboundSchema.parse({
                ...responseFields$,
                V2Ledger: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetLedgerResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get information about a ledger
     */
    async v2GetLedgerInfo(
        input: operations.V2GetLedgerInfoRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetLedgerInfoResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2GetLedgerInfoRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/_info")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetLedgerInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                V2LedgerInfoResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetLedgerInfoResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get transaction from a ledger by its ID
     */
    async v2GetTransaction(
        input: operations.V2GetTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2GetTransactionRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("expand", payload$.expand, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("pit", payload$.pit, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                V2GetTransactionResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result = errors.V2ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2GetTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List ledgers
     */
    async v2ListLedgers(
        input: operations.V2ListLedgersRequest,
        options?: RequestOptions
    ): Promise<operations.V2ListLedgersResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2ListLedgersRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/api/ledger/v2")();

        const query$ = [
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("pageSize", payload$.pageSize, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2ListLedgersResponse$.inboundSchema.parse({
                ...responseFields$,
                V2LedgerListResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2ListLedgersResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    async v2ReadStats(
        input: operations.V2ReadStatsRequest,
        options?: RequestOptions
    ): Promise<operations.V2ReadStatsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2ReadStatsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/stats")(pathParams$);

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2ReadStatsResponse$.inboundSchema.parse({
                ...responseFields$,
                V2StatsResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2ReadStatsResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Revert a ledger transaction by its ID
     */
    async v2RevertTransaction(
        input: operations.V2RevertTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2RevertTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.V2RevertTransactionRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: enc$.encodeSimple("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}/revert")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("force", payload$.force, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2RevertTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                V2RevertTransactionResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.V2ErrorResponse$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = operations.V2RevertTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                V2ErrorResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
