/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeDeepObjectQuery as encodeDeepObjectQuery$,
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeJSONQuery as encodeJSONQuery$,
    encodeSimple as encodeSimple$,
    queryJoin as queryJoin$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as errors from "./models/errors/index.js";
import * as operations from "./models/operations/index.js";

export class Ledger extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create a new batch of transactions to a ledger
     */
    async createTransactions(
        request: operations.CreateTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.CreateTransactionsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateTransactionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.Transactions, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/batch")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "CreateTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateTransactionsResponse>()
            .json(200, operations.CreateTransactionsResponse$inboundSchema, {
                key: "TransactionsResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Set the metadata of a transaction by its ID
     */
    async addMetadataOnTransaction(
        request: operations.AddMetadataOnTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.AddMetadataOnTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.AddMetadataOnTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: encodeSimple$("txid", payload$.txid, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent(
            "/api/ledger/{ledger}/transactions/{txid}/metadata"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "addMetadataOnTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.AddMetadataOnTransactionResponse>()
            .void(204, operations.AddMetadataOnTransactionResponse$inboundSchema)
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Add metadata to an account
     */
    async addMetadataToAccount(
        request: operations.AddMetadataToAccountRequest,
        options?: RequestOptions
    ): Promise<operations.AddMetadataToAccountResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.AddMetadataToAccountRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts/{address}/metadata")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "addMetadataToAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.AddMetadataToAccountResponse>()
            .void(204, operations.AddMetadataToAccountResponse$inboundSchema)
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Count the accounts from a ledger
     */
    async countAccounts(
        request: operations.CountAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.CountAccountsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CountAccountsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts")(pathParams$);

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                metadata: payload$.metadata,
            }),
            encodeFormQuery$({
                address: payload$.address,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "countAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CountAccountsResponse>()
            .void(200, operations.CountAccountsResponse$inboundSchema, { hdrs: true })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Count the transactions from a ledger
     */
    async countTransactions(
        request: operations.CountTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.CountTransactionsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CountTransactionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                metadata: payload$.metadata,
            }),
            encodeFormQuery$({
                account: payload$.account,
                destination: payload$.destination,
                endTime: payload$.endTime,
                reference: payload$.reference,
                source: payload$.source,
                startTime: payload$.startTime,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "countTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CountTransactionsResponse>()
            .void(200, operations.CountTransactionsResponse$inboundSchema, { hdrs: true })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a new transaction to a ledger
     */
    async createTransaction(
        request: operations.CreateTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.CreateTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.PostTransaction, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);

        const query$ = encodeFormQuery$({
            preview: payload$.preview,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.CreateTransactionResponse>()
            .json(200, operations.CreateTransactionResponse$inboundSchema, {
                key: "TransactionsResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get account by its address
     */
    async getAccount(
        request: operations.GetAccountRequest,
        options?: RequestOptions
    ): Promise<operations.GetAccountResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetAccountRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts/{address}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetAccountResponse>()
            .json(200, operations.GetAccountResponse$inboundSchema, { key: "AccountResponse" })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get the balances from a ledger's account
     */
    async getBalances(
        request: operations.GetBalancesRequest,
        options?: RequestOptions
    ): Promise<operations.GetBalancesResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetBalancesRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/balances")(pathParams$);

        const query$ = encodeFormQuery$({
            address: payload$.address,
            after: payload$.after,
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getBalances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetBalancesResponse>()
            .json(200, operations.GetBalancesResponse$inboundSchema, {
                key: "BalancesCursorResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get the aggregated balances from selected accounts
     */
    async getBalancesAggregated(
        request: operations.GetBalancesAggregatedRequest,
        options?: RequestOptions
    ): Promise<operations.GetBalancesAggregatedResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetBalancesAggregatedRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/aggregate/balances")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            address: payload$.address,
            useInsertionDate: payload$.useInsertionDate,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getBalancesAggregated",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetBalancesAggregatedResponse>()
            .json(200, operations.GetBalancesAggregatedResponse$inboundSchema, {
                key: "AggregateBalancesResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Show server information
     */
    async getInfo(options?: RequestOptions): Promise<operations.GetInfoResponse> {
        const path$ = this.templateURLComponent("/api/ledger/_info")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetInfoResponse>()
            .json(200, operations.GetInfoResponse$inboundSchema, { key: "ConfigInfoResponse" })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get information about a ledger
     */
    async getLedgerInfo(
        request: operations.GetLedgerInfoRequest,
        options?: RequestOptions
    ): Promise<operations.GetLedgerInfoResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetLedgerInfoRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/_info")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getLedgerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetLedgerInfoResponse>()
            .json(200, operations.GetLedgerInfoResponse$inboundSchema, {
                key: "LedgerInfoResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get the mapping of a ledger
     */
    async getMapping(
        request: operations.GetMappingRequest,
        options?: RequestOptions
    ): Promise<operations.GetMappingResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetMappingRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/mapping")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getMapping",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetMappingResponse>()
            .json(200, operations.GetMappingResponse$inboundSchema, { key: "MappingResponse" })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get transaction from a ledger by its ID
     */
    async getTransaction(
        request: operations.GetTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.GetTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: encodeSimple$("txid", payload$.txid, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/{txid}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.GetTransactionResponse>()
            .json(200, operations.GetTransactionResponse$inboundSchema, {
                key: "TransactionResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List accounts from a ledger
     *
     * @remarks
     * List accounts from a ledger, sorted by address in descending order.
     */
    async listAccounts(
        request: operations.ListAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.ListAccountsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListAccountsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts")(pathParams$);

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                metadata: payload$.metadata,
            }),
            encodeFormQuery$({
                address: payload$.address,
                after: payload$.after,
                balance: payload$.balance,
                cursor: payload$.cursor,
                pageSize: payload$.pageSize,
                pagination_token: payload$.pagination_token,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "listAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ListAccountsResponse>()
            .json(200, operations.ListAccountsResponse$inboundSchema, {
                key: "AccountsCursorResponse",
            })
            .json(404, operations.ListAccountsResponse$inboundSchema, { key: "ErrorResponse" })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List the logs from a ledger
     *
     * @remarks
     * List the logs from a ledger, sorted by ID in descending order.
     */
    async listLogs(
        request: operations.ListLogsRequest,
        options?: RequestOptions
    ): Promise<operations.ListLogsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListLogsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/logs")(pathParams$);

        const query$ = encodeFormQuery$({
            after: payload$.after,
            cursor: payload$.cursor,
            endTime: payload$.endTime,
            pageSize: payload$.pageSize,
            startTime: payload$.startTime,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "listLogs",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ListLogsResponse>()
            .json(200, operations.ListLogsResponse$inboundSchema, { key: "LogsCursorResponse" })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List transactions from a ledger
     *
     * @remarks
     * List transactions from a ledger, sorted by txid in descending order.
     */
    async listTransactions(
        request: operations.ListTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.ListTransactionsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListTransactionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);

        const query$ = queryJoin$(
            encodeDeepObjectQuery$({
                metadata: payload$.metadata,
            }),
            encodeFormQuery$({
                account: payload$.account,
                after: payload$.after,
                cursor: payload$.cursor,
                destination: payload$.destination,
                endTime: payload$.endTime,
                pageSize: payload$.pageSize,
                reference: payload$.reference,
                source: payload$.source,
                startTime: payload$.startTime,
            })
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "listTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ListTransactionsResponse>()
            .json(200, operations.ListTransactionsResponse$inboundSchema, {
                key: "TransactionsCursorResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    async readStats(
        request: operations.ReadStatsRequest,
        options?: RequestOptions
    ): Promise<operations.ReadStatsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ReadStatsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/stats")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "readStats",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ReadStatsResponse>()
            .json(200, operations.ReadStatsResponse$inboundSchema, { key: "StatsResponse" })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Revert a ledger transaction by its ID
     */
    async revertTransaction(
        request: operations.RevertTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.RevertTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RevertTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: encodeSimple$("txid", payload$.txid, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/{txid}/revert")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            disableChecks: payload$.disableChecks,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "revertTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.RevertTransactionResponse>()
            .json(201, operations.RevertTransactionResponse$inboundSchema, {
                key: "TransactionResponse",
            })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Execute a Numscript
     *
     * @remarks
     * This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
     *
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async runScript(
        request: operations.RunScriptRequest,
        options?: RequestOptions
    ): Promise<operations.RunScriptResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RunScriptRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.Script, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/script")(pathParams$);

        const query$ = encodeFormQuery$({
            preview: payload$.preview,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "runScript",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.RunScriptResponse>()
            .json(200, operations.RunScriptResponse$inboundSchema, { key: "ScriptResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update the mapping of a ledger
     */
    async updateMapping(
        request: operations.UpdateMappingRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateMappingResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateMappingRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.Mapping, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/mapping")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updateMapping",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.UpdateMappingResponse>()
            .json(200, operations.UpdateMappingResponse$inboundSchema, { key: "MappingResponse" })
            .json("default", errors.ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Set the metadata of a transaction by its ID
     */
    async v2AddMetadataOnTransaction(
        request: operations.V2AddMetadataOnTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2AddMetadataOnTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2AddMetadataOnTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/transactions/{id}/metadata"
        )(pathParams$);

        const query$ = encodeFormQuery$({
            dryRun: payload$.dryRun,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "Idempotency-Key": encodeSimple$("Idempotency-Key", payload$["Idempotency-Key"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2AddMetadataOnTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2AddMetadataOnTransactionResponse>()
            .void(204, operations.V2AddMetadataOnTransactionResponse$inboundSchema)
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Add metadata to an account
     */
    async v2AddMetadataToAccount(
        request: operations.V2AddMetadataToAccountRequest,
        options?: RequestOptions
    ): Promise<operations.V2AddMetadataToAccountResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2AddMetadataToAccountRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/accounts/{address}/metadata"
        )(pathParams$);

        const query$ = encodeFormQuery$({
            dryRun: payload$.dryRun,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "Idempotency-Key": encodeSimple$("Idempotency-Key", payload$["Idempotency-Key"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2AddMetadataToAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2AddMetadataToAccountResponse>()
            .void(204, operations.V2AddMetadataToAccountResponse$inboundSchema)
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Count the accounts from a ledger
     */
    async v2CountAccounts(
        request: operations.V2CountAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.V2CountAccountsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2CountAccountsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts")(pathParams$);

        const query$ = queryJoin$(
            encodeFormQuery$({
                pit: payload$.pit,
            }),
            encodeJSONQuery$(
                {
                    query: payload$.query,
                },
                { explode: false }
            )
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2CountAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2CountAccountsResponse>()
            .void(204, operations.V2CountAccountsResponse$inboundSchema, { hdrs: true })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Count the transactions from a ledger
     */
    async v2CountTransactions(
        request: operations.V2CountTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.V2CountTransactionsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2CountTransactionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(
            pathParams$
        );

        const query$ = queryJoin$(
            encodeFormQuery$({
                pit: payload$.pit,
            }),
            encodeJSONQuery$(
                {
                    query: payload$.query,
                },
                { explode: false }
            )
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2CountTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2CountTransactionsResponse>()
            .void(204, operations.V2CountTransactionsResponse$inboundSchema, { hdrs: true })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Bulk request
     */
    async v2CreateBulk(
        request: operations.V2CreateBulkRequest,
        options?: RequestOptions
    ): Promise<operations.V2CreateBulkResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2CreateBulkRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/_bulk")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateBulk",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2CreateBulkResponse>()
            .json([200, 400], operations.V2CreateBulkResponse$inboundSchema, {
                key: "V2BulkResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a ledger
     */
    async v2CreateLedger(
        request: operations.V2CreateLedgerRequest,
        options?: RequestOptions
    ): Promise<operations.V2CreateLedgerResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2CreateLedgerRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.V2CreateLedgerRequest, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateLedger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2CreateLedgerResponse>()
            .void(204, operations.V2CreateLedgerResponse$inboundSchema)
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a new transaction to a ledger
     */
    async v2CreateTransaction(
        request: operations.V2CreateTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2CreateTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2CreateTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.V2PostTransaction, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            dryRun: payload$.dryRun,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "Idempotency-Key": encodeSimple$("Idempotency-Key", payload$["Idempotency-Key"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2CreateTransactionResponse>()
            .json(200, operations.V2CreateTransactionResponse$inboundSchema, {
                key: "V2CreateTransactionResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    async v2DeleteAccountMetadata(
        request: operations.V2DeleteAccountMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.V2DeleteAccountMetadataResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2DeleteAccountMetadataRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            key: encodeSimple$("key", payload$.key, { explode: false, charEncoding: "percent" }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/accounts/{address}/metadata/{key}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteAccountMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2DeleteAccountMetadataResponse>()
            .void("2XX", operations.V2DeleteAccountMetadataResponse$inboundSchema)
            .fail("default")
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete ledger metadata by key
     */
    async v2DeleteLedgerMetadata(
        request: operations.V2DeleteLedgerMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.V2DeleteLedgerMetadataResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2DeleteLedgerMetadataRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            key: encodeSimple$("key", payload$.key, { explode: false, charEncoding: "percent" }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/metadata/{key}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteLedgerMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2DeleteLedgerMetadataResponse>()
            .void(204, operations.V2DeleteLedgerMetadataResponse$inboundSchema)
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    async v2DeleteTransactionMetadata(
        request: operations.V2DeleteTransactionMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.V2DeleteTransactionMetadataResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2DeleteTransactionMetadataRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
            key: encodeSimple$("key", payload$.key, { explode: false, charEncoding: "percent" }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/api/ledger/v2/{ledger}/transactions/{id}/metadata/{key}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteTransactionMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2DeleteTransactionMetadataResponse>()
            .void("2XX", operations.V2DeleteTransactionMetadataResponse$inboundSchema)
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get account by its address
     */
    async v2GetAccount(
        request: operations.V2GetAccountRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetAccountResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2GetAccountRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts/{address}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            expand: payload$.expand,
            pit: payload$.pit,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2GetAccountResponse>()
            .json(200, operations.V2GetAccountResponse$inboundSchema, { key: "V2AccountResponse" })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get the aggregated balances from selected accounts
     */
    async v2GetBalancesAggregated(
        request: operations.V2GetBalancesAggregatedRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetBalancesAggregatedResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2GetBalancesAggregatedRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/aggregate/balances")(
            pathParams$
        );

        const query$ = queryJoin$(
            encodeFormQuery$({
                pit: payload$.pit,
                useInsertionDate: payload$.useInsertionDate,
            }),
            encodeJSONQuery$(
                {
                    query: payload$.query,
                },
                { explode: false }
            )
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetBalancesAggregated",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2GetBalancesAggregatedResponse>()
            .json(200, operations.V2GetBalancesAggregatedResponse$inboundSchema, {
                key: "V2AggregateBalancesResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Show server information
     */
    async v2GetInfo(options?: RequestOptions): Promise<operations.V2GetInfoResponse> {
        const path$ = this.templateURLComponent("/api/ledger/v2/_info")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2GetInfoResponse>()
            .json(200, operations.V2GetInfoResponse$inboundSchema, { key: "V2ConfigInfoResponse" })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get a ledger
     */
    async v2GetLedger(
        request: operations.V2GetLedgerRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetLedgerResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2GetLedgerRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetLedger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2GetLedgerResponse>()
            .json(200, operations.V2GetLedgerResponse$inboundSchema, { key: "V2GetLedgerResponse" })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get information about a ledger
     */
    async v2GetLedgerInfo(
        request: operations.V2GetLedgerInfoRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetLedgerInfoResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2GetLedgerInfoRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/_info")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetLedgerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2GetLedgerInfoResponse>()
            .json(200, operations.V2GetLedgerInfoResponse$inboundSchema, {
                key: "V2LedgerInfoResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get transaction from a ledger by its ID
     */
    async v2GetTransaction(
        request: operations.V2GetTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2GetTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            expand: payload$.expand,
            pit: payload$.pit,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2GetTransactionResponse>()
            .json(200, operations.V2GetTransactionResponse$inboundSchema, {
                key: "V2GetTransactionResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get list of volumes with balances for (account/asset)
     */
    async v2GetVolumesWithBalances(
        request: operations.V2GetVolumesWithBalancesRequest,
        options?: RequestOptions
    ): Promise<operations.V2GetVolumesWithBalancesResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2GetVolumesWithBalancesRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/volumes")(pathParams$);

        const query$ = queryJoin$(
            encodeFormQuery$({
                cursor: payload$.cursor,
                endTime: payload$.endTime,
                groupBy: payload$.groupBy,
                insertionDate: payload$.insertionDate,
                pageSize: payload$.pageSize,
                startTime: payload$.startTime,
            }),
            encodeJSONQuery$(
                {
                    query: payload$.query,
                },
                { explode: false }
            )
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetVolumesWithBalances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2GetVolumesWithBalancesResponse>()
            .json(200, operations.V2GetVolumesWithBalancesResponse$inboundSchema, {
                key: "V2VolumesWithBalanceCursorResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List accounts from a ledger
     *
     * @remarks
     * List accounts from a ledger, sorted by address in descending order.
     */
    async v2ListAccounts(
        request: operations.V2ListAccountsRequest,
        options?: RequestOptions
    ): Promise<operations.V2ListAccountsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2ListAccountsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts")(pathParams$);

        const query$ = queryJoin$(
            encodeFormQuery$({
                cursor: payload$.cursor,
                expand: payload$.expand,
                pageSize: payload$.pageSize,
                pit: payload$.pit,
            }),
            encodeJSONQuery$(
                {
                    query: payload$.query,
                },
                { explode: false }
            )
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2ListAccountsResponse>()
            .json(200, operations.V2ListAccountsResponse$inboundSchema, {
                key: "V2AccountsCursorResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List ledgers
     */
    async v2ListLedgers(
        request: operations.V2ListLedgersRequest,
        options?: RequestOptions
    ): Promise<operations.V2ListLedgersResponse> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2ListLedgersRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/ledger/v2")();

        const query$ = encodeFormQuery$({
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListLedgers",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2ListLedgersResponse>()
            .json(200, operations.V2ListLedgersResponse$inboundSchema, {
                key: "V2LedgerListResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List the logs from a ledger
     *
     * @remarks
     * List the logs from a ledger, sorted by ID in descending order.
     */
    async v2ListLogs(
        request: operations.V2ListLogsRequest,
        options?: RequestOptions
    ): Promise<operations.V2ListLogsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2ListLogsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/logs")(pathParams$);

        const query$ = queryJoin$(
            encodeFormQuery$({
                cursor: payload$.cursor,
                pageSize: payload$.pageSize,
                pit: payload$.pit,
            }),
            encodeJSONQuery$(
                {
                    query: payload$.query,
                },
                { explode: false }
            )
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListLogs",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2ListLogsResponse>()
            .json(200, operations.V2ListLogsResponse$inboundSchema, { key: "V2LogsCursorResponse" })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List transactions from a ledger
     *
     * @remarks
     * List transactions from a ledger, sorted by id in descending order.
     */
    async v2ListTransactions(
        request: operations.V2ListTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.V2ListTransactionsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2ListTransactionsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(
            pathParams$
        );

        const query$ = queryJoin$(
            encodeFormQuery$({
                cursor: payload$.cursor,
                expand: payload$.expand,
                pageSize: payload$.pageSize,
                pit: payload$.pit,
            }),
            encodeJSONQuery$(
                {
                    query: payload$.query,
                },
                { explode: false }
            )
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2ListTransactionsResponse>()
            .json(200, operations.V2ListTransactionsResponse$inboundSchema, {
                key: "V2TransactionsCursorResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    async v2ReadStats(
        request: operations.V2ReadStatsRequest,
        options?: RequestOptions
    ): Promise<operations.V2ReadStatsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2ReadStatsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/stats")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2ReadStats",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2ReadStatsResponse>()
            .json(200, operations.V2ReadStatsResponse$inboundSchema, { key: "V2StatsResponse" })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Revert a ledger transaction by its ID
     */
    async v2RevertTransaction(
        request: operations.V2RevertTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.V2RevertTransactionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2RevertTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}/revert")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            atEffectiveDate: payload$.atEffectiveDate,
            force: payload$.force,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2RevertTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2RevertTransactionResponse>()
            .json(201, operations.V2RevertTransactionResponse$inboundSchema, {
                key: "V2RevertTransactionResponse",
            })
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update ledger metadata
     */
    async v2UpdateLedgerMetadata(
        request: operations.V2UpdateLedgerMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.V2UpdateLedgerMetadataResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.V2UpdateLedgerMetadataRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            ledger: encodeSimple$("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/metadata")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        } else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "v2UpdateLedgerMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.V2UpdateLedgerMetadataResponse>()
            .void(204, operations.V2UpdateLedgerMetadataResponse$inboundSchema)
            .json("default", errors.V2ErrorResponse$inboundSchema, { err: true })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
